'************************************************************************************************
'* 業務名          宛名管理システム
'* 
'* クラス名        ＡＢ宛名住基更新(ABJukiKoshinBClass)
'* 
'* バージョン情報   Ver 1.0
'* 
'* 日付け　作成者   2003/06/02　滝沢　欽也
'*
'* 著作権          （株）電算
'************************************************************************************************
'* 修正履歴　　履歴番号　　修正内容
'* 2003/09/11 000001     住所コード桁相違対応
'* 2003/09/18 000002     修正
'* 2003/11/21 000003     仕様変更：年金・国保の個別情報を付けて、前後を出力（新規の場合は後のみ）
'* 2004/02/16 000004     追加・更新時にRⅢ連携（ワークフロー）処理を追加。レプリカDBへの当初登録
'* 2004/03/09 000005     固定資産税への登録
'* 2004/08/27 000006     固定資産税データ連携制御処理追加
'* 2004/10/20 000007     固定資産税連動個人法人区分を修正
'* 2005/02/15 000008     固定資産税連動追加処理以外の更新を追加
'* 2005/02/28 000009     レプリカ連動メソッドを追加（レプリカ連動起動箇所改修）
'* 2005/04/04 000010     固定資産税連動異動年月日を修正(マルゴ村山)
'* 2005/06/05 000011     履歴開始年月日を当日にする
'* 2005/06/07 000012     前履歴終了年月日を直近履歴開始年月日の前日にする
'* 2005/06/17 000013     履歴更新の修正
'* 2005/08/17 000014     宛名累積追加時、汎用ＣＤをABATENARUISEKIのRESERCEにセットする修正(前後区分２の時だけ)(マルゴ村山)
'* 2005/08/17 000015     宛名累積追加時、汎用ＣＤをABATENARUISEKIのRESERCEにセットする修正(前後区分１の時も)(マルゴ村山)
'* 2005/11/01 000016     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/11/22 000017     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/11/27 000018     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/12/02 000019     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/12/07 000020     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/12/12 000021     行政区ＣＤ＆行政区名称のカスタマイズ(マルゴ村山)
'* 2005/12/15 000022     仕様変更：行政区ＣＤ＆行政区名称のカスタマイズ　名称はセットしない
'* 2005/12/16 000023     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/12/17 000024     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/12/18 000025     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/12/18 000026     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/12/20 000027     JukiDataKoshinメソッドの修正(マルゴ村山)
'* 2005/12/27 000028     CKINJIYUCDにSHORIJIYUCDをセットしない（仕様変更）
'* 2006/04/19 000029     ABATENARUISEKIのRESERCEにセットする内容を汎用ＣＤから処理ＣＤに変更する
'* 2006/08/10 000030     履歴を残さない修正(SHORIJIYUCD="03"or"04")の場合、履歴開始年月日は更新しない
'*                       住基異動者追加処理直後に住基で"03"or"04"修正すると開始年月日がおかしくなってしまう(マルゴ村山)
'* 2007/01/30 000031     転出確定住所あり、転出予定住所ありの場合も番地コードを設定するように修正
'* 2007/02/15 000032     宛名累積マスタの更新方法を変更
'* 2007/07/13 000033     DB拡張対応，カラム作成時のMaxlength値を拡張後のDBのサイズに対応させる
'*                       （適用範囲が分散しているため履歴番号の付加無し，前数値のみコメントアウト）（中沢）
'* 2007/08/31 000034     UR管理情報：外国人本名検索制御が"2"のときは外国人本名優先検索用に本名カナ姓名をセット（中沢）
'* 2007/09/05 000035     UR番地コードマスタクラスのインスタンス化部分を修正（中沢）
'* 2007/09/28 000036     氏名利用区分のが１のときは通称名優先、２のときは本名優先（中沢）
'* 2008/05/12 000037     管内管外区分の編集仕様の変更に伴う修正（比嘉）
'* 2009/04/07 000038     番地CDが左詰になる不具合対応：転出確定･予定番地からの番地CD生成を番地CD編集Ｂｸﾗｽで行う（工藤）
'* 2009/05/12 000039     バッチフラグを追加、及びUR管理情報取得方法を一部変更（比嘉）
'* 2009/05/22 000040     住登外から再転入し、さらに転出した場合の住登外優先区分が"0"になる不具合の対応（吉澤）
'*                       さらに不要なロジックを削除（吉澤）
'* 2009/06/18 000041     履歴修正で履歴修正データが1件のみ(直近データのみ)の場合に履歴データが追加される不具合の対応（比嘉）
'* 2009/08/10 000042     履歴番号000041の改修漏れによる不具合対応（比嘉）
'* 2010/04/16 000043     VS2008対応（比嘉）
'* 2011/11/09 000044     【AB17020】住基法改正対応（中嶋）
'* 2011/11/28 000045     【AB17020】住基法改正対応：生年月日不詳区分編集仕様変更（大澤）
'* 2011/12/05 000046     【AB17020】住基法改正対応：リンクNo列型変更（大澤）
'* 2011/12/26 000047     【AB17020】住基法改正対応：転居の時に付随が更新されない不具合の対応（中嶋）
'* 2012/01/05 000048     【AB17020】住基法改正対応：履歴修正時、キー重複となるエラー修正（中嶋）
'* 2012/04/06 000049     【AB17020】住基法改正対応：履歴修正（住登外を住登内の間に入れる）時、異常終了する不具合修正（中嶋）
'* 2014/06/25 000050     【AB21051】＜共通番号対応＞共通番号更新処理追加（石合）
'* 2014/07/08 000051     【AB21051】＜共通番号対応＞共通番号更新処理事由追加（石合）
'* 2014/09/10 000052     【AB21051】＜共通番号対応＞共通番号更新処理事由追加２（石合）
'* 2014/09/10 000053     【AB21080】＜共通番号対応＞中間サーバーＢＳ連携機能追加（石合）
'* 2014/12/26 000054     【AB21051】＜共通番号対応＞共通番号更新処理事由追加３（石合）
'* 2015/01/08 000055     【AB21080】＜共通番号対応＞中間サーバーＢＳ連携機能削除（石合）
'* 2015/01/28 000056     【AB21051】＜共通番号対応＞共通番号更新処理修正（石合）
'* 2015/02/17 000057     【AB21051】＜共通番号対応＞共通番号更新処理修正（石合）
'* 2015/10/14 000058     【AB21051】＜共通番号対応＞本付番処理レコードに対する特殊処理への考慮追加（石合）
'* 2018/01/04 000059     【AB25001】旧氏併記対応（石合）
'* 2022/12/16 000060     【AB-8010】住民コード世帯コード15桁対応(下村)
'* 2023/08/14 000061     【AB-0820-1】住登外管理項目追加(早崎)
'* 2023/12/07 000062     【AB-9000-1】住基更新連携標準化対応(下村)
'* 2024/02/06 000063     【AB-1580-1】転出住所自動更新対応(掛川)
'* 2024/03/07 000064     【AB-0900-1】アドレス・ベース・レジストリ対応(下村)
'* 2024/04/02 000065     【AB-6047-1】住基情報の異動に伴う他業務への各種情報提供のための連携(原)
'* 2024/06/10 000066     【AB-9902-1】不具合対応
'* 2024/06/18 000067     【AB-9903-1】不具合対応
'* 2024/07/05 000068     【AB-9907-1】氏名優先区分の対応
'* 2024/07/09 000069     【AB-9907-1】不具合対応　不詳生年月日DATEの編集
'************************************************************************************************
'* ☆☆宛名累積の取得は、スキーマーが取得出来るようになれば、スキーマー取得に変更する。(2003/06/05)

Option Strict On
Option Explicit On
Option Compare Binary

'**
'* 参照する名前空間
'* 
Imports Densan.FrameWork
Imports Densan.FrameWork.Tools
Imports Densan.Common
Imports System.Data
Imports System.Text
Imports Densan.WorkFlow.UWCommon
'* 履歴番号 000058 2015/10/14 追加開始
Imports Densan.Reams.UR.UR010BB
'* 履歴番号 000058 2015/10/14 追加終了
Imports System.Security
Imports Microsoft.SqlServer.Server

Public Class ABJukiKoshinBClass

    ' パラメータのメンバ変数
    Private m_cfLogClass As UFLogClass                      ' ログ出力クラス
    Private m_cfControlData As UFControlData                ' コントロールデータ
    Private m_cfConfigDataClass As UFConfigDataClass        ' コンフィグデータ
    Private m_cfRdbClass As UFRdbClass                      ' ＲＤＢクラス
    Private m_cfErrorClass As UFErrorClass                  ' エラー処理クラス
    Private m_cfDateClass As UFDateClass                    ' 日付クラス
    Private m_strGyosekuInit As String
    Private m_strChiku1Init As String
    Private m_strChiku2Init As String
    Private m_strChiku3Init As String
    Private m_strZokugara1Init As String
    Private m_strZokugara2Init As String
    Private m_cJutogaiB As ABJutogaiBClass                  ' 住登外ＤＡクラス
    Private m_cAtenaB As ABAtenaBClass                      ' 宛名マスタＤＡクラス
    Private m_cAtenaRirekiB As ABAtenaRirekiBClass          ' 宛名履歴ＤＡクラス
    Private m_cAtenaRuisekiB As ABAtenaRuisekiBClass        ' 宛名累積ＤＡクラス
    Private m_csAtenaEntity As DataSet                      ' 宛名Entity
    Private m_csAtenaRuisekiEntity As DataSet               ' 宛名累積Entity
    '*履歴番号 000003 2003/11/21 追加開始
    Private m_cAtenaNenkinB As ABAtenaNenkinBClass          ' 宛名年金ＤＡクラス
    Private m_cAtenaKokuhoB As ABAtenaKokuhoBClass          ' 宛名国保ＤＡクラス
    '*履歴番号 000003 2003/11/21 追加終了
    '*履歴番号 000004 2004/02/13 追加開始   000009 2005/02/28 削除開始
    ''''''Dim m_ABToshoProperty() As ABToshoProperty
    ''''''Dim m_intCnt As Integer
    '*履歴番号 000004 2004/02/13 追加開始   000009 2005/02/28 削除終了
    '*履歴番号 000009 2005/03/18 追加開始
    Private m_csAtenaKanriEntity As DataSet                      '宛名管理情報データセット
    Private m_strR3RenkeiFG As String                            'R3レプリカ連携フラグ
    Private m_strKoteiRenkeiFG As String                         '固定連携フラグ
    Private m_strGapeiDate As String = String.Empty              '合併日
    '*履歴番号 000027 2005/12/20 追加開始
    Private m_strBefGapeiDate As String = String.Empty           ' 合併日一日前
    Private m_strSystemDate As String = String.Empty             ' システム日付
    '*履歴番号 000027 2005/12/20 追加終了
    '*履歴番号 000016 2005/11/01 削除開始
    '* corresponds to VS2008 Start 2010/04/16 000043
    ''''Private m_blnGappei As Boolean = False                         '合併判定フラグ
    '* corresponds to VS2008 End 2010/04/16 000043
    '*履歴番号 000016 2005/11/01 削除終了
    Private m_cBAAtenaLinkageBClass As BAAtenaLinkageBClass      ' 固定資産税宛名クラス
    Private m_cBAAtenaLinkageIFXClass As BAAtenaLinkageIFXClass
    '*履歴番号 000009 2005/03/18 追加終了
    '*履歴番号 000016 2005/11/01 追加開始
    Private m_csReRirekiEntity As DataSet                        ' 全履歴データ退避用
    Private m_blnJutogaiAriFG As Boolean = False                 ' 履歴の中に住登外があるかどうかのフラグ
    Private m_csJutogaiRows() As DataRow                         ' 元のＤＢの住登外のＲＯＷＳ
    Private m_csFirstJutogaiRow As DataRow                       ' 元のＤＢの最初の住登外ＲＯＷ
    Private m_intRenbanCnt As Integer = 0                        ' 履歴編集で用いる連番用のカウント
    Private m_intJutogaiRowCnt As Integer = 0                    ' 元のＤＢに含まれる住登外ＲＯＷの件数
    Private m_intJutogaiInCnt As Integer = 0                     ' 住登外を追加した件数
    Private m_intJutogaiST_YMD As Integer                        ' 住登外ＲＯＷの開始年月日を代入する
    Private m_blnHenkanFG As Boolean = False                     ' 住登外を起こしたかどうかのフラグ
    '*履歴番号 000018 2005/11/27 削除開始
    'Private m_blnSaiTenyuFG As Boolean = False                   ' 再転入したかどうかのフラグ
    '*履歴番号 000018 2005/11/27 削除終了
    '*履歴番号 000016 2005/11/01 追加終了
    '*履歴番号 000021 2005/12/12 追加開始
    Private m_strTenshutsuGyoseikuCD As String                   ' 転出者の行政区ＣＤ
    '*履歴番号 000022 2005/12/15 削除開始
    'Private m_strTenshutsuGyoseikuMei As String                  ' 転出者の行政区名称
    'Private m_cuGyoseikuCDCashB As URGYOSEIKUCDMSTCacheBClass    ' 行政区コードマスタキャッシュＢ
    '*履歴番号 000022 2005/12/15 削除終了
    '*履歴番号 000021 2005/12/12 追加終了
    '*履歴番号 000038 2009/04/07 削除開始
    ''*履歴番号 000031 2007/01/30 追加開始
    'Private m_crBanchiCdMstB As URBANCHICDMSTBClass              ' UR番地コードマスタクラス
    ''*履歴番号 000031 2007/01/30 追加終了
    '*履歴番号 000038 2009/04/07 削除終了
    '*履歴番号 000034 2007/08/31 追加開始
    Private cuKanriJohoB As URKANRIJOHOCacheBClass               ' 管理情報Ｂクラス(キャッシュ対応版)
    '*履歴番号 000034 2007/08/31 追加終了
    '*履歴番号 000038 2009/04/07 追加開始
    Private m_cBanchiCDHenshuB As ABBanchiCDHenshuBClass         ' 番地コード編集Ｂクラス
    '*履歴番号 000038 2009/04/07 追加終了
    '*履歴番号 000039 2009/05/12 追加開始
    Protected m_blnBatch As Boolean = False                      ' バッチ区分(True:バッチ系,False:リアル系)
    Private m_cuKanriJohoB_Batch As URKANRIJOHOBClass            ' 管理情報Ｂクラス ※バッチ用
    Private m_cFrnHommyoKensakuType As FrnHommyoKensakuType
    '*履歴番号 000039 2009/05/12 追加終了
    '*履歴番号 000041 2009/06/18 追加開始
    Private m_blnRirekiShusei As Boolean = False                 ' 履歴修正データ削除判定フラグ
    '*履歴番号 000041 2009/06/18 追加終了
    '* 履歴番号 000044 2011/11/09 追加開始
    Private m_cAtenaRirekiFzyB As ABAtenaRirekiFZYBClass         ' 宛名履歴付随Bクラス
    Private m_cAtenaFzyB As ABAtenaFZYBClass                     ' 宛名付随Bクラス
    Private m_csReRirekiFzyEntity As DataSet                     ' 宛名履歴付随テーブルスキーマ
    Private m_csAtenaRuisekiFzyEntity As DataSet                 ' 宛名累積付随テーブルスキーマ
    '* 履歴番号 000044 2011/11/09 追加終了
    '* 履歴番号 000050 2014/06/25 追加開始
    Private m_cABMyNumberB As ABMyNumberBClass                  ' 共通番号ビジネスクラス
    Private m_cABMyNumberRuisekiB As ABMyNumberRuisekiBClass    ' 共通番号累積ビジネスクラス
    '* 履歴番号 000050 2014/06/25 追加終了
    Private m_cABAtenaHyojunB As ABAtena_HyojunBClass                      ' 宛名標準B
    Private m_cABAtenaFZYHyojunB As ABAtenaFZY_HyojunBClass                ' 宛名付随標準B
    Private m_cABAtenaRirekiHyojunB As ABAtenaRireki_HyojunBClass          ' 宛名履歴標準B
    Private m_cABAtenaRirekiFZYHyojunB As ABAtenaRirekiFZY_HyojunBClass    ' 宛名履歴付随標準B 
    Private m_cABAtenaRuisekiHyojunB As ABAtenaRuiseki_HyojunBClass        ' 宛名累積標準B
    Private m_cABatenaRuisekiFZYHyojunB As ABAtenaRuisekiFZY_HyojunBClass  ' 宛名累積付随標準B
    Private m_cuUsRuiji As USRuijiClass                                    ' 類字変換
    Private m_csAtenaRuisekiHyojunEntity As DataSet                        ' 宛名累積_標準Entity
    Private m_csAtenaRuisekiFZYHyojunEntity As DataSet                     ' 宛名累積付随_標準Entity
    Private m_cABBanchiEdabanSuchiB As ABBanchiEdabanSuchiBClass           ' 番地コード編集Ｂクラス
    Private m_csABMyNumberHyojunB As ABMyNumberHyojunBClass                ' 共通番号標準
    Private m_csAbMyNumberRuisekiHyojunB As ABMyNumberRuisekiHyojunBClass  ' 共通番号累積標準
    Private m_csReRirekiHyojunEntity As DataSet
    Private m_csRERirekiFZYHyojunEntity As DataSet
    '*履歴番号 000065 2024/04/02 追加開始
    Private m_cABKojinSeigyoB As ABKojinSeigyoBClass                       ' 宛名個人情報制御Ｂ
    Private m_cABKojinseigyoRirekiB As ABKojinseigyoRirekiBClass           ' 宛名個人情報制御履歴Ｂ
    Private m_strSeinenKoKenShokiMsg As String                             ' 成年後見人メッセージ
    '*履歴番号 000065 2024/04/02 追加終了

    ' コンスタント定義
    Private Const THIS_CLASS_NAME As String = "ABJukiKoshinBClass"              ' クラス名
    Private Const THIS_BUSINESSID As String = "AB"                              ' 業務コード
    '*履歴番号 000004 2004/02/14 追加開始   000009 2005/02/28 削除開始
    ''''''Private Const WORK_FLOW_NAME As String = "宛名異動"             ' ワークフロー名
    ''''''Private Const DATA_NAME As String = "宛名"                      'データ名
    '*履歴番号 000004 2004/02/14 追加終了   000009 2005/02/28 削除終了
    Private Const FUSHOPTN_FUSHO As String = "1"
    Private Const FUSHOPTN_NASHI As String = "0"
    '*履歴番号 000065 2024/04/02 追加開始
    Private Const ERR_MSG_KOJINSEIGYO As String = "個人制御情報"           ' エラーメッセージ_個人制御情報
    Private Const ERR_MSG_KOJINSEIGYORIREKI As String = "個人制御履歴情報" ' エラーメッセージ_個人制御履歴情報
    '*履歴番号 000065 2024/04/02 追加終了
    Private Const CNS_KURAN As String = "空欄"

    '* 履歴番号 000050 2014/06/25 追加開始
    Private Enum ABMyNumberType
        [New] = 0                   ' 共通番号
        Old                         ' 旧共通番号
    End Enum
    '* 履歴番号 000050 2014/06/25 追加終了

    '************************************************************************************************
    '* メソッド名      コンストラクタ
    '* 
    '* 構文           Public Sub New(ByVal cfControlData As UFControlData, 
    '* 　　                          ByVal cfConfigDataClass As UFConfigDataClass
    '* 　　                          ByVal csUFRdbClass As UFRdbClass)
    '* 
    '* 機能　　        初期化処理
    '* 
    '* 引数           cfControlData As UFControlData          : コントロールデータオブジェクト
    '* 　　           cfConfigDataClass as UFConfigDataClass  : コンフィグデータオブジェクト
    '* 　　           cfRdbClass as UFRdbClass                : データベースアクセス用オブジェクト
    '* 
    '* 戻り値          なし
    '************************************************************************************************
    Public Sub New(ByVal cfControlData As UFControlData,
                   ByVal cfConfigDataClass As UFConfigDataClass,
                   ByVal cfRdbClass As UFRdbClass)
        ' メンバ変数セット
        m_cfControlData = cfControlData
        m_cfConfigDataClass = cfConfigDataClass
        m_cfRdbClass = cfRdbClass

        ' ログ出力クラスのインスタンス化
        m_cfLogClass = New UFLogClass(cfConfigDataClass, cfControlData.m_strBusinessId)

        ' パラメータのメンバ変数初期化
        m_strGyosekuInit = String.Empty
        m_strChiku1Init = String.Empty
        m_strChiku2Init = String.Empty
        m_strChiku3Init = String.Empty
        m_strZokugara1Init = String.Empty
        m_strZokugara2Init = String.Empty
        '*履歴番号 000021 2005/12/12 追加開始
        m_strTenshutsuGyoseikuCD = String.Empty
        '*履歴番号 000022 2005/12/15 削除開始
        'm_strTenshutsuGyoseikuMei = String.Empty
        '*履歴番号 000022 2005/12/15 削除終了
        '*履歴番号 000021 2005/12/12 追加終了

    End Sub

#Region "データセット作成"
    '************************************************************************************************
    '* メソッド名     データセット作成
    '* 
    '* 構文           Public Function DataSetSakusei() As DataSet
    '* 
    '* 機能 　    　　住基データセットを作成する
    '* 
    '* 引数           無し
    '* 
    '* 戻り値         DataSet(ABJukiDataEntity) : 住基データセット
    '************************************************************************************************
    Public Function DataSetSakusei() As DataSet
        Const THIS_METHOD_NAME As String = "DataSetSakusei"
        Dim csJukiDataEntity As DataSet                     ' データセット
        Dim csJukiDataTable As DataTable                    ' テーブル
        Dim csJukiDataColumn As DataColumn                  ' カラム
        Dim csJukiPrimaryKey(1) As DataColumn               ' 主キー

        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            ' 住基データEntityのインスタンス作成
            csJukiDataEntity = New DataSet()

            ' 住基データテーブルの作成
            csJukiDataTable = csJukiDataEntity.Tables.Add(ABJukiData.TABLE_NAME)

            ' カラム定義の作成
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUMINCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 15
            csJukiDataColumn.AllowDBNull = False
            csJukiPrimaryKey(0) = csJukiDataColumn
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHICHOSONCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 6
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KYUSHICHOSONCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 6
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUMINHYOSHICHOSONCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 6
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.RIREKINO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 6
            csJukiDataColumn.AllowDBNull = False
            csJukiPrimaryKey(1) = csJukiDataColumn
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.RRKST_YMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.RRKED_YMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.STAICD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 15
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEIRINO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 12
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUMINSHU, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANAMEISHO1, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120        '80
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANJIMEISHO1, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120        '40
            csJukiDataColumn.MaxLength = 480        '40
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANAMEISHO2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120        '80
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANJIMEISHO2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480        '40
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KYUSEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 60         '15
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANASEIMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120        '60
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANJIMEISHO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480        '40
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANASEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 72         '24
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANAMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 48         '16
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.UMAREYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.UMAREWMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEIBETSUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEIBETSU, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 1
            csJukiDataColumn.MaxLength = 10
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEIKINO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUMINHYOHYOJIJUN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZOKUGARACD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZOKUGARA, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 40         '15
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HYOJIJUN2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZOKUGARACD2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZOKUGARA2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 40         '15
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.STAINUSJUMINCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 15
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANJISTAINUSMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480        '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANASTAINUSMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120        '40
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.STAINUSJUMINCD2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 15
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANJISTAINUSMEI2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480        '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANASTAINUSMEI2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120        '40
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIYUBINNO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIJUSHOCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIJUSHO, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '30
            csJukiDataColumn.MaxLength = 200         '30
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIBANCHICD1, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 5
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIBANCHICD2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 5
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIBANCHICD3, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 5
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIBANCHI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '20
            csJukiDataColumn.MaxLength = 200         '20
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIKATAGAKIFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIKATAGAKICD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 20
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIKATAGAKI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1200        '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.RENRAKUSAKI1, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 14
            csJukiDataColumn.MaxLength = 15
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.RENRAKUSAKI2, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 14
            csJukiDataColumn.MaxLength = 15
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KJNRENRAKUSAKI1, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 14
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KJNRENRAKUSAKI2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 14
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HON_ZJUSHOCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 13
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HON_JUSHO, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '30
            csJukiDataColumn.MaxLength = 200         '30
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HON_BANCHI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '20
            csJukiDataColumn.MaxLength = 200         '20
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HITTOSHA, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480        '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.CKINIDOYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.CKINJIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.CKINJIYU, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 10
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.CKINTDKDYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.CKINTDKDTUCIKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOROKUIDOYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOROKUIDOWMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOROKUJIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOROKUJIYU, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 10
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOROKUTDKDYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOROKUTDKDWMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOROKUTDKDTUCIKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUTEIIDOYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUTEIIDOWMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUTEIJIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUTEIJIYU, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 10
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUTEITDKDYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUTEITDKDWMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUTEITDKDTUCIKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHOJOIDOYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHOJOJIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHOJOJIYU, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 10
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHOJOTDKDYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHOJOTDKDTUCIKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIIDOYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTIIDOYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTITUCIYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUNYURIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUNYURIYU, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_YUBINNO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_ZJUSHOCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 13
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_JUSHO, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '30
            csJukiDataColumn.MaxLength = 200         '30
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_BANCHI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '20
            csJukiDataColumn.MaxLength = 200         '20
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_KATAGAKI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1200        '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_STAINUSMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480        '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_MITDKFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIYUBINNO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIZJUSHOCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 13
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIJUSHO, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '30
            csJukiDataColumn.MaxLength = 200         '30
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIBANCHI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '20
            csJukiDataColumn.MaxLength = 200         '20
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIKATAGAKI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1200         '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEISTAINUSMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480        '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTIYUBINNO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTIZJUSHOCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 13
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTIJUSHO, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '30
            csJukiDataColumn.MaxLength = 200         '30
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTIBANCHI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50         '20
            csJukiDataColumn.MaxLength = 200         '20
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTIKATAGAKI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1200         '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTISTAINUSMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480        '30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTIMITDKFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.BIKOYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.BIKO, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 50
            csJukiDataColumn.MaxLength = 200
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.BIKOTENSHUTSUKKTIJUSHOFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.UTSUSHIKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HANNO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 5       '2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KAISEIATOFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KAISEIMAEFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KAISEIYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIGYOSEIKUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 9
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIGYOSEIKUMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKICHIKUCD1, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKICHIKUMEI1, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKICHIKUCD2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKICHIKUMEI2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKICHIKUCD3, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKICHIKUMEI3, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOHYOKUCD, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 4
            csJukiDataColumn.MaxLength = 5
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHOGAKKOKUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 4
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.CHUGAKKOKUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 4
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HOGOSHAJUMINCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 15
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANJIHOGOSHAMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120        '30
            csJukiDataColumn.MaxLength = 480        '30
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANAHOGOSHAMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120        '40
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KIKAYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KARIIDOKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHORITEISHIKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHORIYOKUSHIKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KOKUSEKICD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 3
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KOKUSEKI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 20
            csJukiDataColumn.MaxLength = 100
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYUSKAKCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 3
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYUSKAK, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 15
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYUKIKAN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 4
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYU_ST_YMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYU_ED_YMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HANYOCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            '*履歴番号 000016 2005/11/01 追加開始
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHORIJIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            '*履歴番号 000016 2005/11/01 追加終了
            '*履歴番号 000036 2007/09/28 追加開始
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHIMEIRIYOKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            '*履歴番号 000036 2007/09/28 追加終了
            '* 履歴番号 000044 2011/11/09 追加開始
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TABLEINSERTKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            '* 履歴番号 000045 2011/12/05 追加開始
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.LINKNO, System.Type.GetType("System.Decimal"))
            'csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.LINKNO, System.Type.GetType("System.String"))
            'csJukiDataColumn.MaxLength = 6
            '* 履歴番号 000045 2011/12/05 追加終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUMINHYOJOTAIKBN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKYOCHITODOKEFLG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HONGOKUMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANAHONGOKUMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANJIHEIKIMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANAHEIKIMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANJITSUSHOMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KANATSUSHOMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KATAKANAHEIKIMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.UMAREFUSHOKBN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TSUSHOMEITOUROKUYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYUKIKANCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYUKIKANMEISHO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 10
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYUSHACD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYUSHAMEISHO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 20
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYUCARDNO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 12
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KOFUYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KOFUYOTEISTYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KOFUYOTEIEDYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKITAISHOSHASHOJOIDOYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKITAISHOSHASHOJOJIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKITAISHOSHASHOJOJIYU, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 10
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKITAISHOSHASHOJOTDKDYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKITAISHOSHASHOJOTDKDTUCIKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FRNSTAINUSMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FRNSTAINUSKANAMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.STAINUSHEIKIMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.STAINUSKANAHEIKIMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.STAINUSTSUSHOMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.STAINUSKANATSUSHOMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_STAINUSMEI_KYOTSU, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_STAINUSHEIKIMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_STAINUSTSUSHOMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEISTAINUSMEI_KYOTSU, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEISTAINUSHEIKIMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEISTAINUSTSUSHOMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTISTAINUSMEI_KYOTSU, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTISTAINUSHEIKIMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTISTAINUSTSUSHOMEI, System.Type.GetType("System.String"))
            '*履歴番号 000061 2023/08/14 修正開始
            'csJukiDataColumn.MaxLength = 120
            csJukiDataColumn.MaxLength = 480
            '*履歴番号 000061 2023/08/14 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FRNRESERVE1, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 50
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FRNRESERVE2, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 50
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FRNRESERVE3, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 50
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FRNRESERVE4, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 50
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FRNRESERVE5, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 50
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIRESERVE1, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 50
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIRESERVE2, System.Type.GetType("System.String"))
            '* 履歴番号 000059 2018/01/04 修正開始
            'csJukiDataColumn.MaxLength = 50
            csJukiDataColumn.MaxLength = 80
            '* 履歴番号 000059 2018/01/04 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIRESERVE3, System.Type.GetType("System.String"))
            '* 履歴番号 000059 2018/01/04 修正開始
            'csJukiDataColumn.MaxLength = 50
            csJukiDataColumn.MaxLength = 20
            '* 履歴番号 000059 2018/01/04 修正終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIRESERVE4, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 50
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKIRESERVE5, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 50
            '* 履歴番号 000044 2011/11/09 追加終了
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.EDANO, System.Type.GetType("System.Decimal"))
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHIMEIKANAKAKUNINFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FUSHOUMAREBI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 72
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JIJITSUSTAINUSMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHIKUCHOSONCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 6
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.MACHIAZACD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TODOFUKEN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 16
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHIKUGUNCHOSON, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 48
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.MACHIAZA, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHJUSHO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 200
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKATAGAKI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1200
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.BANCHIEDABANSUCHI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 20
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HON_SHIKUCHOSONCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 6
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HON_MACHIAZACD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HON_TODOFUKEN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 16
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HON_SHIKUGUNCHOSON, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 48
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HON_MACHIAZA, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.CKINIDOWMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FUSHOCKINIDOBI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 72
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HYOJUNKISAIJIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KISAIYMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 8
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HYOJUNSHOJOJIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHOJOIDOWMD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FUSHOSHOJOIDOBI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 72
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_SHIKUCHOSONCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 6
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_MACHIAZACD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_TODOFUKEN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 16
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_SHIKUCHOSON, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 48
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_MACHIAZA, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_KOKUSEKICD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 3
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_KOKUSEKI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 200
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENUMAEJ_KOKUGAIJUSHO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 300
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEISHIKUCHOSONCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 6
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIMACHIAZACD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEITODOFUKEN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 16
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEISHIKUCHOSON, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 48
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIMACHIAZA, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIKOKUSEKICD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 3
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIKOKUSEKI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 200
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUYOTEIKOKUGAIJUSHO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 300
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTISHIKUCHOSONCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 6
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTIMACHIAZACD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 7
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTITODOFUKEN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 16
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTISHIKUCHOSON, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 48
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TENSHUTSUKKTIMACHIAZA, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOKUBETSUYOSHIKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.IDOKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.NYURYOKUBASHOCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 4
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.NYURYOKUBASHO, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 30
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANJIKYUUJI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 80
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANAKYUUJI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 20
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.KYUUJIKANAKAKUNINFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TDKDSHIMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HYOJUNIDOJIYUCD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 2
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FUSHOUMAREBIDATE, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 10
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FUSHOCKINIDOBIDATE, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 10
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.FUSHOSHOJOIDOBIDATE, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 10
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHFRNMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANAFRNMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHTSUSHOMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANATSUSHOMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TSUSHOKANAKAKUNINFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SHIMEIYUSENKB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANJIHEIKIMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 480
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.SEARCHKANAHEIKIMEI, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 120
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.ZAIRYUCARDNOKBN, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.JUKYOCHIHOSEICD, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.HODAI30JO46MATAHA47KB, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1
            csJukiDataColumn = csJukiDataTable.Columns.Add(ABJukiData.TOGOATENAFG, System.Type.GetType("System.String"))
            csJukiDataColumn.MaxLength = 1


            csJukiDataTable.PrimaryKey = csJukiPrimaryKey   ' 主キー

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try

        Return csJukiDataEntity

    End Function

#End Region

    '************************************************************************************************
    '* メソッド名     住基データ更新
    '* 
    '* 構文           Public Sub JukiDataKoshin(ByVal csJukiDataEntity As DataSet)
    '* 
    '* 機能 　    　　住基データの更新処理を行なう
    '* 
    '* 引数           DataSet(csJukiDataEntity) : 住基データセット
    '* 
    '* 戻り値         なし
    '************************************************************************************************
    <SecuritySafeCritical>
    Public Sub JukiDataKoshin(ByVal csJukiDataEntity As DataSet)
        Const THIS_METHOD_NAME As String = "JukiDataKoshin"
        Dim cAtenaKanriJohoB As ABAtenaKanriJohoBClass      '宛名管理情報ＤＡビジネスクラス
        '*履歴番号 000009 2005/03/18 削除開始
        ''''''Dim csAtenaKanriEntity As DataSet                   '宛名管理情報データセット
        '*履歴番号 000009 2005/03/18 削除終了
        'Dim csAtenaRirekiEntity As DataSet                  '宛名履歴データセット
        Dim csAtenaKanriRow As DataRow                      '宛名管理情報データRow
        Dim csJukiDataRow As DataRow                        '住基データRow
        '*履歴番号 000004 2004/02/13 追加開始
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csDataRow As DataRow                            ' ＤａｔａＲｏｗ
        '* corresponds to VS2008 End 2010/04/16 000043
        '''''Dim cABAtenaCnvBClass As ABAtenaCnvBClass
        'Dim objErrorStruct As UFErrorStruct                 ' エラー定義構造体
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim cfErrorClass As UFErrorClass                    'エラー処理クラス
        '* corresponds to VS2008 End 2010/04/16 000043
        'Dim cSearchKey As ABAtenaSearchKey                  ' 宛名検索キー
        ''''''Dim blnGappei As Boolean = False
        '*履歴番号 000016 2005/11/01 削除開始
        '* corresponds to VS2008 Start 2010/04/16 000043
        ''''Dim strsvjumincd As String
        ''''Dim strSystemDate As String                         'システム日付
        '* corresponds to VS2008 End 2010/04/16 000043
        '*履歴番号 000016 2005/11/01 削除開始
        '*履歴番号 000004 2004/02/13 追加終了
        '*履歴番号 000016 2005/11/18 追加開始
        'Dim intDelCnt As Integer
        'Dim intAllCnt As Integer
        '*履歴番号 000016 2005/11/18 追加終了
        '*履歴番号 000017 2005/11/22 追加開始
        Dim strBreakJuminCD() As String = {String.Empty, String.Empty}
        '*履歴番号 000017 2005/11/22 追加終了
        '*履歴番号 000019 2005/12/02 追加開始
        Dim csJukiDataRows() As DataRow
        '*履歴番号 000019 2005/12/02 追加終了
        '*履歴番号 000021 2005/12/12 追加開始 000022 2005/12/15 削除開始
        'Dim csGyoseikuCDMstEntity As DataSet
        '*履歴番号 000021 2005/12/12 追加終了 000022 2005/12/15 削除終了
        '*履歴番号 000027 2005/12/20 追加開始
        'Dim csJukiCkinDataRows() As DataRow                 ' 住基データの直近ロウ
        'Dim strJukiCkinST_YMD As String                     ' 住基データの直近ロウの開始年月日
        '*履歴番号 000027 2005/12/20 追加終了
        '* 履歴番号 000044 2011/11/09 追加開始
        'Dim csAtenaRirekiFzyEntity As DataSet               ' 宛名履歴付随
        '* 履歴番号 000044 2011/11/09 追加終了
        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)


            '---------------------------------------------------------------------------------------
            ' 1. 管理情報の取得
            '---------------------------------------------------------------------------------------

            '*履歴番号 000009 2005/03/18 修正開始
            '管理情報ﾃﾞｰﾀｾｯﾄが無い場合は取得する
            If m_csAtenaKanriEntity Is Nothing Then

                ' 日付クラスのインスタンス化
                m_cfDateClass = New UFDateClass(m_cfConfigDataClass)
                '*履歴番号 000027 2005/12/20 追加開始
                m_cfDateClass.p_enDateSeparator = UFDateSeparator.None
                m_cfDateClass.p_enEraType = UFEraType.Number
                '*履歴番号 000027 2005/12/20 追加終了
                ' 住登外ＤＡクラスのインスタンス作成
                m_cJutogaiB = New ABJutogaiBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 宛名マスタＤＡクラスのインスタンス作成
                m_cAtenaB = New ABAtenaBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 宛名履歴ＤＡクラスのインスタンス作成
                m_cAtenaRirekiB = New ABAtenaRirekiBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 宛名累積ＤＡクラスのインスタンス作成
                m_cAtenaRuisekiB = New ABAtenaRuisekiBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                '* 履歴番号 000044 2011/11/09 追加開始
                ' 宛名履歴付随ＤＡクラスのインスタンス作成
                m_cAtenaRirekiFzyB = New ABAtenaRirekiFZYBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 宛名付随ＤＡクラスのインスタンス作成
                m_cAtenaFzyB = New ABAtenaFZYBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                '* 履歴番号 000044 2011/11/09 追加終了
                '* 履歴番号 000050 2014/06/25 追加開始
                ' 共通番号ビジネスクラスのインスタンス化
                m_cABMyNumberB = New ABMyNumberBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 共通番号累積ビジネスクラスのインスタンス化
                m_cABMyNumberRuisekiB = New ABMyNumberRuisekiBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                '* 履歴番号 000050 2014/06/25 追加終了

                '*履歴番号 000003 2003/11/21 追加開始
                ' 宛名年金ＤＡクラスのインスタンス作成
                If (m_cAtenaNenkinB Is Nothing) Then
                    m_cAtenaNenkinB = New ABAtenaNenkinBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                End If

                ' 宛名国保ＤＡクラスのインスタンス作成
                If (m_cAtenaKokuhoB Is Nothing) Then
                    m_cAtenaKokuhoB = New ABAtenaKokuhoBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                End If
                '*履歴番号 000003 2003/11/21 追加終了

                '*履歴番号 000039 2009/05/12 修正開始
                If (m_blnBatch = True) Then
                    ' ＵＲ管理情報Ｂクラスをインスタンス化
                    If (m_cuKanriJohoB_Batch Is Nothing) Then
                        m_cuKanriJohoB_Batch = New URKANRIJOHOBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                    Else
                    End If
                    ' 外国人本名検索パラメータ
                    m_cFrnHommyoKensakuType = m_cuKanriJohoB_Batch.GetFrn_HommyoKensaku_Param
                Else
                    ' ＵＲ管理情報Ｂキャッシュクラスをインスタンス化
                    If (cuKanriJohoB Is Nothing) Then
                        cuKanriJohoB = New URKANRIJOHOCacheBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                    Else
                    End If
                    ' 外国人本名検索パラメータ
                    m_cFrnHommyoKensakuType = cuKanriJohoB.GetFrn_HommyoKensaku_Param
                End If

                ''*履歴番号 000034 2007/08/31 追加開始
                '' ＵＲ管理情報Ｂクラスのインスタンス化
                'If (cuKanriJohoB Is Nothing) Then
                '    cuKanriJohoB = New URKANRIJOHOCacheBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                'End If
                ''*履歴番号 000034 2007/08/31 追加終了
                '*履歴番号 000039 2009/05/12 修正終了

                '**
                '* 管理情報の取得
                '*
                ' 宛名管理情報ＤＡビジネスクラスのインスタンス作成
                cAtenaKanriJohoB = New ABAtenaKanriJohoBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)

                ' 宛名管理情報抽出（全件）メソッド実行
                m_csAtenaKanriEntity = cAtenaKanriJohoB.GetKanriJohoHoshu()

                For Each csAtenaKanriRow In m_csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows
                    '種別キー
                    Select Case csAtenaKanriRow(ABAtenaKanriJohoEntity.SHUKEY).ToString
                        Case "01"   '異動処理
                            '識別キー
                            Select Case csAtenaKanriRow(ABAtenaKanriJohoEntity.SHIKIBETSUKEY).ToString
                                Case "06"   '行政区初期化
                                    m_strGyosekuInit = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
                                Case "07"   '地区１
                                    m_strChiku1Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
                                Case "08"   '地区２
                                    m_strChiku2Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
                                Case "09"   '地区３
                                    m_strChiku3Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
                                Case "10"   '続柄１初期化
                                    m_strZokugara1Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
                                Case "11"   '続柄２初期化
                                    m_strZokugara2Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
                            End Select
                        Case "04"   'データ連動制御
                            '識別キー
                            Select Case csAtenaKanriRow(ABAtenaKanriJohoEntity.SHIKIBETSUKEY).ToString
                                Case "01"   '宛名レプリカ連携ワークフロー
                                    m_strR3RenkeiFG = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
                                Case "12"   '固定連動
                                    m_strKoteiRenkeiFG = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
                            End Select
                        Case "05"   '合併関連
                            '識別キー
                            Select Case csAtenaKanriRow(ABAtenaKanriJohoEntity.SHIKIBETSUKEY).ToString
                                Case "01"   '合併日
                                    m_strGapeiDate = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
                                    '*履歴番号 000027 2005/12/20 追加開始
                                    ' 合併日の一日前を取得
                                    If m_strGapeiDate <> String.Empty Then
                                        m_cfDateClass.p_strDateValue = m_strGapeiDate
                                        m_strBefGapeiDate = m_cfDateClass.AddDay(-1)
                                    End If
                                    ' システム日付を取得する
                                    m_strSystemDate = m_cfRdbClass.GetSystemDate().ToString("yyyyMMdd")
                                    '*履歴番号 000027 2005/12/20 追加終了
                            End Select
                            '*履歴番号 000021 2005/12/12 追加開始
                        Case "10"   '独自処理
                            Select Case csAtenaKanriRow(ABAtenaKanriJohoEntity.SHIKIBETSUKEY).ToString
                                Case "03"   '転出者行政区ＣＤ
                                    m_strTenshutsuGyoseikuCD = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String)
                                    '*履歴番号 000022 2005/12/15 削除開始
                                    'If m_strTenshutsuGyoseikuCD.Trim <> String.Empty Then
                                    '    ' 行政区コードマスタキャッシュＢクラスのインスタンス作成
                                    '    m_cuGyoseikuCDCashB = New URGYOSEIKUCDMSTCacheBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                                    '    ' キャッシュの内容が最新かチェック
                                    '    m_cuGyoseikuCDCashB.NewestCacheCheck()
                                    '    ' 転出者用の行政区ＣＤで行政区名称を取得する
                                    '    csGyoseikuCDMstEntity = m_cuGyoseikuCDCashB.GetGYOSEIKUCDMST(m_strTenshutsuGyoseikuCD.PadLeft(9, " "c))
                                    '    m_strTenshutsuGyoseikuMei = CType(csGyoseikuCDMstEntity.Tables(URGYOSEIKUCDMSTData.TABLE_NAME).Rows(0)(URGYOSEIKUCDMSTData.GYOSEIKUMEI), String)
                                    'End If
                                    '*履歴番号 000022 2005/12/15 削除開始
                            End Select
                            '*履歴番号 000021 2005/12/12 追加終了

                        '*履歴番号 000065 2024/04/02 追加開始
                        Case "20"   '個人情報制御機能
                            Select Case csAtenaKanriRow(ABAtenaKanriJohoEntity.SHIKIBETSUKEY).ToString
                                Case "08"   '成年後見人初期メッセージ
                                    m_strSeinenKoKenShokiMsg = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim

                            End Select
                        '*履歴番号 000065 2024/04/02 追加終了
                    End Select
                Next csAtenaKanriRow

                ' ☆☆宛名累積のスキーマーを取得する。(GetTableSchemaがトランザクション中取得できない)
                m_csAtenaRuisekiEntity = m_cfRdbClass.GetTableSchema(ABAtenaRuisekiEntity.TABLE_NAME)

                '* 履歴番号 000044 2011/11/09 追加開始
                '宛名累積付随テーブルのスキーマを保持
                m_csAtenaRuisekiFzyEntity = m_cfRdbClass.GetTableSchema(ABAtenaRuisekiFZYEntity.TABLE_NAME)
                '* 履歴番号 000044 2011/11/09 追加終了

                '* corresponds to VS2008 Start 2010/04/16 000043
                '*履歴番号 000016 2005/11/01 削除開始
                '現在日時を取得する
                ''''strSystemDate = m_cfRdbClass.GetSystemDate().ToString("yyyyMMdd")

                ''''合併年月日が管理情報に存在し、合併年月日があり、かつ合併年月日以前の更新の場合は合併年月日を格納する
                ''''If Not m_strGapeiDate Is Nothing AndAlso m_strGapeiDate > strSystemDate Then
                ''''    m_blnGappei = True
                ''''End If
                '*履歴番号 000016 2005/11/01 削除終了
                '* corresponds to VS2008 End 2010/04/16 000043

                ' 宛名標準ＤＡクラスのインスタンス作成
                m_cABAtenaHyojunB = New ABAtena_HyojunBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 宛名付随標準ＤＡクラスのインスタンス作成
                m_cABAtenaFZYHyojunB = New ABAtenaFZY_HyojunBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 宛名履歴標準ＤＡクラスのインスタンス作成
                m_cABAtenaRirekiHyojunB = New ABAtenaRireki_HyojunBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 宛名履歴付随標準ＤＡクラスのインスタンス作成
                m_cABAtenaRirekiFZYHyojunB = New ABAtenaRirekiFZY_HyojunBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 宛名累積標準ＤＡクラスのインスタンス作成
                m_cABAtenaRuisekiHyojunB = New ABAtenaRuiseki_HyojunBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' 宛名累積付随標準ＤＡクラスのインスタンス作成
                m_cABatenaRuisekiFZYHyojunB = New ABAtenaRuisekiFZY_HyojunBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                '類字クラス
                m_cuUsRuiji = New USRuijiClass
                '番地コード編集Ｂクラス
                m_cABBanchiEdabanSuchiB = New ABBanchiEdabanSuchiBClass(m_cfControlData, m_cfConfigDataClass)
                '宛名累積標準テーブルのスキーマを保持
                m_csAtenaRuisekiHyojunEntity = m_cfRdbClass.GetTableSchema(ABAtenaRuisekiHyojunEntity.TABLE_NAME)
                '宛名累積付随標準テーブルのスキーマを保持
                m_csAtenaRuisekiFZYHyojunEntity = m_cfRdbClass.GetTableSchema(ABAtenaRuisekiFZYHyojunEntity.TABLE_NAME)
                '共通番号標準
                m_csABMyNumberHyojunB = New ABMyNumberHyojunBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                '共通番号累積標準
                m_csAbMyNumberRuisekiHyojunB = New ABMyNumberRuisekiHyojunBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                '*履歴番号 000065 2024/04/02 追加開始
                '宛名個人情報制御Ｂ
                m_cABKojinSeigyoB = New ABKojinSeigyoBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                '宛名個人情報制御履歴Ｂ
                m_cABKojinseigyoRirekiB = New ABKojinseigyoRirekiBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                '*履歴番号 000065 2024/04/02 追加終了
            End If
            ''''''''' 宛名管理情報ＤＡビジネスクラスのインスタンス作成
            ''''''''cAtenaKanriJohoB = New ABAtenaKanriJohoBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)

            ''''''''' 宛名管理情報抽出（全件）メソッド実行
            ''''''''csAtenaKanriEntity = cAtenaKanriJohoB.GetKanriJohoHoshu()

            ''''''''For Each csAtenaKanriRow In csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows
            ''''''''    '種別キー
            ''''''''    Select Case csAtenaKanriRow(ABAtenaKanriJohoEntity.SHUKEY).ToString
            ''''''''        Case "01"   '異動処理
            ''''''''            '識別キー
            ''''''''            Select Case csAtenaKanriRow(ABAtenaKanriJohoEntity.SHIKIBETSUKEY).ToString
            ''''''''                Case "06"   '行政区初期化
            ''''''''                    m_strGyosekuInit = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
            ''''''''                Case "07"   '地区１
            ''''''''                    m_strChiku1Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
            ''''''''                Case "08"   '地区２
            ''''''''                    m_strChiku2Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
            ''''''''                Case "09"   '地区３
            ''''''''                    m_strChiku3Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
            ''''''''                Case "10"   '続柄１初期化
            ''''''''                    m_strZokugara1Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
            ''''''''                Case "11"   '続柄２初期化
            ''''''''                    m_strZokugara2Init = CType(csAtenaKanriRow(ABAtenaKanriJohoEntity.PARAMETER), String).Trim
            ''''''''            End Select
            ''''''''    End Select
            ''''''''Next csAtenaKanriRow

            ''''''' ☆☆宛名累積のスキーマーを取得する。(GetTableSchemaがトランザクション中取得できない)
            ''''''m_csAtenaRuisekiEntity = m_cfRdbClass.GetTableSchema(ABAtenaRuisekiEntity.TABLE_NAME)
            ' ☆☆宛名累積マスタを取得する(上記の代替対策)
            'm_csAtenaRuisekiEntity = m_cAtenaRuisekiB.GetAtenaRuiseki("000000000000", "1")
            '*履歴番号 000009 2005/03/18 修正終了

            '*履歴番号 000004 2004/02/13 追加開始   000009 2005/02/28 削除開始
            ''''''''m_ABToshoPropertyのカウンタの初期値を"0"に設定
            '''''''m_intCnt = 0
            ''''''''m_ABToshoPropertyの配列数を定義
            '''''''ReDim m_ABToshoProperty(csJukiDataEntity.Tables(ABJukiData.TABLE_NAME).Rows.Count - 1)
            '*履歴番号 000004 2004/02/13 追加終了   000009 2005/02/28 削除終了

            '*履歴番号 000006 2004/08/27 修正開始
            '''''''csAtenaKanriEntity = cAtenaKanriJohoB.GetKanriJohoHoshu("05", "01")
            '''''''strSystemDate = m_cfRdbClass.GetSystemDate().ToString("yyyyMMdd")
            ''''''''合併年月日が管理情報に存在し、合併年月日があり、かつ合併年月日以前の更新の場合は合併年月日を格納する
            '''''''If Not (csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows.Count = 0) AndAlso _
            '''''''   CStr(csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows(0).Item(ABAtenaKanriJohoEntity.PARAMETER)) > strSystemDate Then
            '''''''    blnGappei = True
            '''''''End If

            '*履歴番号 000016 2005/11/01 修正開始
            '* コメント***********************************************************************
            '* 【追いかけ期間・猶予期間・通常期間】や【異動事由】によって判断するのではなく、*
            '* 【直近のみの連携】か【履歴全件の連携】なのかだけを判断して宛名側に反映する。  *
            '*********************************************************************************
            '* corresponds to VS2008 Start 2010/04/16 000043
            ''''If m_blnGappei Then
            ''''    strsvjumincd = String.Empty
            ''''    For Each csJukiDataRow In csJukiDataEntity.Tables(ABJukiData.TABLE_NAME).Rows
            ''''        If CType(csJukiDataRow(ABJukiData.JUMINCD), String) <> strsvjumincd And _
            ''''           (Not ((CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "03") Or _
            ''''             (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "04") Or _
            ''''             (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "08") Or _
            ''''             (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "45") Or _
            ''''             (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "63"))) And _
            ''''             (CType(csJukiDataRow(ABJukiData.RIREKINO), Integer) = 1) Then
            ''''            strsvjumincd = CType(csJukiDataRow(ABJukiData.JUMINCD), String)
            ''''            cSearchKey = New ABAtenaSearchKey()
            ''''            cSearchKey.p_strJuminCD = strsvjumincd
            ''''            cSearchKey.p_strJuminYuseniKB = "1"
            ''''            'cSearchKey.p_strStaiCD = CType(csJukiDataRow(ABJukiData.STAICD), String)
            ''''            csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(999, cSearchKey, "", True)
            ''''            If (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count > 0) Then
            ''''                For Each csDataRow In csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows
            ''''                    m_cAtenaRirekiB.DeleteAtenaRB(csDataRow, "D")
            ''''                Next csDataRow
            ''''            End If
            ''''        End If
            ''''    Next csJukiDataRow
            ''''End If
            ''''' データ分繰り返す
            ''''For Each csJukiDataRow In csJukiDataEntity.Tables(ABJukiData.TABLE_NAME).Rows
            ''''    'If Not (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "08") And _
            ''''    If CType(csJukiDataRow(ABJukiData.RRKED_YMD), String) = "99999999" Then

            ''''        Me.JukiDataKoshin01(csJukiDataRow)

            ''''    ElseIf m_blnGappei And _
            ''''    Not ((CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "08") Or _
            ''''           (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "03") Or _
            ''''             (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "04") Or _
            ''''             (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "45") Or _
            ''''           (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "63")) Then

            ''''        Me.JukiDataKoshin08(csJukiDataRow)

            ''''    End If
            ''''Next csJukiDataRow
            '* corresponds to VS2008 End 2010/04/16 000043

            '---------------------------------------------------------------------------------------
            ' 2. 住基データを住民コード、履歴番号の昇順に並び替える
            '---------------------------------------------------------------------------------------

            '*履歴番号 000019 2005/12/02 追加開始
            csJukiDataRows = csJukiDataEntity.Tables(ABJukiData.TABLE_NAME).Select("", ABJukiData.JUMINCD + " ASC , " + ABJukiData.RIREKINO + " ASC")
            '*履歴番号 000019 2005/12/02 追加終了

            '*履歴番号 000038 2009/04/07 削除開始
            ''*履歴番号 000031 2007/01/30 追加開始
            '' UR番地コードマスタクラスのインスタンス生成
            ''*履歴番号 000035 2007/09/05 修正開始
            'If (m_crBanchiCdMstB Is Nothing) Then
            '    m_crBanchiCdMstB = New URBANCHICDMSTBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
            'End If
            ''m_crBanchiCdMstB = New URBANCHICDMSTBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
            ''*履歴番号 000035 2007/09/05 修正終了
            ''*履歴番号 000031 2007/01/30 追加終了
            '*履歴番号 000038 2009/04/07 削除終了

            '*履歴番号 000038 2009/04/07 追加開始
            ' 番地コード編集クラスのインスタンス生成
            If (m_cBanchiCDHenshuB Is Nothing) Then
                m_cBanchiCDHenshuB = New ABBanchiCDHenshuBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
            End If
            '*履歴番号 000038 2009/04/07 追加終了

            '---------------------------------------------------------------------------------------
            ' 3. 住基データが無くなるまで更新する
            '---------------------------------------------------------------------------------------

            '*履歴番号 000017 2005/11/22 修正開始
            '*履歴番号 000019 2005/12/02 修正開始
            '* corresponds to VS2008 Start 2010/04/16 000043
            ''''For Each csJukiDataRow In csJukiDataEntity.Tables(ABJukiData.TABLE_NAME).Rows
            '* corresponds to VS2008 End 2010/04/16 000043
            For Each csJukiDataRow In csJukiDataRows
                '*履歴番号 000019 2005/12/02 修正終了

                strBreakJuminCD(0) = strBreakJuminCD(1)
                strBreakJuminCD(1) = CType(csJukiDataRow(ABJukiData.JUMINCD), String)

                ' 住民コードがブレイクしたら各種項目を初期化する
                If strBreakJuminCD(0) <> strBreakJuminCD(1) Then
                    m_intRenbanCnt = 0
                    m_intJutogaiInCnt = 0
                    m_intJutogaiRowCnt = 0
                    m_blnHenkanFG = False
                    '*履歴番号 000018 2005/11/27 削除開始
                    'm_blnSaiTenyuFG = False
                    '*履歴番号 000018 2005/11/27 削除終了
                    '*履歴番号 000041 2009/06/18 追加開始
                    m_blnRirekiShusei = False
                    '*履歴番号 000041 2009/06/18 追加終了
                    '*履歴番号 000042 2009/08/10 修正開始
                    m_csReRirekiEntity = Nothing
                    '*履歴番号 000042 2009/08/10 修正終了
                    m_csReRirekiHyojunEntity = Nothing
                    m_csRERirekiFZYHyojunEntity = Nothing
                End If

                ' 直近のデータか履歴データなのかを判定
                ' 履歴終了年月日がオール９の場合は、直近データの場合である
                If CType(csJukiDataRow(ABJukiData.RRKED_YMD), String) = "99999999" Then

                    '---------------------------------------------------------------------------------------
                    ' 3-1. 直近レコードを編集し更新する
                    '---------------------------------------------------------------------------------------

                    ' 住基更新メソッドを呼ぶ
                    Me.JukiDataKoshin01(csJukiDataRow)

                Else
                    '* 履歴番号000062 2023/12/07 削除開始
                    ''---------------------------------------------------------------------------------------
                    '' 3-2-1. ＤＢから対象データの全履歴を退避し、ＤＢを削除する
                    ''---------------------------------------------------------------------------------------

                    '' 住民コードがブレイクしたらDB内の該当レコードを全件削除する
                    'If strBreakJuminCD(0) <> strBreakJuminCD(1) Then
                    '    ' 履歴全件データの時
                    '    ' 宛名検索キーのインスタンス化
                    '    cSearchKey = New ABAtenaSearchKey
                    '    ' 検索キーに住民コードを設定する
                    '    cSearchKey.p_strJuminCD = CType(csJukiDataRow(ABJukiData.JUMINCD), String)

                    '    ' 該当の履歴データを取得する(住基・住登外全件)
                    '    csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(999, cSearchKey, "", True)

                    '    '* 履歴番号 000044 2011/11/09 追加開始
                    '    '履歴付随を取得
                    '    csAtenaRirekiFzyEntity = m_cAtenaRirekiFzyB.GetAtenaFZYRBHoshu(cSearchKey.p_strJuminCD, String.Empty, String.Empty, True)
                    '    '* 履歴番号 000044 2011/11/09 追加終了

                    '    ' 全履歴データの件数を取得
                    '    intAllCnt = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count

                    '    ' 全履歴データを退避する
                    '    m_csReRirekiEntity = csAtenaRirekiEntity

                    '    '* 履歴番号 000044 2011/11/09 追加開始
                    '    '履歴付随の退避をする
                    '    m_csReRirekiFzyEntity = csAtenaRirekiFzyEntity
                    '    '* 履歴番号 000044 2011/11/09 追加終了

                    '    ' 退避した履歴Ｅｅｎｔｉｔｙから住登外のＲＯＷだけを取り出す
                    '    m_csJutogaiRows = m_csReRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Select("JUMINJUTOGAIKB ='2'", ABAtenaRirekiEntity.RIREKINO)
                    '    m_intJutogaiRowCnt = m_csJutogaiRows.Length

                    '    ' 住登外レコードが存在する場合はフラグを立てる。
                    '    If m_intJutogaiRowCnt >= 1 Then
                    '        ' 住登外ありフラグをＴｒｕｅ
                    '        m_blnJutogaiAriFG = True

                    '        '*履歴番号 000027 2005/12/20 追加開始
                    '        ' 合併追いかけ期間中で住基データの直近が住民である場合、退避した住登外ロウを編集する。
                    '        If m_strGapeiDate <> String.Empty AndAlso m_strSystemDate < m_strGapeiDate Then
                    '            ' 合併追いかけ期間である
                    '            ' 住基データ対象住民ＣＤの直近レコードを取得する
                    '            csJukiCkinDataRows = csJukiDataEntity.Tables(ABJukiData.TABLE_NAME).Select("JUMINCD = '" + CType(csJukiDataRow(ABJukiData.JUMINCD), String) + "' AND RRKED_YMD = '99999999'")
                    '            ' 住基データ直近が住民の場合
                    '            If CType(csJukiCkinDataRows(0)(ABJukiData.JUMINSHU), String).RPadLeft(2, " "c).RRemove(0, 1) = "0" Then
                    '                ' 住基データ直近レコードの開始年月日を取得する
                    '                strJukiCkinST_YMD = CType(csJukiCkinDataRows(0)(ABJukiData.RRKST_YMD), String)
                    '                ' 住登外ロウを編集する
                    '                m_csJutogaiRows = EditJutogaiRows(m_csJutogaiRows, strJukiCkinST_YMD)
                    '                ' 改めて住登外ロウの件数を取得する
                    '                m_intJutogaiRowCnt = m_csJutogaiRows.Length
                    '            End If
                    '        End If
                    '        '*履歴番号 000027 2005/12/20 追加終了

                    '        ' 最初の住登外ＲＯＷを取得する
                    '        m_csFirstJutogaiRow = m_csJutogaiRows(0)

                    '        ' 履歴開始年月日を取得する
                    '        m_intJutogaiST_YMD = CType(m_csFirstJutogaiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer)
                    '    Else
                    '        m_blnJutogaiAriFG = False
                    '    End If

                    '    ' 該当の履歴データを全件削除する
                    '    intDelCnt = m_cAtenaRirekiB.DeleteAtenaRB(CType(csJukiDataRow(ABJukiData.JUMINCD), String))

                    '    '* 履歴番号 000044 2011/11/09 追加開始
                    '    '* 履歴番号 000062 2023/12/07 削除開始
                    '    ''履歴付随の削除
                    '    'Me.m_cAtenaRirekiFzyB.DeleteAtenaFZYRB(csJukiDataRow(ABJukiData.JUMINCD).ToString)
                    '    ''* 履歴番号 000044 2011/11/09 追加終了

                    '    '' 全履歴データの件数と削除した件数が一致しない場合はエラー
                    '    'If intAllCnt <> intDelCnt Then
                    '    '    ' エラー定義を取得（該当データは他で更新されてしまいました。再度･･･：宛名履歴）
                    '    '    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                    '    '    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                    '    '    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    '    'End If

                    '    ''*履歴番号 000041 2009/06/18 追加開始
                    '    'm_blnRirekiShusei = True
                    '    '* 履歴番号 000062 2023/12/07 削除終了
                    '    '*履歴番号 000041 2009/06/18 追加終了

                    'End If
                    '*履歴番号000062 2023/12/07 削除終了

                    '---------------------------------------------------------------------------------------
                    ' 3-2-2. 履歴レコードを編集し更新する
                    '---------------------------------------------------------------------------------------

                    ' 履歴データを再セットする
                    Me.JukiDataKoshin08N(csJukiDataRow)
                    '*履歴番号 000017 2005/11/22 修正終了
                End If

            Next

            '*履歴番号 000016 2005/11/01 修正終了

            '*履歴番号 000004 2004/02/13 追加開始   000009 2005/02/28 削除開始
            '**
            '* ワークフロー処理
            '*
            'カウントが"0"の時はワークフロー処理を行わない
            ''''''''If Not (m_intCnt = 0) Then
            ''''''''    '  宛名管理情報の種別04識別キー01のデータを全件取得する
            ''''''''    csAtenaKanriEntity = cAtenaKanriJohoB.GetKanriJohoHoshu("04", "01")

            ''''''''    '管理情報のワークフローレコードが存在し、パラメータが"1"の時だけワークフロー処理を行う
            ''''''''    If Not (csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows.Count = 0) Then
            ''''''''        If CStr(csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows(0).Item(ABAtenaKanriJohoEntity.PARAMETER)) = "1" Then

            ''''''''            'm_ABToshoPropertyの配列数を再定義
            ''''''''            ReDim Preserve m_ABToshoProperty(m_intCnt - 1)
            ''''''''            'データセット取得クラスのインスタンス化
            ''''''''            cABAtenaCnvBClass = New ABAtenaCnvBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
            ''''''''            'ワークフロー送信処理呼び出し
            ''''''''            cABAtenaCnvBClass.AtenaCnv(m_ABToshoProperty, WORK_FLOW_NAME, DATA_NAME)

            ''''''''        End If
            ''''''''    End If
            ''''''''End If
            '*履歴番号 000004 2004/02/13 追加終了   000009 2005/02/28 削除終了


            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try

    End Sub

    '************************************************************************************************
    '* メソッド名     住基データ更新（通常）
    '* 
    '* 構文           Public Sub JukiDataKoshin1(ByVal csJukiDataRow As DataRow) 
    '* 
    '* 機能 　    　　住基データを更新する
    '* 
    '* 引数           なし
    '* 
    '* 戻り値         なし
    '************************************************************************************************
    <SecuritySafeCritical>
    Private Sub JukiDataKoshin01(ByVal csJukiDataRow As DataRow)
        Const THIS_METHOD_NAME As String = "JukiDataKoshin01"
        Dim objErrorStruct As UFErrorStruct                 ' エラー定義構造体
        Dim blnJutogaiUmu As Boolean                        ' 住登外有無FLG
        Dim blnJukiUmu As Boolean                           ' 住基有無FLG
        Dim strJuminCD As String                            ' 住民コード
        Dim csJutogaiEntity As DataSet                      ' 住登外DataSet
        Dim cSearchKey As ABAtenaSearchKey                  ' 宛名検索キー
        Dim csAtenaEntity As DataSet                        ' 宛名マスタEntity
        Dim csAtenaRow As DataRow                           ' 宛名マスタRow
        Dim csDataRow As DataRow                            ' ＤａｔａＲｏｗ
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csDataSet As DataSet                            ' ＤａｔａＳｅｔ
        '* corresponds to VS2008 End 2010/04/16 000043
        Dim csDataColumn As DataColumn                      ' ＤａｔａＣｏｌｕｍｎ
        Dim csAtenaRirekiEntity As DataSet                  ' 宛名履歴DataSet
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csAtenaRirekiRows() As DataRow                  ' 宛名履歴Rows
        '* corresponds to VS2008 End 2010/04/16 000043
        Dim csAtenaRirekiRow As DataRow                     ' 宛名履歴Row
        Dim intCount As Integer                             ' 更新件数
        Dim csAtenaRuisekiEntity As DataSet                 ' 宛名累積DataSet
        Dim csAtenaRuisekiRow As DataRow                    ' 宛名累積Row
        '*履歴番号 000003 2003/11/21 追加開始
        Dim csAtenaNenkinEntity As DataSet                  ' 宛名年金DataSet
        Dim csAtenaKokuhoEntity As DataSet                  ' 宛名国保DataSet
        '*履歴番号 000003 2003/11/21 追加終了
        Dim StrShoriNichiji As String
        ''*履歴番号 000004 2004/02/13 追加開始  000009 2005/03/18 削除開始
        '''''Dim cABToshoProperty As ABToshoProperty
        '''''Dim cAtenaKanriJohoB As ABAtenaKanriJohoBClass      '宛名管理情報ＤＡビジネスクラス
        '''''Dim csAtenaKanriEntity As DataSet                   '宛名管理情報データセット
        '*履歴番号 000004 2004/02/13 追加終了  000009 2005/03/18 削除開始
        '*履歴番号 000005 2004/03/08 追加開始   000009 2005/03/18 削除
        '''''''Dim cBAAtenaLinkageBClass As BAAtenaLinkageBClass   ' 固定資産税宛名クラス
        '''''''Dim cBAAtenaLinkageIFXClass As BAAtenaLinkageIFXClass
        Dim BlnRcd As Boolean
        '*履歴番号 000005 2004/03/08 追加終了
        '*履歴番号 000013 2005/06/19 追加開始
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csRirekiNoEntity As DataSet         '履歴番号データセット
        '* corresponds to VS2008 End 2010/04/16 000043
        Dim strMaxRirekino As String            '最大履歴番号
        Dim blnTokushuFG As Boolean             '特殊処理フラグ
        '*履歴番号 000016 2005/11/01 削除開始
        '* corresponds to VS2008 Start 2010/04/16 000043
        ''''Dim csSortRirekiDataRow() As DataRow      '履歴番号データロウ
        '* corresponds to VS2008 End 2010/04/16 000043
        '*履歴番号 000016 2005/11/01 削除終了
        '*履歴番号 000013 2005/06/19 追加終了
        '*履歴番号 000016 2005/11/01 追加開始
        Dim csUpRirekiRows() As DataRow           ' 全履歴よりセレクトしたレコード群を格納する
        Dim csUpRirekiRow As DataRow              ' 特殊処理修正時の修正済みの更新レコード
        Dim intIdx As Integer                     ' For文で使用するインデックス
        Dim intJukiInCnt As Integer = 0           ' 住基データをインサートした件数
        '*履歴番号 000016 2005/11/01 追加終了
        '*履歴番号 000017 2005/11/22 追加開始
        Dim intForCnt As Integer = 0
        '*履歴番号 000017 2005/11/22 追加終了
        '*履歴番号 000023 2005/12/16 追加開始
        Dim csRirekiNORows() As DataRow
        Dim intMaxRirekiNO As Integer
        '*履歴番号 000023 2005/12/16 追加終了
        '*履歴番号 000031 2007/01/30 追加開始
        Dim strBanchiCD() As String                         ' 番地コード取得用配列
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim strMotoBanchiCD() As String                     ' 変更前番地コード
        'Dim intLoop As Integer                              ' ループカウンタ
        '* corresponds to VS2008 End 2010/04/16 000043
        '*履歴番号 000031 2007/01/30 追加終了
        '*履歴番号 000032 2007/02/15 追加開始
        Dim csBeforeRirekiRows As DataRow()                 ' 更新前履歴レコード取得用DataRows
        '*履歴番号 000032 2007/02/15 追加終了
        '*履歴番号 000036 2007/09/28 追加開始
        Dim cHenshuSearchKana As ABHenshuSearchShimeiBClass ' 検索用カナ生成クラス
        Dim strSearchKana(4) As String                      ' 検索用カナ名称用
        '*履歴番号 000036 2007/09/28 追加終了
        '* 履歴番号 000044 2011/11/09 追加開始
        Dim csSelectedRows As DataRow()                     '検索結果配列
        Dim csCkinRirekiFzyRows As DataRow                  '直近宛名履歴付随行
        Dim csAtenaFzyEntity As DataSet                     '宛名付随
        Dim csAtenaFzyRow As DataRow                        '宛名付随行
        Dim csAtenaRirekiFzyEntity As DataSet               '宛名履歴付随
        Dim csAtenaRirekiFzyRow As DataRow                  '宛名履歴付随行
        Dim csAtenaRirekiFzyTokushuRow As DataRow           '宛名履歴付随特殊行
        Dim csAtenaRuisekiFzyEntity As DataSet              '宛名累積付随
        Dim csAtenaRuisekiFzyRow As DataRow                 '宛名累積付随行
        Dim cSekoYMDHanteiB As ABSekoYMDHanteiBClass        '施行日判定B
        Dim blnAfterSekobi As Boolean = False               '施行日以降かどうか
        '* 履歴番号 000044 2011/11/09 追加終了
        '* 履歴番号 000050 2014/06/25 追加開始
        Dim a_strMyNumber() As String                       ' 共通番号・旧共通番号分割用
        Dim cABMyNumberPrm As ABMyNumberPrmXClass           ' 共通番号パラメータークラス
        '* 履歴番号 000050 2014/06/25 追加終了
        '* 履歴番号 000058 2015/10/14 追加開始
        Dim crBangoSekoYMDHanteiB As URSekoYMDHanteiBClass  ' 共通番号施行日判定クラス
        Dim strBangoSekoYMD As String                       ' 共通番号施行日
        Dim blnIsCreateAtenaRireki As Boolean               ' 宛名履歴を作成するかどうか（特殊修正の場合に特例として）
        '* 履歴番号 000058 2015/10/14 追加終了
        Dim csAtenaHyojunEntity As DataSet                  '宛名標準
        Dim csAtenaHyojunRow As DataRow                     '宛名標準Row
        Dim csAtenaFzyHyojunEntity As DataSet               '宛名付随標準
        Dim csAtenaFzyHyojunRow As DataRow                  '宛名付随標準Row
        Dim csAtenaRirekiHyojunEntity As DataSet            '宛名履歴標準
        Dim csAtenaRirekiHyojunRow As DataRow               '宛名履歴標準Row
        Dim csAtenaRirekiFZYHyojunEntity As DataSet         '宛名履歴付随標準
        Dim csAtenaRirekiFZYHyojunRow As DataRow            '宛名履歴付随標準Row
        Dim csAtenaRuisekiHyojunEntity As DataSet           '宛名累積標準
        Dim csAtenaRuisekiHyojunRow As DataRow              '宛名累積標準Row
        Dim csAtenaRuisekiFZYHyojunEntity As DataSet        '宛名累積付随標準
        Dim csAtenaRuisekiFZYHyojunRow As DataRow           '宛名累積付随標準Row
        Dim csAtenaRirekiHyojunTokushuRow As DataRow        '宛名履歴標準特殊行
        Dim csAtenaRirekiFzyHyojunTokushuRow As DataRow     '宛名履歴付随標準特殊行
        Dim csCkinRirekiHyojunRows As DataRow               '直近宛名履歴標準行
        Dim csCkinRirekiFzyHyojunRows As DataRow            '直近宛名履歴付随標準行

        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            '*履歴番号 000016 2005/11/18 追加開始
            ' 使用するときにいちいちセットしてたので最初に行う。(今まで点在していた分は削除)
            ' 日付クラスの必要な設定を行う
            m_cfDateClass.p_enDateSeparator = UFDateSeparator.None
            m_cfDateClass.p_enEraType = UFEraType.Number
            '*履歴番号 000016 2005/11/18 追加終了

            '*履歴番号 000036 2007/09/28 追加開始
            ' 検索用カナ生成クラスインスタンス化
            cHenshuSearchKana = New ABHenshuSearchShimeiBClass(m_cfControlData, m_cfConfigDataClass)
            '*履歴番号 000036 2007/09/28 追加終了

            '* 履歴番号 000044 2011/11/09 追加開始
            '施行日以降フラグを取得しておく
            cSekoYMDHanteiB = New ABSekoYMDHanteiBClass(Me.m_cfControlData, Me.m_cfConfigDataClass, Me.m_cfRdbClass)
            blnAfterSekobi = cSekoYMDHanteiB.CheckAfterSekoYMD
            '* 履歴番号 000044 2011/11/09 追加終了

            '* 履歴番号 000058 2015/10/14 追加開始
            ' 本付番処理の際に、住基と宛名で履歴数が異なっている。
            ' 本付番処理にて作成された住基のみに存在する履歴に対して特殊修正が発生した場合は、
            ' 宛名に該当履歴が存在しないため、宛名履歴を刻む動きとする。
            ' ただし、履歴修正等で履歴数が一致した以降の特殊修正は今まで通り上書き処理となる。
            blnIsCreateAtenaRireki = False
            Select Case csJukiDataRow.Item(ABJukiData.SHORIJIYUCD).ToString

                Case ABEnumDefine.ABJukiShoriJiyuType.TokushuShusei.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.TokushuCodeShusei.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.KojinNoShusei.GetHashCode.ToString("00")

                    ' 「03：特殊修正」「04：住民票コード修正」「05：個人番号修正」の場合

                    ' 宛名履歴の直近レコードを取得する
                    cSearchKey = New ABAtenaSearchKey
                    cSearchKey.p_strJuminCD = csJukiDataRow(ABJukiData.JUMINCD).ToString
                    csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(1, cSearchKey, "", "1", True)

                    If (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count > 0) Then

                        csAtenaRirekiRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows(0)

                        ' 宛名履歴付随の直近レコードを取得する
                        csAtenaRirekiFzyEntity = m_cAtenaRirekiFzyB.GetAtenaFZYRBHoshu(
                                                        csAtenaRirekiRow.Item(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                        csAtenaRirekiRow.Item(ABAtenaRirekiEntity.RIREKINO).ToString,
                                                        "1",
                                                        True)

                        If (csAtenaRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).Rows.Count > 0) Then

                            csAtenaRirekiFzyRow = csAtenaRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).Rows(0)

                            ' 住民に対する特殊処理かどうか判定する（本付番処理対象となったレコードに対する処理かの判定）
                            ' ※「10：日本人住民」「20-0：外国人住民」かどうか判定する
                            If (csAtenaRirekiRow.Item(ABAtenaRirekiEntity.ATENADATASHU).ToString = ABConstClass.JUMINSHU_NIHONJIN_JUMIN _
                                OrElse (csAtenaRirekiRow.Item(ABAtenaRirekiEntity.ATENADATASHU).ToString = ABConstClass.JUMINSHU_GAIKOKUJIN_JUMIN _
                                        AndAlso csAtenaRirekiFzyRow.Item(ABAtenaRirekiFZYEntity.JUMINHYOJOTAIKBN).ToString = ABConstClass.JUMINHYOJOTAIKB_TAISHO)) Then

                                ' 番号制度施行日を取得する
                                crBangoSekoYMDHanteiB = New URSekoYMDHanteiBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass, ABConstClass.THIS_BUSINESSID)
                                strBangoSekoYMD = crBangoSekoYMDHanteiB.GetBangoSeidoSekoYMD

                                ' 履歴開始日が番号制度施行日未満、かつ作成年月日が番号制度施行日未満の場合、処理事由コードに直近異動事由コードを設定する
                                ' 上記条件を満たす場合、本付番処理以降に異動が発生しておらず、履歴数不一致の状態となっているため、
                                ' 宛名履歴を刻み、履歴数（直近の異動状態）を一致させる
                                ' ※番号施行日以降に通常異動が発生した場合、履歴開始日・作成日時ともに番号施行日以降となる（直近履歴が一致している状態のため上書き処理とする）
                                ' ※番号施行日以降に履歴修正が発生した場合、作成日時のみが番号施行日以降となる（履歴修正にて直近履歴が一致、履歴数も一致している状態のため上書き処理とする）
                                ' ※番号施行日以降に特殊修正が１回でも発生した場合、履歴開始日・作成日時ともに番号施行日以降となる（特殊処理（当考慮）にて直近履歴が一致している状態のため上書き処理とする）
                                ' ※今後発生すると思われる移行処理で履歴を作成する場合、作成日時のみが番号施行日以降となる（移行時に履歴数を一致されてあることが前提とし上書き処理とする）
                                ' ※住登内修正（他社住基）の場合、当判定にて履歴が刻まれる可能性があるが問題なしとする
                                If (csAtenaRirekiRow.Item(ABAtenaRirekiEntity.RRKST_YMD).ToString < strBangoSekoYMD _
                                    AndAlso csAtenaRirekiRow.Item(ABAtenaRirekiEntity.SAKUSEINICHIJI).ToString.RPadRight(8).RSubstring(0, 8) < strBangoSekoYMD) Then

                                    ' 宛名履歴を作成する（特殊処理の場合に特例として）
                                    blnIsCreateAtenaRireki = True

                                Else
                                    ' noop
                                End If

                            Else
                                ' noop
                            End If

                        Else
                            ' noop
                        End If

                        ' 宛名履歴標準の直近レコードを取得する
                        csAtenaRirekiHyojunEntity = m_cABAtenaRirekiHyojunB.GetAtenaRirekiHyojunBHoshu(
                                                        csAtenaRirekiRow.Item(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                        csAtenaRirekiRow.Item(ABAtenaRirekiEntity.RIREKINO).ToString,
                                                        "1",
                                                        True)

                        If (csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                            csAtenaRirekiHyojunRow = csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).Rows(0)
                        End If

                        ' 宛名履歴付随標準の直近レコードを取得する
                        csAtenaRirekiFZYHyojunEntity = m_cABAtenaRirekiFZYHyojunB.GetAtenaRirekiFZYHyojunBHoshu(
                                                        csAtenaRirekiRow.Item(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                        csAtenaRirekiRow.Item(ABAtenaRirekiEntity.RIREKINO).ToString,
                                                        "1",
                                                        True)

                        If (csAtenaRirekiFZYHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                            csAtenaRirekiFZYHyojunRow = csAtenaRirekiFZYHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).Rows(0)
                        End If
                    Else
                        ' noop
                    End If

                Case Else
                    ' noop
            End Select
            '* 履歴番号 000058 2015/10/14 追加終了

            '---------------------------------------------------------------------------------------
            ' 1. 変数の初期化
            '
            '---------------------------------------------------------------------------------------
            blnJutogaiUmu = False           '住登外データが存在している場合はTrue
            blnJukiUmu = False              '住基データが存在している場合はTrue
            strJuminCD = csJukiDataRow(ABJukiData.JUMINCD).ToString    '対象データの住民コードを取得


            '---------------------------------------------------------------------------------------
            ' 2. 住登外データの存在チェック
            '　　　　　直近の住登外データが存在しているか住登外マスタから取得する。
            '---------------------------------------------------------------------------------------
            ' 住民コードで住登外マスタを取得する（存在する場合は、住登外有りＦＬＧに”1”をセット）
            csJutogaiEntity = m_cJutogaiB.GetJutogaiBHoshu(strJuminCD, True)
            If (csJutogaiEntity.Tables(ABJutogaiEntity.TABLE_NAME).Rows.Count > 0) Then
                blnJutogaiUmu = True
            End If


            '---------------------------------------------------------------------------------------
            ' 3. 再転入の処理
            '　　　　　直近の住登外データが存在している場合は削除する。
            '---------------------------------------------------------------------------------------
            ' 住民種別の下１桁が”0”（住民）でかつ住登外有りＦＬＧが”1”の時
            ' ・住登外データを削除する
            ' ・住登外優先で指定年月日”99999999”で宛名マスタを取得し、そのデータを削除する
            If (((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").RSubstring(1, 1) = "0") _
                    And blnJutogaiUmu) Then
                For Each csDataRow In csJutogaiEntity.Tables(ABJutogaiEntity.TABLE_NAME).Rows
                    m_cJutogaiB.DeleteJutogaiB(csDataRow, "D")
                Next csDataRow
                cSearchKey = New ABAtenaSearchKey
                cSearchKey.p_strJuminCD = strJuminCD
                cSearchKey.p_strJutogaiYusenKB = "1"
                csAtenaEntity = m_cAtenaB.GetAtenaBHoshu(1, cSearchKey, True)
                For Each csDataRow In csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows
                    m_cAtenaB.DeleteAtenaB(csDataRow, "D")
                    '宛名標準
                    csAtenaHyojunEntity = m_cABAtenaHyojunB.GetAtenaHyojunBHoshu(cSearchKey.p_strJuminCD,
                                                                      csDataRow(ABAtenaEntity.JUMINJUTOGAIKB).ToString,
                                                                      True)
                    If (csAtenaHyojunEntity.Tables(ABAtenaHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                        '検索結果が存在したら０番目データでDeleteを行う（１か０しかないはず）
                        m_cABAtenaHyojunB.DeleteAtenaHyojunB(csAtenaHyojunEntity.Tables(ABAtenaHyojunEntity.TABLE_NAME).Rows(0), "D")
                    Else
                        '何もしない
                    End If

                    '* 履歴番号 000044 2011/11/09 追加開始
                    '宛名付随データ取得
                    csAtenaFzyEntity = m_cAtenaFzyB.GetAtenaFZYBHoshu(cSearchKey.p_strJuminCD,
                                                                     csDataRow(ABAtenaEntity.JUMINJUTOGAIKB).ToString,
                                                                     True)
                    If (csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).Rows.Count > 0) Then
                        '検索結果が存在したら０番目データでDeleteを行う（１か０しかないはず）
                        m_cAtenaFzyB.DeleteAtenaFZYB(csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).Rows(0), "D")
                    Else
                        '何もしない
                    End If
                    '* 履歴番号 000044 2011/11/09 追加終了

                    '宛名付随標準
                    csAtenaFzyHyojunEntity = m_cABAtenaFZYHyojunB.GetAtenaFZYHyojunBHoshu(cSearchKey.p_strJuminCD,
                                                                      csDataRow(ABAtenaEntity.JUMINJUTOGAIKB).ToString,
                                                                      True)
                    If (csAtenaFzyHyojunEntity.Tables(ABAtenaFZYHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                        '検索結果が存在したら０番目データでDeleteを行う（１か０しかないはず）
                        m_cABAtenaFZYHyojunB.DeleteAtenaFZYHyojunB(csAtenaFzyHyojunEntity.Tables(ABAtenaFZYHyojunEntity.TABLE_NAME).Rows(0), "D")
                    Else
                        '何もしない
                    End If
                Next csDataRow
            End If


            '---------------------------------------------------------------------------------------
            ' 4. 住基データの存在チェック
            '　　　　　直近の住基データが存在しているか宛名マスタから取得する。
            '---------------------------------------------------------------------------------------
            ' 住基優先で宛名マスタを取得する（存在する場合は、住基有りＦＬＧに”1”をセット）
            ' 宛名検索キーのインスタンス化
            cSearchKey = New ABAtenaSearchKey
            cSearchKey.p_strJuminCD = strJuminCD
            cSearchKey.p_strJuminYuseniKB = "1"
            csAtenaEntity = m_cAtenaB.GetAtenaBHoshu(1, cSearchKey, True)
            If (csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows.Count > 0) Then
                blnJukiUmu = True
                '* 履歴番号 000044 2011/11/09 追加開始
                '宛名付随情報を住民コード指定で取得
                csAtenaFzyEntity = m_cAtenaFzyB.GetAtenaFZYBHoshu(strJuminCD,
                                                                  csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME) _
                                                                    .Rows(0)(ABAtenaEntity.JUMINJUTOGAIKB).ToString,
                                                                    True)
                '宛名標準
                csAtenaHyojunEntity = m_cABAtenaHyojunB.GetAtenaHyojunBHoshu(strJuminCD,
                                      csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows(0)(ABAtenaEntity.JUMINJUTOGAIKB).ToString, True)
                '宛名付随標準
                csAtenaFzyHyojunEntity = m_cABAtenaFZYHyojunB.GetAtenaFZYHyojunBHoshu(strJuminCD,
                                     csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows(0)(ABAtenaEntity.JUMINJUTOGAIKB).ToString, True)
            Else
                'そうでないとき、住民住登外区分を空で検索
                csAtenaFzyEntity = m_cAtenaFzyB.GetAtenaFZYBHoshu(strJuminCD, String.Empty)
                '* 履歴番号 000044 2011/11/09 追加終了
                '宛名標準
                csAtenaHyojunEntity = m_cABAtenaHyojunB.GetAtenaHyojunBHoshu(strJuminCD, String.Empty, False)
                '宛名付随標準
                csAtenaFzyHyojunEntity = m_cABAtenaFZYHyojunB.GetAtenaFZYHyojunBHoshu(strJuminCD, String.Empty, False)
            End If


            '---------------------------------------------------------------------------------------
            ' 5. データの編集
            '　　　　　直近の住基データが存在している場合は修正、していなければ追加となる。
            '　　　　　 
            '---------------------------------------------------------------------------------------
            ' 宛名マスタ
            ' 宛名マスタの列を取得し、初期化する。（更新カウターは、0、それ以外は、String Empty）（共通）
            If (blnJukiUmu) Then
                csAtenaRow = csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows(0)
            Else
                csAtenaRow = csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).NewRow
                Me.ClearAtena(csAtenaRow)
            End If

            ' 住基データより宛名マスタの編集を行う（ＡＬＬ．ＮＵＬＬ又は、ＡＬＬスペースの時は、String.Emptyにして）
            For Each csDataColumn In csJukiDataRow.Table.Columns
                If (IsDBNull(csJukiDataRow(csDataColumn))) _
                        OrElse (CType(csJukiDataRow(csDataColumn), String).Trim = String.Empty) Then
                    csJukiDataRow(csDataColumn) = String.Empty
                End If
            Next csDataColumn

            ' 住基データの同一項目を宛名マスタの項目にセットする
            ' ・住民コード
            csAtenaRow(ABAtenaEntity.JUMINCD) = csJukiDataRow(ABJukiData.JUMINCD)
            ' ・市町村コード
            csAtenaRow(ABAtenaEntity.SHICHOSONCD) = csJukiDataRow(ABJukiData.SHICHOSONCD)
            ' ・旧市町村コード
            csAtenaRow(ABAtenaEntity.KYUSHICHOSONCD) = csJukiDataRow(ABJukiData.KYUSHICHOSONCD)

            ' 何もセットしない項目
            ' ・住民票コード
            ' ・汎用区分２
            ' ・漢字法人形態
            ' ・漢字法人代表者氏名
            ' ・家屋敷区分
            ' ・備考税目

            ' 編集してセットする項目
            ' ・住民住登外区分   1
            csAtenaRow(ABAtenaEntity.JUMINJUTOGAIKB) = "1"
            ' ・住民優先区分     1
            csAtenaRow(ABAtenaEntity.JUMINYUSENIKB) = "1"
            ' ・住登外優先区分
            ' 　　住民種別の下１桁が”0”（住民）でなく、且つ住登外有りＦＬＧが”1”の時、　0
            If (((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").RSubstring(1, 1) <> "0") _
                    And blnJutogaiUmu) Then
                csAtenaRow(ABAtenaEntity.JUTOGAIYUSENKB) = "0"
            Else
                '   　上記以外       1
                csAtenaRow(ABAtenaEntity.JUTOGAIYUSENKB) = "1"
            End If
            ' ・宛名データ区分=(11)
            csAtenaRow(ABAtenaEntity.ATENADATAKB) = "11"
            ' ・世帯コード～整理番号
            csAtenaRow(ABAtenaEntity.STAICD) = csJukiDataRow(ABJukiData.STAICD)
            'csAtenaRow(ABAtenaEntity.JUMINHYOCD) = String.Empty
            csAtenaRow(ABAtenaEntity.SEIRINO) = csJukiDataRow(ABJukiData.SEIRINO)
            ' ・宛名データ種別=(住民種別)
            csAtenaRow(ABAtenaEntity.ATENADATASHU) = csJukiDataRow(ABJukiData.JUMINSHU)
            ' ・汎用区分１=(写し区分)
            csAtenaRow(ABAtenaEntity.HANYOKB1) = csJukiDataRow(ABJukiData.UTSUSHIKB)
            ' ・個人法人区分=(1)
            csAtenaRow(ABAtenaEntity.KJNHJNKB) = "1"
            ' ・汎用区分２
            'csAtenaRow(ABAtenaEntity.HANYOKB2) = String.Empty
            '*履歴番号 000037 2008/05/12 削除開始
            '* corresponds to VS2008 Start 2010/04/16 000043
            '''' ・管内管外区分
            '''' 　　住民種別の下１桁が”8”（転出者）の場合、　　2
            '* corresponds to VS2008 End 2010/04/16 000043
            ''If ((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").Substring(1, 1) = "8") Then
            ''    csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "2"
            ''Else
            ''    ' 住民種別の下１桁が”8”（転出者）でない場合、1			
            ''    csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "1"
            ''End If
            '*履歴番号 000037 2008/05/12 削除終了

            '*履歴番号 000068 2024/07/05 追加開始
            If (CStr(csJukiDataRow(ABJukiData.HONGOKUMEI)).Trim <> String.Empty) AndAlso
               (CStr(csJukiDataRow(ABJukiData.KANJIHEIKIMEI)).Trim <> String.Empty) AndAlso
               (CStr(csJukiDataRow(ABJukiData.KANJITSUSHOMEI)).Trim = String.Empty) Then
                ' 本国名≠空白 かつ 併記名≠空白 かつ 通称名＝空白の場合
                ' 漢字名称２・カナ名称２に空白を設定
                csJukiDataRow(ABJukiData.KANJIMEISHO2) = String.Empty
                csJukiDataRow(ABJukiData.KANAMEISHO2) = String.Empty
            Else
            End If
            '*履歴番号 000068 2024/07/05 追加終了

            '*履歴番号 000036 2007/09/28 修正開始
            ' ・カナ名称１～検索用カナ名
            If ((CStr(csJukiDataRow(ABJukiData.SHIMEIRIYOKB)).Trim = "2") AndAlso
                    (CStr(csJukiDataRow(ABJukiData.KANJIMEISHO2)).Trim <> String.Empty)) Then
                ' 本名優先(本名と通称名を持つ外国人かつ氏名利用区分が"2")
                csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO2)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
                csAtenaRow(ABAtenaEntity.KANAMEISHO2) = String.Empty
                csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = String.Empty
                csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = GetSearchMoji(csJukiDataRow(ABJukiData.KANJIMEISHO2).ToString)

                '*履歴番号 000039 2009/05/12 修正開始
                ' 検索用カナ姓名、検索用カナ姓、検索用カナ名を生成し格納
                strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)),
                                                               String.Empty, m_cFrnHommyoKensakuType)
                'strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)), _
                '                                               String.Empty, cuKanriJohoB.GetFrn_HommyoKensaku_Param)
                '*履歴番号 000039 2009/05/12 修正終了

                ' 通称名を漢字法人代表者氏名に格納
                csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
                ' 汎用区分２に氏名利用区分のパラメータを格納
                csAtenaRow(ABAtenaEntity.HANYOKB2) = csJukiDataRow(ABJukiData.SHIMEIRIYOKB)
                ' 取得した検索用カナ姓名、検索用カナ姓、検索用カナ名を格納
                csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = strSearchKana(0)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = strSearchKana(1)
                csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = strSearchKana(2)

                '*履歴番号 000039 2009/05/12 修正開始
            ElseIf (m_cFrnHommyoKensakuType = FrnHommyoKensakuType.Tsusho_Seishiki) Then
                'ElseIf (cuKanriJohoB.GetFrn_HommyoKensaku_Param = FrnHommyoKensakuType.Tsusho_Seishiki) Then
                '*履歴番号 000039 2009/05/12 修正終了

                ' 通称名優先(本名優先の条件以外の場合)
                csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO1)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
                csAtenaRow(ABAtenaEntity.KANAMEISHO2) = csJukiDataRow(ABJukiData.KANAMEISHO2)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
                csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = csJukiDataRow(ABJukiData.SEARCHKANJIMEISHO)

                '*履歴番号 000039 2009/05/12 修正開始
                ' 検索用カナ姓名、検索用カナ姓、検索用カナ名を生成し格納
                strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO1)),
                                                               CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)),
                                                               m_cFrnHommyoKensakuType)
                'strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO1)), _
                '                                               CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)), _
                '                                               cuKanriJohoB.GetFrn_HommyoKensaku_Param)
                '*履歴番号 000039 2009/05/12 修正終了

                ' 通称名を漢字法人代表者氏名を空にする
                csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = String.Empty
                ' 汎用区分２に氏名利用区分のパラメータを格納
                csAtenaRow(ABAtenaEntity.HANYOKB2) = csJukiDataRow(ABJukiData.SHIMEIRIYOKB)
                ' 取得した検索用カナ姓名、検索用カナ姓、検索用カナ名を格納
                csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = strSearchKana(0)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = strSearchKana(1)
                csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = strSearchKana(2)
            Else
                '通称名優先（既存ユーザ）
                csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO1)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
                csAtenaRow(ABAtenaEntity.KANAMEISHO2) = csJukiDataRow(ABJukiData.KANAMEISHO2)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
                ' 通称名を漢字法人代表者氏名を空にする
                csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = String.Empty
                ' 汎用区分２に氏名利用区分のパラメータを格納
                csAtenaRow(ABAtenaEntity.HANYOKB2) = csJukiDataRow(ABJukiData.SHIMEIRIYOKB)
                csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = csJukiDataRow(ABJukiData.SEARCHKANJIMEISHO)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = csJukiDataRow(ABJukiData.SEARCHKANASEIMEI)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = csJukiDataRow(ABJukiData.SEARCHKANASEI)
                csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = csJukiDataRow(ABJukiData.SEARCHKANAMEI)
            End If
            '' ・カナ名称１～検索用カナ名
            'csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO1)
            'csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
            'csAtenaRow(ABAtenaEntity.KANAMEISHO2) = csJukiDataRow(ABJukiData.KANAMEISHO2)
            'csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
            ''csAtenaRow(ABAtenaEntity.KANJIHJNKEITAI) = String.Empty
            ''csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = String.Empty
            'csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = csJukiDataRow(ABJukiData.SEARCHKANJIMEISHO)
            ''*履歴番号 000034 2007/08/31 修正開始
            'If (cuKanriJohoB.GetFrn_HommyoKensaku_Param = FrnHommyoKensakuType.Tsusho_Seishiki) Then
            '    '外国人本名検索機能が"2(Tsusho_Seishiki)"のとき英字は大文字にする
            '    csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = CType(csJukiDataRow(ABJukiData.SEARCHKANASEIMEI), String).ToUpper()
            '    csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = GetSearchKana(CType(csJukiDataRow(ABJukiData.KANAMEISHO2), String))
            '    csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = CType(csJukiDataRow(ABJukiData.SEARCHKANAMEI), String).ToUpper()
            'Else
            '    csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = csJukiDataRow(ABJukiData.SEARCHKANASEIMEI)
            '    csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = csJukiDataRow(ABJukiData.SEARCHKANASEI)
            '    csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = csJukiDataRow(ABJukiData.SEARCHKANAMEI)
            'End If
            ''csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = csJukiDataRow(ABJukiData.SEARCHKANASEIMEI)
            ''csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = csJukiDataRow(ABJukiData.SEARCHKANASEI)
            ''csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = csJukiDataRow(ABJukiData.SEARCHKANAMEI)
            ''*履歴番号 000034 2007/08/31 修正終了
            '*履歴番号 000036 2007/09/28 修正終了
            csAtenaRow(ABAtenaEntity.KYUSEI) = csJukiDataRow(ABJukiData.KYUSEI)

            ' ・住基履歴番号=(履歴番号)
            csAtenaRow(ABAtenaEntity.JUKIRRKNO) = CStr(csJukiDataRow(ABJukiData.RIREKINO)).RSubstring(2, 4)
            ' ・履歴開始年月日～住民票表示順
            csAtenaRow(ABAtenaEntity.RRKST_YMD) = csJukiDataRow(ABJukiData.RRKST_YMD)
            csAtenaRow(ABAtenaEntity.RRKED_YMD) = csJukiDataRow(ABJukiData.RRKED_YMD)
            csAtenaRow(ABAtenaEntity.UMAREYMD) = csJukiDataRow(ABJukiData.UMAREYMD)
            csAtenaRow(ABAtenaEntity.UMAREWMD) = csJukiDataRow(ABJukiData.UMAREWMD)
            csAtenaRow(ABAtenaEntity.SEIBETSUCD) = csJukiDataRow(ABJukiData.SEIBETSUCD)
            csAtenaRow(ABAtenaEntity.SEIBETSU) = csJukiDataRow(ABJukiData.SEIBETSU)
            csAtenaRow(ABAtenaEntity.SEKINO) = csJukiDataRow(ABJukiData.SEIKINO)
            csAtenaRow(ABAtenaEntity.JUMINHYOHYOJIJUN) = csJukiDataRow(ABJukiData.JUMINHYOHYOJIJUN)
            ' ・第２住民票表示順
            csAtenaRow(ABAtenaEntity.DAI2JUMINHYOHYOJIJUN) = csJukiDataRow(ABJukiData.HYOJIJUN2)
            ' ・続柄コード・続柄・第2続柄コード・第2続柄
            ' 　住民種別の下１桁が”8”（転出者）の場合で続柄が”01”（世帯主）の場合、管理情報のコードに変更し、			
            '   名称はクリアする
            If ((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").RSubstring(1, 1) = "8") Then
                If (csJukiDataRow(ABJukiData.ZOKUGARACD).ToString.TrimEnd = "02") Then
                    If (m_strZokugara1Init = "00") Then
                        csAtenaRow(ABAtenaEntity.ZOKUGARACD) = String.Empty
                        csAtenaRow(ABAtenaEntity.ZOKUGARA) = String.Empty
                    Else
                        csAtenaRow(ABAtenaEntity.ZOKUGARACD) = m_strZokugara1Init
                        csAtenaRow(ABAtenaEntity.ZOKUGARA) = CNS_KURAN
                    End If

                Else
                    csAtenaRow(ABAtenaEntity.ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD)
                    csAtenaRow(ABAtenaEntity.ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA)
                End If
                If (csJukiDataRow(ABJukiData.ZOKUGARACD2).ToString.TrimEnd = "02") Then
                    If (m_strZokugara2Init = "00") Then
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = String.Empty
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = String.Empty
                    Else
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = m_strZokugara2Init
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = CNS_KURAN
                    End If
                Else
                    csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD2)
                    csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA2)
                End If
            Else
                ' 住民種別の下１桁が”8”（転出者）でない場合は、そのままセット			
                csAtenaRow(ABAtenaEntity.ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD)
                csAtenaRow(ABAtenaEntity.ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA)
                csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD2)
                csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA2)
            End If
            ' ・世帯主住民コード～カナ第２世帯主名
            csAtenaRow(ABAtenaEntity.STAINUSJUMINCD) = csJukiDataRow(ABJukiData.STAINUSJUMINCD)
            csAtenaRow(ABAtenaEntity.STAINUSMEI) = csJukiDataRow(ABJukiData.KANJISTAINUSMEI)
            csAtenaRow(ABAtenaEntity.KANASTAINUSMEI) = csJukiDataRow(ABJukiData.KANASTAINUSMEI)
            csAtenaRow(ABAtenaEntity.DAI2STAINUSJUMINCD) = csJukiDataRow(ABJukiData.STAINUSJUMINCD2)
            csAtenaRow(ABAtenaEntity.DAI2STAINUSMEI) = csJukiDataRow(ABJukiData.KANJISTAINUSMEI2)
            csAtenaRow(ABAtenaEntity.KANADAI2STAINUSMEI) = csJukiDataRow(ABJukiData.KANASTAINUSMEI2)

            ' ・郵便番号～方書
            ' ・転出確定住所がある場合は、転出確定欄からセット（ない項目はセットなし）
            If (csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO).ToString.TrimEnd <> String.Empty) Then
                csAtenaRow(ABAtenaEntity.YUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIYUBINNO)
                '*履歴番号 000001 2003/09/11 修正開始
                'csAtenaRow(ABAtenaEntity.JUSHOCD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD)
                csAtenaRow(ABAtenaEntity.JUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD), String)
                '*履歴番号 000001 2003/09/11 修正終了
                csAtenaRow(ABAtenaEntity.JUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO)
                '*履歴番号 000031 2007/01/30 修正開始
                ' 番地情報から番地コードを取得

                '*履歴番号 000038 2009/04/07 修正開始
                strBanchiCD = m_cBanchiCDHenshuB.CreateBanchiCD(CStr(csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)))
                'strBanchiCD = m_crBanchiCdMstB.GetBanchiCd(CStr(csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)), strMotoBanchiCD, True)
                '' 取得した番地コード配列にNothingの項目がある場合はString.Emptyをセットする
                'For intLoop = 0 To strBanchiCD.Length - 1
                '    If (IsNothing(strBanchiCD(intLoop))) Then
                '        strBanchiCD(intLoop) = String.Empty
                '    End If
                'Next
                '*履歴番号 000038 2009/04/07 修正終了

                csAtenaRow(ABAtenaEntity.BANCHICD1) = strBanchiCD(0)
                csAtenaRow(ABAtenaEntity.BANCHICD2) = strBanchiCD(1)
                csAtenaRow(ABAtenaEntity.BANCHICD3) = strBanchiCD(2)
                'csAtenaRow(ABAtenaEntity.BANCHICD1) = String.Empty
                'csAtenaRow(ABAtenaEntity.BANCHICD2) = String.Empty
                'csAtenaRow(ABAtenaEntity.BANCHICD3) = String.Empty
                '*履歴番号 000031 2007/01/30 修正終了
                csAtenaRow(ABAtenaEntity.BANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)
                csAtenaRow(ABAtenaEntity.KATAGAKIFG) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKICD) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI)

                '*履歴番号 000037 2008/05/12 追加開始
                ' 管内管外区分：管外にセット    ※コメント:転出確定住所が存在する場合は管外に設定する。
                csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "2"
                '*履歴番号 000037 2008/05/12 追加終了

            ElseIf (csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO).ToString.TrimEnd <> String.Empty) Then
                ' ・転出確定住所が無く、転出予定住所がある場合は、転出予定欄からセット（ない項目はセットなし）
                csAtenaRow(ABAtenaEntity.YUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIYUBINNO)
                '*履歴番号 000001 2003/09/11 修正開始
                'csAtenaRow(ABAtenaEntity.JUSHOCD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD)
                csAtenaRow(ABAtenaEntity.JUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD), String)
                '*履歴番号 000001 2003/09/11 修正終了
                csAtenaRow(ABAtenaEntity.JUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO)
                '*履歴番号 000031 2007/01/30 修正開始
                ' 番地情報から番地コードを取得
                '*履歴番号 000038 2009/04/07 修正開始
                strBanchiCD = m_cBanchiCDHenshuB.CreateBanchiCD(CStr(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)))
                'strBanchiCD = m_crBanchiCdMstB.GetBanchiCd(CStr(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)), strMotoBanchiCD, True)
                '' 取得した番地コード配列にNothingの項目がある場合はString.Emptyをセットする
                'For intLoop = 0 To strBanchiCD.Length - 1
                '    If (IsNothing(strBanchiCD(intLoop))) Then
                '        strBanchiCD(intLoop) = String.Empty
                '    End If
                'Next
                '*履歴番号 000038 2009/04/07 修正終了
                csAtenaRow(ABAtenaEntity.BANCHICD1) = strBanchiCD(0)
                csAtenaRow(ABAtenaEntity.BANCHICD2) = strBanchiCD(1)
                csAtenaRow(ABAtenaEntity.BANCHICD3) = strBanchiCD(2)
                'csAtenaRow(ABAtenaEntity.BANCHICD1) = String.Empty
                'csAtenaRow(ABAtenaEntity.BANCHICD2) = String.Empty
                'csAtenaRow(ABAtenaEntity.BANCHICD3) = String.Empty
                '*履歴番号 000031 2007/01/30 修正終了
                csAtenaRow(ABAtenaEntity.BANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)
                csAtenaRow(ABAtenaEntity.KATAGAKIFG) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKICD) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI)

                '*履歴番号 000037 2008/05/12 追加開始
                ' 管内管外区分：管外にセット    ※コメント:転出予定住所が存在する場合は管外に設定する。
                csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "2"
                '*履歴番号 000037 2008/05/12 追加終了

            Else
                ' ・両方も無い場合は、住基住所欄からセット
                csAtenaRow(ABAtenaEntity.YUBINNO) = csJukiDataRow(ABJukiData.JUKIYUBINNO)
                '*履歴番号 000001 2003/09/11 修正開始
                'csAtenaRow(ABAtenaEntity.JUSHOCD) = csJukiDataRow(ABJukiData.JUKIJUSHOCD)
                csAtenaRow(ABAtenaEntity.JUSHOCD) = CType(csJukiDataRow(ABJukiData.JUKIJUSHOCD), String).RPadLeft(13)
                '*履歴番号 000001 2003/09/11 修正終了
                csAtenaRow(ABAtenaEntity.JUSHO) = csJukiDataRow(ABJukiData.JUKIJUSHO)
                csAtenaRow(ABAtenaEntity.BANCHICD1) = csJukiDataRow(ABJukiData.JUKIBANCHICD1)
                csAtenaRow(ABAtenaEntity.BANCHICD2) = csJukiDataRow(ABJukiData.JUKIBANCHICD2)
                csAtenaRow(ABAtenaEntity.BANCHICD3) = csJukiDataRow(ABJukiData.JUKIBANCHICD3)
                csAtenaRow(ABAtenaEntity.BANCHI) = csJukiDataRow(ABJukiData.JUKIBANCHI)
                csAtenaRow(ABAtenaEntity.KATAGAKIFG) = csJukiDataRow(ABJukiData.JUKIKATAGAKIFG)
                csAtenaRow(ABAtenaEntity.KATAGAKICD) = csJukiDataRow(ABJukiData.JUKIKATAGAKICD).ToString.Trim.RPadLeft(20)
                csAtenaRow(ABAtenaEntity.KATAGAKI) = csJukiDataRow(ABJukiData.JUKIKATAGAKI)

                '*履歴番号 000037 2008/05/12 追加開始
                ' 管内管外区分：管内にセット    ※コメント:転出確定住所、転出予定住所が存在しない場合は管内に設定する。
                csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "1"
                '*履歴番号 000037 2008/05/12 追加終了

            End If
            ' ・連絡先１～改正年月日
            csAtenaRow(ABAtenaEntity.RENRAKUSAKI1) = csJukiDataRow(ABJukiData.RENRAKUSAKI1)
            csAtenaRow(ABAtenaEntity.RENRAKUSAKI2) = csJukiDataRow(ABJukiData.RENRAKUSAKI2)
            '*履歴番号 000001 2003/09/11 修正開始
            'csAtenaRow(ABAtenaEntity.HON_ZJUSHOCD) = csJukiDataRow(ABJukiData.HON_ZJUSHOCD)
            csAtenaRow(ABAtenaEntity.HON_ZJUSHOCD) = CType(csJukiDataRow(ABJukiData.HON_ZJUSHOCD), String)
            '*履歴番号 000001 2003/09/11 修正終了
            csAtenaRow(ABAtenaEntity.HON_JUSHO) = csJukiDataRow(ABJukiData.HON_JUSHO)
            csAtenaRow(ABAtenaEntity.HONSEKIBANCHI) = csJukiDataRow(ABJukiData.HON_BANCHI)
            csAtenaRow(ABAtenaEntity.HITTOSH) = csJukiDataRow(ABJukiData.HITTOSHA)
            csAtenaRow(ABAtenaEntity.CKINIDOYMD) = csJukiDataRow(ABJukiData.CKINIDOYMD)
            csAtenaRow(ABAtenaEntity.CKINJIYUCD) = csJukiDataRow(ABJukiData.CKINJIYUCD)
            csAtenaRow(ABAtenaEntity.CKINJIYU) = csJukiDataRow(ABJukiData.CKINJIYU)
            csAtenaRow(ABAtenaEntity.CKINTDKDYMD) = csJukiDataRow(ABJukiData.CKINTDKDYMD)
            csAtenaRow(ABAtenaEntity.CKINTDKDTUCIKB) = csJukiDataRow(ABJukiData.CKINTDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.TOROKUIDOYMD) = csJukiDataRow(ABJukiData.TOROKUIDOYMD)
            csAtenaRow(ABAtenaEntity.TOROKUIDOWMD) = csJukiDataRow(ABJukiData.TOROKUIDOWMD)
            csAtenaRow(ABAtenaEntity.TOROKUJIYUCD) = csJukiDataRow(ABJukiData.TOROKUJIYUCD)
            csAtenaRow(ABAtenaEntity.TOROKUJIYU) = csJukiDataRow(ABJukiData.TOROKUJIYU)
            csAtenaRow(ABAtenaEntity.TOROKUTDKDYMD) = csJukiDataRow(ABJukiData.TOROKUTDKDYMD)
            csAtenaRow(ABAtenaEntity.TOROKUTDKDWMD) = csJukiDataRow(ABJukiData.TOROKUTDKDWMD)
            csAtenaRow(ABAtenaEntity.TOROKUTDKDTUCIKB) = csJukiDataRow(ABJukiData.TOROKUTDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.JUTEIIDOYMD) = csJukiDataRow(ABJukiData.JUTEIIDOYMD)
            csAtenaRow(ABAtenaEntity.JUTEIIDOWMD) = csJukiDataRow(ABJukiData.JUTEIIDOWMD)
            csAtenaRow(ABAtenaEntity.JUTEIJIYUCD) = csJukiDataRow(ABJukiData.JUTEIJIYUCD)
            csAtenaRow(ABAtenaEntity.JUTEIJIYU) = csJukiDataRow(ABJukiData.JUTEIJIYU)
            csAtenaRow(ABAtenaEntity.JUTEITDKDYMD) = csJukiDataRow(ABJukiData.JUTEITDKDYMD)
            csAtenaRow(ABAtenaEntity.JUTEITDKDWMD) = csJukiDataRow(ABJukiData.JUTEITDKDWMD)
            csAtenaRow(ABAtenaEntity.JUTEITDKDTUCIKB) = csJukiDataRow(ABJukiData.JUTEITDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.SHOJOIDOYMD) = csJukiDataRow(ABJukiData.SHOJOIDOYMD)
            csAtenaRow(ABAtenaEntity.SHOJOJIYUCD) = csJukiDataRow(ABJukiData.SHOJOJIYUCD)
            csAtenaRow(ABAtenaEntity.SHOJOJIYU) = csJukiDataRow(ABJukiData.SHOJOJIYU)
            csAtenaRow(ABAtenaEntity.SHOJOTDKDYMD) = csJukiDataRow(ABJukiData.SHOJOTDKDYMD)
            csAtenaRow(ABAtenaEntity.SHOJOTDKDTUCIKB) = csJukiDataRow(ABJukiData.SHOJOTDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIIDOYMD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIIDOYMD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIIDOYMD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIIDOYMD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTITSUCHIYMD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTITUCIYMD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUNYURIYUCD) = csJukiDataRow(ABJukiData.TENSHUTSUNYURIYUCD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUNYURIYU) = csJukiDataRow(ABJukiData.TENSHUTSUNYURIYU)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_YUBINNO) = csJukiDataRow(ABJukiData.TENUMAEJ_YUBINNO)
            '*履歴番号 000001 2003/09/11 修正開始
            'csAtenaRow(ABAtenaEntity.TENUMAEJ_ZJUSHOCD) = csJukiDataRow(ABJukiData.TENUMAEJ_ZJUSHOCD)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_ZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENUMAEJ_ZJUSHOCD), String)
            '*履歴番号 000001 2003/09/11 修正終了
            csAtenaRow(ABAtenaEntity.TENUMAEJ_JUSHO) = csJukiDataRow(ABJukiData.TENUMAEJ_JUSHO)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_BANCHI) = csJukiDataRow(ABJukiData.TENUMAEJ_BANCHI)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_KATAGAKI) = csJukiDataRow(ABJukiData.TENUMAEJ_KATAGAKI)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_STAINUSMEI) = csJukiDataRow(ABJukiData.TENUMAEJ_STAINUSMEI)
            '* 履歴番号 000063 2024/02/06 修正開始
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIYUBINNO)
            ''*履歴番号 000001 2003/09/11 修正開始
            ''csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD), String).RPadLeft(13)
            ''*履歴番号 000001 2003/09/11 修正終了
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI)

            '住基データ.処理事由コード＝45（転入通知受理）の場合
            If (csJukiDataRow(ABJukiData.SHORIJIYUCD).ToString() = ABEnumDefine.ABJukiShoriJiyuType.TennyuTsuchiJuri.GetHashCode.ToString("00")) Then
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIYUBINNO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD), String)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI)
            Else
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIYUBINNO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD), String)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI)
            End If
            '* 履歴番号 000063 2024/02/06 修正終了
            csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEISTAINUSMEI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISTAINUSMEI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIYUBINNO)
            '*履歴番号 000001 2003/09/11 修正開始
            'csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIZJUSHOCD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD), String)
            '*履歴番号 000001 2003/09/11 修正終了
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTISTAINUSMEI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISTAINUSMEI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIMITDKFG) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIMITDKFG)
            csAtenaRow(ABAtenaEntity.BIKOYMD) = csJukiDataRow(ABJukiData.BIKOYMD)
            csAtenaRow(ABAtenaEntity.BIKO) = csJukiDataRow(ABJukiData.BIKO)
            csAtenaRow(ABAtenaEntity.BIKOTENSHUTSUKKTIJUSHOFG) = csJukiDataRow(ABJukiData.BIKOTENSHUTSUKKTIJUSHOFG)
            csAtenaRow(ABAtenaEntity.HANNO) = csJukiDataRow(ABJukiData.HANNO)
            csAtenaRow(ABAtenaEntity.KAISEIATOFG) = csJukiDataRow(ABJukiData.KAISEIATOFG)
            csAtenaRow(ABAtenaEntity.KAISEIMAEFG) = csJukiDataRow(ABJukiData.KAISEIMAEFG)
            csAtenaRow(ABAtenaEntity.KAISEIYMD) = csJukiDataRow(ABJukiData.KAISEIYMD)

            ' ・行政区コード～地区名３
            ' 　住民種別の下１桁が”8”（転出者）でない場合、住基行政区～住基地区名３をセット			
            If ((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").RSubstring(1, 1) <> "8") Then
                csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
                csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
                csAtenaRow(ABAtenaEntity.CHIKUCD1) = csJukiDataRow(ABJukiData.JUKICHIKUCD1)
                csAtenaRow(ABAtenaEntity.CHIKUMEI1) = csJukiDataRow(ABJukiData.JUKICHIKUMEI1)
                '*履歴番号 000002 2003/09/18 修正開始
                'csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                'csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
                csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD2)
                csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI2)
                '*履歴番号 000002 2003/09/18 修正終了
                csAtenaRow(ABAtenaEntity.CHIKUCD3) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                csAtenaRow(ABAtenaEntity.CHIKUMEI3) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
            Else
                ' 住民種別の下１桁が”8”（転出者）の場合、管理情報（行政区初期化～地区３）を見て、
                ' クリアになっている場合は、セットしない
                If (m_strGyosekuInit.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = String.Empty
                    csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = String.Empty
                Else
                    '*履歴番号 000021 2005/12/12 修正開始
                    ''csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
                    ''csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
                    If m_strTenshutsuGyoseikuCD.Trim = String.Empty Then
                        ' クリアしない場合で転出者用の行政区ＣＤが設定されていない場合は
                        ' そのまま住基側のデータを設定する。
                        csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
                        csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
                    Else
                        ' クリアしない場合で転出者用の行政区ＣＤが設定されている場合は
                        ' 行政区ＣＤマスタより行政区名称を取得し、設定する。
                        csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = m_strTenshutsuGyoseikuCD.RPadLeft(9, " "c)
                        '*履歴番号 000022 2005/12/15 修正開始
                        csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = String.Empty
                        'csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = m_strTenshutsuGyoseikuMei
                        '*履歴番号 000022 2005/12/15 修正終了
                    End If
                    '*履歴番号 000021 2005/12/12 修正終了
                End If
                If (m_strChiku1Init.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.CHIKUCD1) = String.Empty
                    csAtenaRow(ABAtenaEntity.CHIKUMEI1) = String.Empty
                Else
                    csAtenaRow(ABAtenaEntity.CHIKUCD1) = csJukiDataRow(ABJukiData.JUKICHIKUCD1)
                    csAtenaRow(ABAtenaEntity.CHIKUMEI1) = csJukiDataRow(ABJukiData.JUKICHIKUMEI1)
                End If
                If (m_strChiku2Init.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.CHIKUCD2) = String.Empty
                    csAtenaRow(ABAtenaEntity.CHIKUMEI2) = String.Empty
                Else
                    '*履歴番号 000002 2003/09/18 修正開始
                    'csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                    'csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
                    csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD2)
                    csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI2)
                    '*履歴番号 000002 2003/09/18 修正終了
                End If
                If (m_strChiku3Init.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.CHIKUCD3) = String.Empty
                    csAtenaRow(ABAtenaEntity.CHIKUMEI3) = String.Empty
                Else
                    csAtenaRow(ABAtenaEntity.CHIKUCD3) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                    csAtenaRow(ABAtenaEntity.CHIKUMEI3) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
                End If
            End If

            ' ・投票区コード～在留終了年月日
            csAtenaRow(ABAtenaEntity.TOHYOKUCD) = csJukiDataRow(ABJukiData.TOHYOKUCD).ToString.RPadLeft(5)
            csAtenaRow(ABAtenaEntity.SHOGAKKOKUCD) = csJukiDataRow(ABJukiData.SHOGAKKOKUCD)
            csAtenaRow(ABAtenaEntity.CHUGAKKOKUCD) = csJukiDataRow(ABJukiData.CHUGAKKOKUCD)
            csAtenaRow(ABAtenaEntity.HOGOSHAJUMINCD) = csJukiDataRow(ABJukiData.HOGOSHAJUMINCD)
            csAtenaRow(ABAtenaEntity.KANJIHOGOSHAMEI) = csJukiDataRow(ABJukiData.KANJIHOGOSHAMEI)
            csAtenaRow(ABAtenaEntity.KANAHOGOSHAMEI) = csJukiDataRow(ABJukiData.KANAHOGOSHAMEI)
            csAtenaRow(ABAtenaEntity.KIKAYMD) = csJukiDataRow(ABJukiData.KIKAYMD)
            csAtenaRow(ABAtenaEntity.KARIIDOKB) = csJukiDataRow(ABJukiData.KARIIDOKB)
            csAtenaRow(ABAtenaEntity.SHORITEISHIKB) = csJukiDataRow(ABJukiData.SHORITEISHIKB)
            csAtenaRow(ABAtenaEntity.SHORIYOKUSHIKB) = csJukiDataRow(ABJukiData.SHORIYOKUSHIKB)
            csAtenaRow(ABAtenaEntity.JUKIYUBINNO) = csJukiDataRow(ABJukiData.JUKIYUBINNO)
            '*履歴番号 000001 2003/09/11 修正開始
            csAtenaRow(ABAtenaEntity.JUKIJUSHOCD) = csJukiDataRow(ABJukiData.JUKIJUSHOCD)
            'csAtenaRow(ABAtenaEntity.JUKIJUSHOCD) = CType(csJukiDataRow(ABJukiData.JUKIJUSHOCD), String).PadLeft(11)
            '*履歴番号 000001 2003/09/11 修正終了
            csAtenaRow(ABAtenaEntity.JUKIJUSHO) = csJukiDataRow(ABJukiData.JUKIJUSHO)
            csAtenaRow(ABAtenaEntity.JUKIBANCHICD1) = csJukiDataRow(ABJukiData.JUKIBANCHICD1)
            csAtenaRow(ABAtenaEntity.JUKIBANCHICD2) = csJukiDataRow(ABJukiData.JUKIBANCHICD2)
            csAtenaRow(ABAtenaEntity.JUKIBANCHICD3) = csJukiDataRow(ABJukiData.JUKIBANCHICD3)
            csAtenaRow(ABAtenaEntity.JUKIBANCHI) = csJukiDataRow(ABJukiData.JUKIBANCHI)
            csAtenaRow(ABAtenaEntity.JUKIKATAGAKIFG) = csJukiDataRow(ABJukiData.JUKIKATAGAKIFG)
            csAtenaRow(ABAtenaEntity.JUKIKATAGAKICD) = csJukiDataRow(ABJukiData.JUKIKATAGAKICD).ToString.Trim.RPadLeft(20)
            csAtenaRow(ABAtenaEntity.JUKIKATAGAKI) = csJukiDataRow(ABJukiData.JUKIKATAGAKI)
            csAtenaRow(ABAtenaEntity.JUKIGYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
            csAtenaRow(ABAtenaEntity.JUKIGYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
            csAtenaRow(ABAtenaEntity.JUKICHIKUCD1) = csJukiDataRow(ABJukiData.JUKICHIKUCD1)
            csAtenaRow(ABAtenaEntity.JUKICHIKUMEI1) = csJukiDataRow(ABJukiData.JUKICHIKUMEI1)
            csAtenaRow(ABAtenaEntity.JUKICHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD2)
            csAtenaRow(ABAtenaEntity.JUKICHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI2)
            csAtenaRow(ABAtenaEntity.JUKICHIKUCD3) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
            csAtenaRow(ABAtenaEntity.JUKICHIKUMEI3) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
            'csAtenaRow(ABAtenaEntity.KAOKUSHIKIKB) = String.Empty
            'csAtenaRow(ABAtenaEntity.BIKOZEIMOKU) = String.Empty
            csAtenaRow(ABAtenaEntity.KOKUSEKICD) = csJukiDataRow(ABJukiData.KOKUSEKICD)
            csAtenaRow(ABAtenaEntity.KOKUSEKI) = csJukiDataRow(ABJukiData.KOKUSEKI)
            csAtenaRow(ABAtenaEntity.ZAIRYUSKAKCD) = csJukiDataRow(ABJukiData.ZAIRYUSKAKCD)
            csAtenaRow(ABAtenaEntity.ZAIRYUSKAK) = csJukiDataRow(ABJukiData.ZAIRYUSKAK)
            csAtenaRow(ABAtenaEntity.ZAIRYUKIKAN) = csJukiDataRow(ABJukiData.ZAIRYUKIKAN)
            csAtenaRow(ABAtenaEntity.ZAIRYU_ST_YMD) = csJukiDataRow(ABJukiData.ZAIRYU_ST_YMD)
            csAtenaRow(ABAtenaEntity.ZAIRYU_ED_YMD) = csJukiDataRow(ABJukiData.ZAIRYU_ED_YMD)

            '* 履歴番号 000044 2011/11/09 追加開始
            If ((blnJukiUmu) AndAlso (csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).Rows.Count > 0)) Then
                '住基が存在する且つ住基付随情報が存在する時、０番目を取得
                csAtenaFzyRow = csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).Rows(0)
            Else
                '存在しない時、空行取得
                csAtenaFzyRow = csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).NewRow
                Me.ClearAtenaFZY(csAtenaFzyRow)
            End If

            '宛名・住基よりデータ設定
            csAtenaFzyRow = Me.SetAtenaFzy(csAtenaFzyRow, csAtenaRow, csJukiDataRow)
            '* 履歴番号 000044 2011/11/09 追加終了

            '宛名標準
            If ((blnJukiUmu) AndAlso (csAtenaHyojunEntity.Tables(ABAtenaHyojunEntity.TABLE_NAME).Rows.Count > 0)) Then
                '住基が存在する且つ住基標準情報が存在する時、０番目を取得
                csAtenaHyojunRow = csAtenaHyojunEntity.Tables(ABAtenaHyojunEntity.TABLE_NAME).Rows(0)
            Else
                '存在しない時、空行取得
                csAtenaHyojunRow = csAtenaHyojunEntity.Tables(ABAtenaHyojunEntity.TABLE_NAME).NewRow
                Me.ClearAtenaHyojun(csAtenaHyojunRow)
            End If

            '宛名・住基よりデータ設定
            csAtenaHyojunRow = Me.SetAtenaHyojun(csAtenaHyojunRow, csAtenaRow, csJukiDataRow)

            '宛名付随標準
            If ((blnJukiUmu) AndAlso (csAtenaFzyHyojunEntity.Tables(ABAtenaFZYHyojunEntity.TABLE_NAME).Rows.Count > 0)) Then
                '住基が存在する且つ住基標準情報が存在する時、０番目を取得
                csAtenaFzyHyojunRow = csAtenaFzyHyojunEntity.Tables(ABAtenaFZYHyojunEntity.TABLE_NAME).Rows(0)
            Else
                '存在しない時、空行取得
                csAtenaFzyHyojunRow = csAtenaFzyHyojunEntity.Tables(ABAtenaFZYHyojunEntity.TABLE_NAME).NewRow
                Me.ClearAtenafzyHyojun(csAtenaFzyHyojunRow)
            End If

            '宛名・住基よりデータ設定
            csAtenaFzyHyojunRow = Me.SetAtenaFzyHyojun(csAtenaFzyHyojunRow, csAtenaRow, csJukiDataRow)

            '---------------------------------------------------------------------------------------
            ' 6. 宛名マスタの更新
            '　　　　　直近の住基データが存在している場合は修正、していなければ追加となる。
            '---------------------------------------------------------------------------------------

            ' 住基有りＦＬＧが”1”の時は、宛名マスタの更新を行なう
            If (blnJukiUmu) Then
                '* 履歴番号 000044 2011/11/09 修正開始
                'intCount = m_cAtenaB.UpdateAtenaB(csAtenaRow)
                'If (intCount <> 1) Then
                '    ' エラー定義を取得（該当データは他で更新されてしまいました。再度･･･：宛名）
                '    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                '    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                '    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名", objErrorStruct.m_strErrorCode)
                'End If

                If (csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).Rows.Count > 0) AndAlso
                    (csAtenaHyojunEntity.Tables(ABAtenaHyojunEntity.TABLE_NAME).Rows.Count > 0) AndAlso
                    (csAtenaFzyHyojunEntity.Tables(ABAtenaFZYHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                    intCount = m_cAtenaB.UpdateAtenaB(csAtenaRow, csAtenaHyojunRow, csAtenaFzyRow, csAtenaFzyHyojunRow, False)
                    If (intCount <> 1) Then
                        '* 履歴番号 000047 2011/12/26 追加開始
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        '* 履歴番号 000047 2011/12/26 追加終了
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名", objErrorStruct.m_strErrorCode)
                    Else
                        '何もしない
                    End If
                Else
                    '宛名
                    intCount = m_cAtenaB.UpdateAtenaB(csAtenaRow)
                    If (intCount <> 1) Then
                        '* 履歴番号 000047 2011/12/26 追加開始
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        '* 履歴番号 000047 2011/12/26 追加終了
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名", objErrorStruct.m_strErrorCode)
                    Else
                        '何もしない
                    End If

                    '宛名標準
                    csAtenaHyojunRow(ABAtenaHyojunEntity.KOSHINNICHIJI) = csAtenaRow(ABAtenaEntity.KOSHINNICHIJI)
                    If (csAtenaFzyHyojunEntity.Tables(ABAtenaFZYHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                        m_cABAtenaHyojunB.UpdateAtenaHyojunB(csAtenaHyojunRow)
                    Else
                        m_cABAtenaHyojunB.InsertAtenaHyojunB(csAtenaHyojunRow)
                    End If

                    If (blnAfterSekobi) Then
                        '宛名付随
                        csAtenaFzyRow(ABAtenaFZYEntity.KOSHINNICHIJI) = csAtenaRow(ABAtenaEntity.KOSHINNICHIJI)
                        If (csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).Rows.Count > 0) Then
                            m_cAtenaFzyB.UpdateAtenaFZYB(csAtenaFzyRow)
                        Else
                            m_cAtenaFzyB.InsertAtenaFZYB(csAtenaFzyRow)
                        End If
                        '宛名付随標準
                        csAtenaFzyHyojunRow(ABAtenaFZYHyojunEntity.KOSHINNICHIJI) = csAtenaRow(ABAtenaEntity.KOSHINNICHIJI)
                        If (csAtenaFzyHyojunEntity.Tables(ABAtenaFZYHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                            m_cABAtenaFZYHyojunB.UpdateAtenaFZYHyojunB(csAtenaFzyHyojunRow)
                        Else
                            m_cABAtenaFZYHyojunB.InsertAtenaFZYHyojunB(csAtenaFzyHyojunRow)
                        End If
                    End If
                End If
                '* 履歴番号 000044 2011/11/09 修正終了
            Else
                ' 上記以外は、宛名マスタの追加を行なう
                csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows.Add(csAtenaRow)
                '* 履歴番号 000044 2011/11/09 修正開始
                'intCount = m_cAtenaB.InsertAtenaB(csAtenaRow)
                intCount = m_cAtenaB.InsertAtenaB(csAtenaRow, csAtenaHyojunRow, csAtenaFzyRow, csAtenaFzyHyojunRow)
                '* 履歴番号 000044 2011/11/09 修正終了
                If (intCount <> 1) Then
                    ' エラー定義を取得（既に同一データが存在します。：宛名）
                    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名", objErrorStruct.m_strErrorCode)
                End If
            End If



            '---------------------------------------------------------------------------------------
            ' 7. 宛名累積マスタの更新　（前）
            '　　　　　履歴修正の場合は、退避されていた更新前データから直近レコードを取得し、
            '　　　　　更新前データとする。
            '---------------------------------------------------------------------------------------

            '*履歴番号 000016 2005/11/01 追加開始
            '**
            '* 宛名累積（前）
            '*
            '*履歴番号 000016 2005/11/01 追加終了
            '*履歴番号 000003 2003/11/21 追加開始
            '*履歴番号 000032 2007/02/15 追加開始
            If (Not IsNothing(m_csReRirekiEntity)) AndAlso
                (m_csReRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count <> 0) Then
                ' 住基から履歴が全件渡ってくる処理の場合
                ' 更新前の宛名履歴情報から住登外優先区分＝１の直近レコードを取得
                csBeforeRirekiRows = m_csReRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Select("JUTOGAIYUSENKB='1' AND RRKED_YMD='99999999'")
                ' 処理日時を取得
                StrShoriNichiji = m_cfRdbClass.GetSystemDate().ToString("yyyyMMddHHmmssfff")

                ' 対象レコードが存在する場合
                If (csBeforeRirekiRows.Length >= 1) Then
                    ' 宛名累積の新規レコードを取得
                    csAtenaRuisekiEntity = m_csAtenaRuisekiEntity.Clone
                    csAtenaRuisekiRow = csAtenaRuisekiEntity.Tables(ABAtenaRuisekiEntity.TABLE_NAME).NewRow
                    Me.ClearAtenaRuiseki(csAtenaRuisekiRow)

                    ' 処理日時をセット
                    csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHORINICHIJI) = StrShoriNichiji

                    ' 前後区分 = 1
                    csAtenaRuisekiRow(ABAtenaRuisekiEntity.ZENGOKB) = "1"

                    ' 履歴マスタの直近レコードをそのまま編集する
                    For Each csDataColumn In csBeforeRirekiRows(0).Table.Columns
                        csAtenaRuisekiRow(csDataColumn.ColumnName) = csBeforeRirekiRows(0)(csDataColumn.ColumnName)
                    Next csDataColumn

                    ' 処理事由ＣＤを宛名累積のRESERCEにセットする
                    '* 履歴番号 000058 2015/10/14 修正開始
                    ' 宛名履歴を作成する（特殊処理の場合に特例として）は、「41：職権修正」を固定でリザーブを登録する
                    'csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = csJukiDataRow(ABJukiData.SHORIJIYUCD)
                    If (blnIsCreateAtenaRireki = True) Then
                        csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = ABEnumDefine.ABJukiShoriJiyuType.ShokkenShusei.GetHashCode.ToString("00")
                    Else
                        csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = csJukiDataRow(ABJukiData.SHORIJIYUCD)
                    End If
                    '* 履歴番号 000058 2015/10/14 修正終了

                    ' 宛名年金を取得する
                    csAtenaNenkinEntity = m_cAtenaNenkinB.GetAtenaNenkin(strJuminCD)
                    If (csAtenaNenkinEntity.Tables(ABAtenaNenkinEntity.TABLE_NAME).Rows.Count > 0) Then
                        ' 宛名累積設定(宛名年金)
                        Me.SetNenkinToRuiseki(csAtenaNenkinEntity.Tables(ABAtenaNenkinEntity.TABLE_NAME).Rows(0), csAtenaRuisekiRow)
                    End If
                    ' 宛名国保を取得する
                    csAtenaKokuhoEntity = m_cAtenaKokuhoB.GetAtenaKokuho(strJuminCD)
                    If (csAtenaKokuhoEntity.Tables(ABAtenaKokuhoEntity.TABLE_NAME).Rows.Count > 0) Then
                        ' 宛名累積設定(宛名国保)
                        Me.SetKokuhoToRuiseki(csAtenaKokuhoEntity.Tables(ABAtenaKokuhoEntity.TABLE_NAME).Rows(0), csAtenaRuisekiRow)
                    End If

                    ' 宛名累積へ追加する
                    csAtenaRuisekiEntity.Tables(ABAtenaRuisekiEntity.TABLE_NAME).Rows.Add(csAtenaRuisekiRow)

                    ' 宛名累積マスタの追加を行う
                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRuisekiB.InsertAtenaRB(csAtenaRuisekiRow)
                    '宛名付随
                    If ((Me.m_csReRirekiFzyEntity IsNot Nothing) _
                            AndAlso (Me.m_csReRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).Rows.Count > 0)) Then
                        '退避した宛名履歴付随にデータが存在する場合
                        csSelectedRows = m_csReRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME) _
                                            .Select(String.Format("{0}='{1}' AND {2}='{3}'",
                                                                  ABAtenaRirekiFZYEntity.JUMINCD,
                                                                  csAtenaRuisekiRow(ABAtenaRuisekiEntity.JUMINCD).ToString,
                                                                  ABAtenaRirekiFZYEntity.RIREKINO,
                                                                  csAtenaRuisekiRow(ABAtenaRuisekiEntity.RIREKINO).ToString))
                        If (csSelectedRows.Count > 0) Then
                            '直近行が存在する時、累積付随の新規行を作成
                            csAtenaRuisekiFzyEntity = m_csAtenaRuisekiFzyEntity.Clone
                            csAtenaRuisekiFzyRow = csAtenaRuisekiFzyEntity.Tables(ABAtenaRuisekiFZYEntity.TABLE_NAME).NewRow
                            Me.ClearAtenaFZY(csAtenaRuisekiFzyRow)
                            '直近履歴行を退避しておく
                            csAtenaRirekiFzyRow = csSelectedRows(0)
                            csAtenaRuisekiFzyRow = Me.SetAtenaRuisekiFzy(csAtenaRuisekiFzyRow, csAtenaRirekiFzyRow, csAtenaRuisekiRow)
                        Else
                            '上記以外の時、Nothing
                            csAtenaRuisekiFzyRow = Nothing
                        End If
                    Else
                        '上記以外の時、Nothing
                        csAtenaRuisekiFzyRow = Nothing
                    End If

                    '宛履歴標準
                    If ((Me.m_csReRirekiHyojunEntity IsNot Nothing) _
                            AndAlso (Me.m_csReRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).Rows.Count > 0)) Then
                        '退避した宛名履歴標準にデータが存在する場合
                        csSelectedRows = m_csReRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME) _
                                            .Select(String.Format("{0}='{1}' AND {2}='{3}'",
                                                                  ABAtenaRirekiHyojunEntity.JUMINCD,
                                                                  csAtenaRuisekiRow(ABAtenaRuisekiEntity.JUMINCD).ToString,
                                                                  ABAtenaRirekiHyojunEntity.RIREKINO,
                                                                  csAtenaRuisekiRow(ABAtenaRuisekiEntity.RIREKINO).ToString))
                        If (csSelectedRows.Count > 0) Then
                            '直近行が存在する時、累積標準の新規行を作成
                            csAtenaRuisekiHyojunEntity = m_csAtenaRuisekiHyojunEntity.Clone
                            csAtenaRuisekiHyojunRow = csAtenaRuisekiHyojunEntity.Tables(ABAtenaRuisekiHyojunEntity.TABLE_NAME).NewRow
                            Me.ClearAtenaHyojun(csAtenaRuisekiHyojunRow)
                            '直近履歴行を退避しておく
                            csAtenaRirekiHyojunRow = csSelectedRows(0)
                            csAtenaRuisekiHyojunRow = Me.SetAtenaRuisekiHyojun(csAtenaRuisekiHyojunRow, csAtenaRirekiHyojunRow, csAtenaRuisekiRow)
                        Else
                            '上記以外の時、Nothing
                            csAtenaRuisekiHyojunRow = Nothing
                        End If
                    Else
                        '上記以外の時、Nothing
                        csAtenaRuisekiHyojunRow = Nothing
                    End If

                    '宛名履歴付随標準
                    If ((Me.m_csRERirekiFZYHyojunEntity IsNot Nothing) _
                            AndAlso (Me.m_csRERirekiFZYHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).Rows.Count > 0)) Then
                        '退避した宛名履歴付随標準にデータが存在する場合
                        csSelectedRows = m_csRERirekiFZYHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME) _
                                            .Select(String.Format("{0}='{1}' AND {2}='{3}'",
                                                                  ABAtenaRirekiFZYHyojunEntity.JUMINCD,
                                                                  csAtenaRuisekiRow(ABAtenaRuisekiEntity.JUMINCD).ToString,
                                                                  ABAtenaRirekiFZYHyojunEntity.RIREKINO,
                                                                  csAtenaRuisekiRow(ABAtenaRuisekiEntity.RIREKINO).ToString))
                        If (csSelectedRows.Count > 0) Then
                            '直近行が存在する時、累積付随標準の新規行を作成
                            csAtenaRuisekiFZYHyojunEntity = m_csAtenaRuisekiFZYHyojunEntity.Clone
                            csAtenaRuisekiFZYHyojunRow = csAtenaRuisekiFZYHyojunEntity.Tables(ABAtenaRuisekiFZYHyojunEntity.TABLE_NAME).NewRow
                            Me.ClearAtenaFZYHyojun(csAtenaRuisekiFZYHyojunRow)
                            '直近履歴行を退避しておく
                            csAtenaRirekiFZYHyojunRow = csSelectedRows(0)
                            csAtenaRuisekiFZYHyojunRow = Me.SetAtenaRuisekiFZYHyojun(csAtenaRuisekiFZYHyojunRow, csAtenaRirekiFZYHyojunRow, csAtenaRuisekiRow)
                        Else
                            '上記以外の時、Nothing
                            csAtenaRuisekiFZYHyojunRow = Nothing
                        End If
                    Else
                        '上記以外の時、Nothing
                        csAtenaRuisekiFZYHyojunRow = Nothing
                    End If

                    intCount = m_cAtenaRuisekiB.InsertAtenaRB(csAtenaRuisekiRow, csAtenaRuisekiHyojunRow, csAtenaRuisekiFzyRow, csAtenaRuisekiFZYHyojunRow)
                    '* 履歴番号 000044 2011/11/09 修正終了
                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名累積）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名累積", objErrorStruct.m_strErrorCode)
                    End If

                End If
            Else
                '*履歴番号 000032 2007/02/15 追加終了
                ' 宛名履歴マスタの住民住登外区分が１（住民）で履歴番号が一番大きいものを取得
                cSearchKey = New ABAtenaSearchKey
                cSearchKey.p_strJuminCD = strJuminCD
                csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(1, cSearchKey, "", "1", True)
                StrShoriNichiji = m_cfRdbClass.GetSystemDate().ToString("yyyyMMddHHmmssfff")
                ' データが存在する場合は、
                If (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count > 0) Then
                    csAtenaRirekiRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows(0)

                    ' 宛名累積の列を取得し、初期化する。（更新カウターは、0、それ以外は、String Empty）（共通）　			
                    ' 宛名累積より新しいRowを取得する
                    csAtenaRuisekiEntity = m_csAtenaRuisekiEntity.Clone
                    csAtenaRuisekiRow = csAtenaRuisekiEntity.Tables(ABAtenaRuisekiEntity.TABLE_NAME).NewRow
                    ' 宛名履歴を初期化する
                    Me.ClearAtenaRuiseki(csAtenaRuisekiRow)

                    ' 宛名履歴マスタより宛名累積マスタの編集を行う(共通)
                    ' 処理日時=システム日時
                    csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHORINICHIJI) = StrShoriNichiji

                    ' 前後区分 = 1
                    csAtenaRuisekiRow(ABAtenaRuisekiEntity.ZENGOKB) = "1"

                    ' それ以外の項目については、宛名マスタをそのまま編集する
                    ' 宛名履歴を宛名履歴へそのまま編集する
                    For Each csDataColumn In csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Columns
                        csAtenaRuisekiRow(csDataColumn.ColumnName) = csAtenaRirekiRow(csDataColumn)
                    Next csDataColumn

                    '*履歴番号 000015 2005/08/17 追加開始 000029 2006/04/19 修正開始
                    ' 処理事由ＣＤを宛名累積のRESERCEにセットする
                    '* 履歴番号 000058 2015/10/14 修正開始
                    ' 宛名履歴を作成する（特殊処理の場合に特例として）は、「41：職権修正」を固定でリザーブを登録する
                    'csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = csJukiDataRow(ABJukiData.SHORIJIYUCD)
                    If (blnIsCreateAtenaRireki = True) Then
                        csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = ABEnumDefine.ABJukiShoriJiyuType.ShokkenShusei.GetHashCode.ToString("00")
                    Else
                        csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = csJukiDataRow(ABJukiData.SHORIJIYUCD)
                    End If
                    '* 履歴番号 000058 2015/10/14 修正終了
                    '' 汎用ＣＤを宛名累積のRESERCEにセットする
                    'csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = csJukiDataRow(ABJukiData.HANYOCD)
                    '*履歴番号 000015 2005/08/17 追加終了 000029 2006/04/19 修正終了

                    '*履歴番号 000003 2003/11/21 追加開始
                    ' 宛名年金を取得する
                    csAtenaNenkinEntity = m_cAtenaNenkinB.GetAtenaNenkin(strJuminCD)
                    If (csAtenaNenkinEntity.Tables(ABAtenaNenkinEntity.TABLE_NAME).Rows.Count > 0) Then
                        ' 宛名累積設定(宛名年金)
                        Me.SetNenkinToRuiseki(csAtenaNenkinEntity.Tables(ABAtenaNenkinEntity.TABLE_NAME).Rows(0), csAtenaRuisekiRow)
                    End If
                    ' 宛名国保を取得する
                    csAtenaKokuhoEntity = m_cAtenaKokuhoB.GetAtenaKokuho(strJuminCD)
                    If (csAtenaKokuhoEntity.Tables(ABAtenaKokuhoEntity.TABLE_NAME).Rows.Count > 0) Then
                        ' 宛名累積設定(宛名国保)
                        Me.SetKokuhoToRuiseki(csAtenaKokuhoEntity.Tables(ABAtenaKokuhoEntity.TABLE_NAME).Rows(0), csAtenaRuisekiRow)
                    End If
                    '*履歴番号 000003 2003/11/21 追加終了

                    ' 宛名累積へ追加する
                    csAtenaRuisekiEntity.Tables(ABAtenaRuisekiEntity.TABLE_NAME).Rows.Add(csAtenaRuisekiRow)

                    '* 履歴番号 000044 2011/11/09 修正開始
                    '' 宛名累積マスタの追加を行う
                    'intCount = m_cAtenaRuisekiB.InsertAtenaRB(csAtenaRuisekiRow)

                    '宛名履歴付随データ取得
                    csAtenaRuisekiFzyEntity = m_cAtenaRirekiFzyB.GetAtenaFZYRBHoshu(csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                                  csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString,
                                                                                  String.Empty, True)
                    If (csAtenaRuisekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).Rows.Count > 0) Then
                        '直近の宛名履歴付随が存在した時、宛名累積付随を作成
                        csAtenaRuisekiFzyRow = m_csAtenaRuisekiFzyEntity.Tables(ABAtenaRuisekiFZYEntity.TABLE_NAME).NewRow
                        Me.ClearAtenaFZY(csAtenaRuisekiFzyRow)
                        '直近履歴行を退避しておく
                        csAtenaRirekiFzyRow = csAtenaRuisekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).Rows(0)
                        csAtenaRuisekiFzyRow = Me.SetAtenaRuisekiFzy(csAtenaRuisekiFzyRow, csAtenaRirekiFzyRow, csAtenaRuisekiRow)
                    Else
                        '上記以外の時、Nothing
                        csAtenaRuisekiFzyRow = Nothing
                    End If

                    '宛名履歴標準
                    csAtenaRirekiHyojunEntity = m_cABAtenaRirekiHyojunB.GetAtenaRirekiHyojunBHoshu(
                                                                                  csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                                  csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString,
                                                                                  String.Empty, True)
                    If (csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                        '直近の宛名履歴標準が存在した時、宛名累積標準を作成
                        csAtenaRuisekiHyojunRow = m_csAtenaRuisekiHyojunEntity.Tables(ABAtenaRuisekiHyojunEntity.TABLE_NAME).NewRow
                        Me.ClearAtenaHyojun(csAtenaRuisekiHyojunRow)
                        '直近履歴行を退避しておく
                        csAtenaRirekiHyojunRow = csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).Rows(0)
                        csAtenaRuisekiHyojunRow = Me.SetAtenaRuisekiHyojun(csAtenaRuisekiHyojunRow, csAtenaRirekiHyojunRow, csAtenaRuisekiRow)
                    Else
                        '上記以外の時、Nothing
                        csAtenaRuisekiHyojunRow = Nothing
                    End If

                    '宛名履歴付随標準
                    csAtenaRirekiFZYHyojunEntity = m_cABAtenaRirekiFZYHyojunB.GetAtenaRirekiFZYHyojunBHoshu(
                                                                                  csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                                  csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString,
                                                                                  String.Empty, True)
                    If (csAtenaRirekiFZYHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                        '直近の宛名履歴付随標準が存在した時、宛名累積付随標準を作成
                        csAtenaRuisekiFZYHyojunRow = m_csAtenaRuisekiFZYHyojunEntity.Tables(ABAtenaRuisekiFZYHyojunEntity.TABLE_NAME).NewRow
                        Me.ClearAtenaFZYHyojun(csAtenaRuisekiFZYHyojunRow)
                        '直近履歴行を退避しておく
                        csAtenaRirekiFZYHyojunRow = csAtenaRirekiFZYHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).Rows(0)
                        csAtenaRuisekiFZYHyojunRow = Me.SetAtenaRuisekiFZYHyojun(csAtenaRuisekiFZYHyojunRow, csAtenaRirekiFZYHyojunRow, csAtenaRuisekiRow)
                    Else
                        '上記以外の時、Nothing
                        csAtenaRuisekiFZYHyojunRow = Nothing
                    End If

                    ' 宛名累積マスタの追加を行う
                    intCount = m_cAtenaRuisekiB.InsertAtenaRB(csAtenaRuisekiRow, csAtenaRuisekiHyojunRow, csAtenaRuisekiFzyRow, csAtenaRuisekiFZYHyojunRow)
                    '* 履歴番号 000044 2011/11/09 修正終了

                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名累積）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名累積", objErrorStruct.m_strErrorCode)
                    End If
                End If
                '*履歴番号 000032 2007/02/15 追加開始
            End If
            '*履歴番号 000032 2007/02/15 追加終了
            '*履歴番号 000003 2003/11/21 追加終了



            '---------------------------------------------------------------------------------------
            ' 8. 宛名履歴マスタの更新
            '---------------------------------------------------------------------------------------

            '**
            '* 宛名履歴
            '*
            '*履歴番号 000016 2005/11/18 修正開始
            '* corresponds to VS2008 Start 2010/04/16 000043
            ''''*履歴番号 000013 2005/06/19 追加開始
            '''''履歴番号の取得
            ''''csRirekiNoEntity = m_cAtenaRirekiB.GetRirekiNo(strJuminCD)

            ''''' 宛名マスタより宛名履歴マスタの編集を行う(共通)
            ''''' 履歴番号　　　新規のばあいは、0001　　修正の場合は、宛名履歴マスタの最終番号にＡＤＤ　１する
            ''''' それ以外の項目については、宛名マスタをそのまま編集する			
            ''''If (csRirekiNoEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count = 0) Then
            ''''    ' 履歴番号
            ''''    strMaxRirekino = "0001"
            ''''Else
            ''''    ' 履歴番号(先頭行の履歴番号+1)
            ''''    strMaxRirekino = CType((CType(csRirekiNoEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows(0).Item(ABAtenaRirekiEntity.RIREKINO), Integer) + 1), String).PadLeft(4, "0"c)
            ''''End If
            ''''*履歴番号 000013 2005/06/19 追加修正
            '* corresponds to VS2008 End 2010/04/16 000043


            '---------------------------------------------------------------------------------------
            ' 8-1. 該当の履歴データを全件取得する
            '---------------------------------------------------------------------------------------

            cSearchKey = New ABAtenaSearchKey
            cSearchKey.p_strJuminCD = strJuminCD
            csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(999, cSearchKey, "", True)

            '* 履歴番号 000044 2011/11/09 追加開始
            '宛名履歴付随の全レコードを取得
            csAtenaRirekiFzyEntity = m_cAtenaRirekiFzyB.GetAtenaFZYRBHoshu(strJuminCD, String.Empty, String.Empty, True)
            '* 履歴番号 000044 2011/11/09 追加終了

            '宛名履歴標準
            csAtenaRirekiHyojunEntity = m_cABAtenaRirekiHyojunB.GetAtenaRirekiHyojunBHoshu(strJuminCD, String.Empty, String.Empty, True)

            '宛名履歴付随標準
            csAtenaRirekiFZYHyojunEntity = m_cABAtenaRirekiFZYHyojunB.GetAtenaRirekiFZYHyojunBHoshu(strJuminCD, String.Empty, String.Empty, True)

            ' 履歴番号の取得
            If (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count = 0) Then
                ' 履歴番号
                strMaxRirekino = "0001"
            Else
                ' 履歴番号
                '*履歴番号 000023 2005/12/16 修正開始
                ' 履歴番号降順で並べ替えて最大履歴番号＋１を取得する
                ''strMaxRirekino = CType(csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count + 1, String).PadLeft(4, "0"c)
                csRirekiNORows = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Select("", ABAtenaRirekiEntity.RIREKINO + " DESC")
                intMaxRirekiNO = CType(csRirekiNORows(0)(ABAtenaRirekiEntity.RIREKINO), Integer) + 1
                strMaxRirekino = CType(intMaxRirekiNO, String).RPadLeft(4, "0"c)
                '*履歴番号 000023 2005/12/16 修正終了
            End If
            '*履歴番号 000016 2005/11/18 修正終了


            '---------------------------------------------------------------------------------------
            ' 8-2. 直前の履歴データを更新する
            '　　　　　住基データが存在している場合のみ行う。
            '---------------------------------------------------------------------------------------

            ' ・住基有りＦＬＧが”1”の時は、住基優先で指定年月日に99999999で宛名履歴マスタをよみ履歴終了年月日をシステ、
            ' 　ム日付の前日をセットし、宛名履歴マスタ更新を実行する
            If (blnJukiUmu) Then

                '*履歴番号 000016 2005/11/01 修正開始
                '* コメント**********************************************************************************************
                '* ＜宛名履歴マスタ更新方法＞                                                                           *
                '* 住基との連携方法を直近データか履歴全件かの２パターンでしか行わないようにしたので、以下を修正します。 *
                '* 住基より【処理事由ＣＤ】項目追加してもらったので、それを見て特殊処理修正(03)の時は、宛名履歴マスタの *
                '* 直近データを更新する。それ以外のときは直近レコードの終了年月日を更新→新規レコード追加となります。   *
                '********************************************************************************************************
                '* corresponds to VS2008 Start 2010/04/16 000043
                ''''*履歴番号 000013 2005/06/19 追加開始
                ''''' 日付クラスの必要な設定を行う
                ''''m_cfDateClass.p_enDateSeparator = UFDateSeparator.None
                ''''m_cfDateClass.p_enEraType = UFEraType.Number

                '''''履歴データ全件取得
                ''''cSearchKey = New ABAtenaSearchKey()
                ''''cSearchKey.p_strJuminCD = strJuminCD
                ''''cSearchKey.p_strJuminYuseniKB = "1"
                ''''csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(999, cSearchKey, "", True)

                '''''履歴番号を昇順に並び替え
                ''''csSortRirekiDataRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Select("", ABAtenaRirekiEntity.RIREKINO)

                '''''履歴データがなくなるまで繰返す
                ''''' データ分繰り返す
                ''''For Each csDataRow In csSortRirekiDataRow
                ''''    'ＤＢにある開始年月日と同じかそれ以上のもの　かつ　ＤＢの開始年月日が終了年月日より過去のもの
                ''''    If (CType(csJukiDataRow(ABAtenaRirekiEntity.RRKST_YMD), String) <= CType(csDataRow(ABAtenaRirekiEntity.RRKST_YMD), String)) AndAlso _
                ''''        (CType(csDataRow(ABAtenaRirekiEntity.RRKST_YMD), String) < CType(csDataRow(ABAtenaRirekiEntity.RRKED_YMD), String)) Then

                ''''        ' 宛名マスタを宛名履歴へそのまま編集する
                ''''        For Each csDataColumn In csAtenaRow.Table.Columns
                ''''            csAtenaRirekiRow(csDataColumn.ColumnName) = csAtenaRow(csDataColumn)
                ''''        Next csDataColumn

                ''''        '追加用レコードの編集を行う
                ''''        csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = strMaxRirekino                                         '履歴番号
                ''''        csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINJUTOGAIKB) = csDataRow(ABAtenaRirekiEntity.JUMINJUTOGAIKB)   '住民住登外区分
                ''''        csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINYUSENIKB) = csDataRow(ABAtenaRirekiEntity.JUMINYUSENIKB)     '住民優先区分
                ''''        csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = csDataRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB)   '住登外優先区分
                ''''        csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD) = csDataRow(ABAtenaRirekiEntity.RRKST_YMD)             '開始年月日
                ''''        csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD) = csDataRow(ABAtenaRirekiEntity.RRKED_YMD)             '終了年月日

                ''''        '履歴番号に＋１
                ''''        strMaxRirekino = CType(CType(strMaxRirekino, Integer) + 1, String).PadLeft(4, "0"c)

                ''''        ' 宛名履歴マスタの追加を行う
                ''''        'csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Add(csAtenaRirekiRow)
                ''''        intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)
                ''''        If (intCount <> 1) Then
                ''''            ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                ''''            m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                ''''            objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                ''''            Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                ''''        End If

                ''''        '終了年月日に開始年月日の前日をセットする
                ''''        m_cfDateClass.p_strDateValue = CType(csDataRow(ABAtenaRirekiEntity.RRKST_YMD), String)
                ''''        csDataRow(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)

                ''''        '宛名履歴マスタの修正を行う
                ''''        intCount = m_cAtenaRirekiB.UpdateAtenaRB(csDataRow)
                ''''        If (intCount <> 1) Then
                ''''            ' エラー定義を取得（該当データは他で更新されてしまいました。再度･･･：宛名履歴）
                ''''            m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                ''''            objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                ''''            Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                ''''        End If

                ''''        '特殊処理フラグをTrueにする
                ''''        blnTokushuFG = True

                ''''    End If
                ''''Next
                '''''*履歴番号 000013 2005/06/19 追加終了
                '*履歴番号 000016 2005/11/18 削除開始
                '''' 日付クラスの必要な設定を行う
                ''''m_cfDateClass.p_enDateSeparator = UFDateSeparator.None
                ''''m_cfDateClass.p_enEraType = UFEraType.Number
                '*履歴番号 000016 2005/11/18 削除終了
                '* corresponds to VS2008 End 2010/04/16 000043

                '---------------------------------------------------------------------------------------
                ' 8-2-1. 特殊処理の場合は、今ある直近レコードを上書きする。
                '---------------------------------------------------------------------------------------

                '*履歴番号 000041 2009/06/18 修正開始
                '*履歴番号 000018 2005/11/27 修正開始
                '* corresponds to VS2008 Start 2010/04/16 000043
                '''' 処理事由コードが"03"(特殊処理修正)の場合は直近レコードの修正→更新のみを行う
                '* corresponds to VS2008 End 2010/04/16 000043
                ''If CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "03" Then
                '' 処理事由コードが"03"(特殊処理修正)　または　"04"(住民票ＣＤ修正)の場合は
                '' 直近レコードの修正→更新のみを行う(追加せずに更新だけ)
                ' 処理事由コードが"03"(特殊処理修正)　または　"04"(住民票ＣＤ修正)の場合 または 
                ' 履歴データ全件削除が行われず かつ 処理事由コードが"08"(履歴修正)の場合は
                ' 直近レコードの修正→更新のみを行う(追加せずに更新だけ)
                'If CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "03" OrElse _
                '   CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "04" Then
                '* 履歴番号 000050 2014/06/25 修正開始
                'If CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "03" OrElse _
                '   CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "04" OrElse _
                '   (m_blnRirekiShusei = False AndAlso CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "08") Then
                '* 履歴番号 000058 2015/10/14 修正開始
                'If CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "03" OrElse _
                '   CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "04" OrElse _
                '   CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "05" OrElse _
                '   (m_blnRirekiShusei = False AndAlso CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "08") Then
                If (blnIsCreateAtenaRireki = False _
                    AndAlso (CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "03" OrElse
                             CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "04" OrElse
                             CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "05" OrElse
                             (m_blnRirekiShusei = False AndAlso CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "08"))) Then
                    '* 履歴番号 000058 2015/10/14 修正終了
                    '* 履歴番号 000050 2014/06/25 修正終了
                    '*履歴番号 000018 2005/11/27 修正終了
                    '*履歴番号 000041 2009/06/18 修正終了
                    ' 宛名履歴データ抽出(住民住登外区分が"1"で履歴番号最大降順で並び替え)
                    csUpRirekiRows = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Select("JUMINJUTOGAIKB = '1'", ABAtenaRirekiEntity.RIREKINO + " DESC")

                    ' 直近レコードの取得
                    ' 特殊処理修正の場合は必ず履歴マスタにあるはずなので無い場合は考慮しない
                    csUpRirekiRow = csUpRirekiRows(0)

                    ' 直近レコードを修正して更新する
                    ' 宛名マスタを宛名履歴へそのまま編集する
                    For Each csDataColumn In csAtenaRow.Table.Columns
                        '*履歴番号 000030 2006/08/10 修正開始
                        ' 履歴開始年月日は更新しない
                        ''csUpRirekiRow(csDataColumn.ColumnName) = csAtenaRow(csDataColumn)
                        If csDataColumn.ColumnName <> ABAtenaEntity.RRKST_YMD Then
                            csUpRirekiRow(csDataColumn.ColumnName) = csAtenaRow(csDataColumn)
                        End If
                        '*履歴番号 000030 2006/08/10 修正終了
                    Next csDataColumn

                    '* 履歴番号 000044 2011/11/09 修正開始
                    '' 宛名履歴マスタを更新する
                    'intCount = m_cAtenaRirekiB.UpdateAtenaRB(csUpRirekiRow)

                    '宛名履歴の直近行から宛名履歴付随の直近行検索
                    csSelectedRows = csAtenaRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).Select(
                                                String.Format("{0}='{1}' AND {2}='{3}'",
                                                              ABAtenaRirekiFZYEntity.JUMINCD,
                                                              csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                              ABAtenaRirekiFZYEntity.RIREKINO,
                                                              csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString))
                    If (csSelectedRows.Count > 0) Then
                        '検索結果が存在する時、宛名付随から宛名履歴付随にデータを写す
                        csAtenaRirekiFzyTokushuRow = csSelectedRows(0)
                        csAtenaRirekiFzyTokushuRow = Me.SetAtenaRirekiFzy(csAtenaRirekiFzyTokushuRow, csAtenaFzyRow)
                    Else

                        '上記以外の時、Nothing
                        csAtenaRirekiFzyTokushuRow = Nothing
                    End If

                    '宛名履歴標準
                    '宛名履歴の直近行から宛名履歴標準の直近行検索
                    csSelectedRows = csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).Select(
                                                String.Format("{0}='{1}' AND {2}='{3}'",
                                                              ABAtenaRirekiHyojunEntity.JUMINCD,
                                                              csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                              ABAtenaRirekiHyojunEntity.RIREKINO,
                                                              csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString))
                    If (csSelectedRows.Count > 0) Then
                        '検索結果が存在する時、宛名付随から宛名履歴付随にデータを写す
                        csAtenaRirekiHyojunTokushuRow = csSelectedRows(0)
                        csAtenaRirekiHyojunTokushuRow = Me.SetAtenaRirekiHyojun(csAtenaRirekiHyojunTokushuRow, csAtenaHyojunRow, csUpRirekiRow)
                    Else

                        '上記以外の時、Nothing
                        csAtenaRirekiHyojunTokushuRow = Nothing
                    End If

                    '宛名履歴付随標準
                    '宛名履歴の直近行から宛名履歴付随標準の直近行検索
                    csSelectedRows = csAtenaRirekiFZYHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).Select(
                                                String.Format("{0}='{1}' AND {2}='{3}'",
                                                              ABAtenaRirekiFZYHyojunEntity.JUMINCD,
                                                              csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                              ABAtenaRirekiFZYHyojunEntity.RIREKINO,
                                                              csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString))
                    If (csSelectedRows.Count > 0) Then
                        '検索結果が存在する時、宛名付随から宛名履歴付随にデータを写す
                        csAtenaRirekiFzyHyojunTokushuRow = csSelectedRows(0)
                        csAtenaRirekiFzyHyojunTokushuRow = Me.SetAtenaRirekiFZYHyojun(csAtenaRirekiFzyHyojunTokushuRow, csAtenaFzyHyojunRow)
                    Else

                        '上記以外の時、Nothing
                        csAtenaRirekiFzyHyojunTokushuRow = Nothing
                    End If

                    ' 宛名履歴マスタを更新する
                    intCount = m_cAtenaRirekiB.UpdateAtenaRB(csUpRirekiRow, csAtenaRirekiHyojunTokushuRow, csAtenaRirekiFzyTokushuRow, csAtenaRirekiFzyHyojunTokushuRow)
                    '* 履歴番号 000044 2011/11/09 修正終了

                    ' 更新件数が１件でないとエラー
                    If (intCount <> 1) Then
                        ' エラー定義を取得（該当データは他で更新されてしまいました。再度･･･：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If

                    blnTokushuFG = True
                Else
                    blnTokushuFG = False
                End If
                '*履歴番号 000016 2005/11/01 修正終了

                '---------------------------------------------------------------------------------------
                ' 8-2-2. 特殊処理以外の場合、今ある直近レコードの終了年月日を閉じる。
                '---------------------------------------------------------------------------------------

                '*履歴番号 000013 2005/06/19 修正開始
                '* corresponds to VS2008 Start 2010/04/16 000043
                '''' 日付クラスの必要な設定を行う
                '* corresponds to VS2008 End 2010/04/16 000043
                ''m_cfDateClass.p_enDateSeparator = UFDateSeparator.None
                ''m_cfDateClass.p_enEraType = UFEraType.Number
                '特殊処理の判定
                If Not blnTokushuFG Then
                    '☆宛名履歴マスタの直近レコードの終了年月日を修正して更新☆
                    '*履歴番号 000013 2005/06/19 修正終了
                    '*履歴番号 000016 2005/11/18 修正開始
                    '* corresponds to VS2008 Start 2010/04/16 000043
                    ''''cSearchKey = New ABAtenaSearchKey()
                    ''''cSearchKey.p_strJuminCD = strJuminCD
                    ''''cSearchKey.p_strJuminYuseniKB = "1"
                    ''''csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(1, cSearchKey, "99999999", True)
                    ''''If (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count > 0) Then
                    ''''    csDataRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows(0)
                    ''''    '*履歴番号 000012 2005/06/07 修正開始
                    ''''    'm_cfDateClass.p_strDateValue = m_cfRdbClass.GetSystemDate().ToString("yyyyMMdd") 'システム日付
                    ''''    m_cfDateClass.p_strDateValue = CType(csAtenaRow(ABAtenaRirekiEntity.RRKST_YMD), String)
                    ''''    '*履歴番号 000012 2005/06/07 修正終了
                    ''''    csDataRow.Item(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
                    ''''    intCount = m_cAtenaRirekiB.UpdateAtenaRB(csDataRow)
                    ''''    If (intCount <> 1) Then
                    ''''        ' エラー定義を取得（該当データは他で更新されてしまいました。再度･･･：宛名履歴）
                    ''''        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                    ''''        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                    ''''        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    ''''    End If
                    ''''End If
                    '* corresponds to VS2008 End 2010/04/16 000043
                    ' 宛名履歴データ抽出(住民優先区分が"1"で履歴終了年月日が'99999999')
                    csUpRirekiRows = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Select("JUMINYUSENIKB = '1' AND RRKED_YMD = '99999999'")

                    ' 直近レコードを取得し、アップデート
                    If csUpRirekiRows.Length > 0 Then
                        csUpRirekiRow = csUpRirekiRows(0)
                        m_cfDateClass.p_strDateValue = CType(csAtenaRow(ABAtenaRirekiEntity.RRKST_YMD), String)
                        csUpRirekiRow.Item(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
                        '* 履歴番号 000044 2011/11/09 修正開始
                        'intCount = m_cAtenaRirekiB.UpdateAtenaRB(csUpRirekiRow)

                        '直近宛名履歴データを退避データから取得
                        '* 履歴番号 000047 2011/12/26 修正開始
                        'csCkinRirekiFzyRows = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity, _
                        '                                              csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString, _
                        '                                              csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                        csCkinRirekiFzyRows = Me.GetChokkin_RirekiFzy(csAtenaRirekiFzyEntity,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                        '* 履歴番号 000047 2011/12/26 修正終了
                        '宛名履歴標準
                        csCkinRirekiHyojunRows = Me.GetChokkin_RirekiHyojun(csAtenaRirekiHyojunEntity,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)

                        '宛名履歴付随標準
                        csCkinRirekiFzyHyojunRows = Me.GetChokkin_RirekiFZYHyojun(csAtenaRirekiFZYHyojunEntity,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)

                        intCount = m_cAtenaRirekiB.UpdateAtenaRB(csUpRirekiRow, csCkinRirekiHyojunRows, csCkinRirekiFzyRows, csCkinRirekiFzyHyojunRows)
                        '* 履歴番号 000044 2011/11/09 修正終了
                        If (intCount <> 1) Then
                            ' エラー定義を取得（該当データは他で更新されてしまいました。再度･･･：宛名履歴）
                            m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                            objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                            Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                        End If
                    Else

                    End If
                    '*履歴番号 000016 2005/11/18 修正終了

                    '*履歴番号 000013 2005/06/19 修正開始
                End If
                '*履歴番号 000013 2005/06/19 修正終了
            End If

            '---------------------------------------------------------------------------------------
            ' 8-3. 直近レコードを更新する
            '　　　　　特殊処理以外の場合のみ行う。
            '---------------------------------------------------------------------------------------

            '*履歴番号 000013 2005/06/19 修正開始
            '特殊処理の判定
            If Not blnTokushuFG Then

                '---------------------------------------------------------------------------------------
                ' 8-3-1. 直前の履歴が住登外、かつ再転入の場合は直前の履歴の住登外データの終了年月日を閉じる。
                '---------------------------------------------------------------------------------------

                ' ・住民種別の下１桁が”0”（住民）でかつ住登外有りＦＬＧが”1”の時、住登外優先で指定年月日に99999999で宛名
                ' 　履歴マスタをよみ履歴終了年月日をシステム日付の前日をセットし、宛名履歴マスタ更新を実行する。
                If (((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").RSubstring(1, 1) = "0") _
                        And blnJutogaiUmu) Then
                    '*履歴番号 000016 2005/11/18 修正開始
                    ' 日付クラスの必要な設定を行う
                    '* corresponds to VS2008 Start 2010/04/16 000043
                    ''''m_cfDateClass.p_enDateSeparator = UFDateSeparator.None
                    ''''m_cfDateClass.p_enEraType = UFEraType.Number
                    ''''cSearchKey = New ABAtenaSearchKey()
                    ''''cSearchKey.p_strJuminCD = strJuminCD
                    ''''cSearchKey.p_strJutogaiYusenKB = "1"
                    ''''csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(1, cSearchKey, "99999999", True)
                    ''''If (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count > 0) Then
                    ''''    csDataRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows(0)
                    ''''    m_cfDateClass.p_strDateValue = CType(csAtenaRow(ABAtenaEntity.RRKST_YMD), String)
                    ''''    csDataRow.Item(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
                    ''''    intCount = m_cAtenaRirekiB.UpdateAtenaRB(csDataRow)
                    ''''    If (intCount <> 1) Then
                    ''''        ' エラー定義を取得（該当データは他で更新されてしまいました。再度･･･：宛名履歴）
                    ''''        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                    ''''        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                    ''''        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    ''''    End If
                    ''''End If
                    '* corresponds to VS2008 End 2010/04/16 000043
                    ' 宛名履歴データ抽出(住登外優先区分が"1"で履歴終了年月日が'99999999')
                    csUpRirekiRows = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Select("JUTOGAIYUSENKB = '1' AND RRKED_YMD = '99999999'")

                    ' 直近レコードを取得し、アップデート
                    If csUpRirekiRows.Length > 0 Then
                        csUpRirekiRow = csUpRirekiRows(0)
                        m_cfDateClass.p_strDateValue = CType(csAtenaRow(ABAtenaEntity.RRKST_YMD), String)
                        csUpRirekiRow.Item(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
                        '* 履歴番号 000044 2011/11/09 修正開始
                        'intCount = m_cAtenaRirekiB.UpdateAtenaRB(csUpRirekiRow)

                        '直近宛名履歴データを退避データから取得
                        '* 履歴番号 000047 2011/12/26 修正開始
                        'csCkinRirekiFzyRows = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity, _
                        '                                              csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString, _
                        '                                              csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                        csCkinRirekiFzyRows = Me.GetChokkin_RirekiFzy(csAtenaRirekiFzyEntity,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                        '* 履歴番号 000047 2011/12/26 修正終了

                        '宛名履歴標準
                        csCkinRirekiHyojunRows = Me.GetChokkin_RirekiHyojun(csAtenaRirekiHyojunEntity,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                        '宛名履歴付随標準
                        csCkinRirekiFzyHyojunRows = Me.GetChokkin_RirekiFZYHyojun(csAtenaRirekiFZYHyojunEntity,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                        csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)

                        intCount = m_cAtenaRirekiB.UpdateAtenaRB(csUpRirekiRow, csCkinRirekiHyojunRows, csCkinRirekiFzyRows, csCkinRirekiFzyHyojunRows)
                        '* 履歴番号 000044 2011/11/09 修正終了
                        If (intCount <> 1) Then
                            ' エラー定義を取得（該当データは他で更新されてしまいました。再度･･･：宛名履歴）
                            m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                            objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                            Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                        End If
                    Else

                    End If

                    '*履歴番号 000016 2005/11/18 修正終了
                End If

                '*履歴番号 000013 2005/06/19 修正開始
                '''' 宛名履歴マスタを該当者の全履歴を取得する
                '* corresponds to VS2008 Start 2010/04/16 000043
                ''''cSearchKey = New ABAtenaSearchKey()
                ''''cSearchKey.p_strJuminCD = strJuminCD
                ''''csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(999, cSearchKey, "", True)

                ''''' 宛名履歴の列を取得し、初期化する。（更新カウターは、0、それ以外は、String Empty）（共通）
                ''''csAtenaRirekiRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).NewRow
                ''''Me.ClearAtenaRireki(csAtenaRirekiRow)

                ''''' 宛名マスタより宛名履歴マスタの編集を行う(共通)
                ''''' 履歴番号　　　新規のばあいは、0001　　修正の場合は、宛名履歴マスタの最終番号にＡＤＤ　１する
                ''''' それ以外の項目については、宛名マスタをそのまま編集する			
                ''''If (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count = 0) Then
                ''''    ' 履歴番号
                ''''    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = "0001"
                ''''Else
                ''''    ' 履歴番号で降順に並び替え
                ''''    csAtenaRirekiRows = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Select("", ABAtenaRirekiEntity.RIREKINO + " DESC")
                ''''    ' 履歴番号(先頭行の履歴番号+1)
                ''''    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType((CType(csAtenaRirekiRows(0).Item(ABAtenaRirekiEntity.RIREKINO), Integer) + 1), String).PadLeft(4, "0"c)
                ''''End If
                '* corresponds to VS2008 End 2010/04/16 000043

                '---------------------------------------------------------------------------------------
                ' 8-3-2. 更新用の直近レコードを作成する。
                '---------------------------------------------------------------------------------------

                '宛名履歴ロウがnothingの場合はスキーマを取得する
                If csAtenaRirekiRow Is Nothing Then
                    '宛名履歴マスタのスキーマを取得する
                    csAtenaRirekiEntity = m_cfRdbClass.GetTableSchema(ABAtenaRirekiEntity.TABLE_NAME)
                    '宛名履歴ロウを新規作成する
                    csAtenaRirekiRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).NewRow()
                End If '最大履歴番号をセットする
                '*履歴番号 000016 2005/11/01 削除開始
                '* corresponds to VS2008 Start 2010/04/16 000043
                ''''csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = strMaxRirekino
                '* corresponds to VS2008 End 2010/04/16 000043
                '*履歴番号 000016 2005/11/01 削除終了
                '*履歴番号 000013 2005/06/19 修正終了

                ' 宛名マスタを宛名履歴へそのまま編集する
                For Each csDataColumn In csAtenaRow.Table.Columns
                    csAtenaRirekiRow(csDataColumn.ColumnName) = csAtenaRow(csDataColumn)
                Next csDataColumn
                '* 履歴番号 000044 2011/11/09 追加開始

                If (csAtenaRirekiFzyRow Is Nothing) Then
                    '宛名履歴付随の新規行作成
                    csAtenaRirekiFzyEntity = m_cfRdbClass.GetTableSchema(ABAtenaRirekiFZYEntity.TABLE_NAME)
                    csAtenaRirekiFzyRow = csAtenaRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).NewRow
                Else
                    '何もしない
                End If

                '宛名付随を宛名履歴付随にコピー
                For Each csColumn As DataColumn In csAtenaFzyRow.Table.Columns
                    csAtenaRirekiFzyRow(csColumn.ColumnName) = csAtenaFzyRow(csColumn.ColumnName)
                Next
                '* 履歴番号 000044 2011/11/09 追加終了

                '宛名履歴標準
                If (csAtenaRirekiHyojunRow Is Nothing) Then
                    '宛名履歴標準の新規行作成
                    csAtenaRirekiHyojunEntity = m_cfRdbClass.GetTableSchema(ABAtenaRirekiHyojunEntity.TABLE_NAME)
                    csAtenaRirekiHyojunRow = csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).NewRow
                Else
                    '何もしない
                End If

                '宛名標準を宛名履歴標準にコピー
                For Each csColumn As DataColumn In csAtenaHyojunRow.Table.Columns
                    If (csAtenaRirekiHyojunRow.Table.Columns.Contains(csColumn.ColumnName)) Then
                        csAtenaRirekiHyojunRow(csColumn.ColumnName) = csAtenaHyojunRow(csColumn.ColumnName)
                    End If
                Next

                '宛名履歴付随標準
                If (csAtenaRirekiFZYHyojunRow Is Nothing) Then
                    '宛名履歴付随標準の新規行作成
                    csAtenaRirekiFZYHyojunEntity = m_cfRdbClass.GetTableSchema(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME)
                    csAtenaRirekiFZYHyojunRow = csAtenaRirekiFZYHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).NewRow
                Else
                    '何もしない
                End If

                '宛名付随標準を宛名履歴付随標準にコピー
                For Each csColumn As DataColumn In csAtenaFzyHyojunRow.Table.Columns
                    csAtenaRirekiFZYHyojunRow(csColumn.ColumnName) = csAtenaFzyHyojunRow(csColumn.ColumnName)
                Next

                '*履歴番号 000012 2005/06/07 削除開始
                '*履歴番号 000011 2005/06/05 追加開始
                ''宛名マスタの開始日を当日にする
                'm_cfDateClass.p_strDateValue = m_cfRdbClass.GetSystemDate().ToString("yyyyMMdd") 'システム日付
                'csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD) = m_cfDateClass.p_strDay
                '*履歴番号 000011 2005/06/05 追加終了
                '*履歴番号 000012 2005/06/07 追加終了

                ' 宛名履歴マスタの追加を行う
                '*履歴番号 000013 2005/06/21 削除開始
                'csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Add(csAtenaRirekiRow)
                '*履歴番号 000013 2005/06/21 削除終了
                '*履歴番号 000016 2005/11/01 修正開始
                '* corresponds to VS2008 Start 2010/04/16 000043
                ''''intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)
                ''''If (intCount <> 1) Then
                ''''    ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                ''''    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                ''''    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                ''''    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                ''''End If
                '* corresponds to VS2008 End 2010/04/16 000043


                '---------------------------------------------------------------------------------------
                ' 8-3-3. 住登外データ、住基データを更新する。
                '---------------------------------------------------------------------------------------

                ' 住登外が起きているデータで　かつ　元の住登外レコードを全て再セットし終わってない場合
                If m_blnJutogaiAriFG = True AndAlso
                   m_intJutogaiRowCnt > m_intJutogaiInCnt Then

                    '---------------------------------------------------------------------------------------
                    ' 8-3-3-1. 履歴データの更新処理で退避していた住登外データが残っている時。
                    ' 　　　   残っている住登外データを全て更新する。
                    '---------------------------------------------------------------------------------------

                    ' 残りの住登外レコードを再セットしていく
                    For intIdx = m_intJutogaiInCnt To m_intJutogaiRowCnt - 1 Step 1
                        intForCnt += 1

                        ' 住登外レコードが残っている状態のときJukiDataKoshin08ﾒｿｯﾄﾞで既に取得してあるので
                        ' 一回目のループでは取得しない。
                        If intForCnt > 1 Then
                            m_intJutogaiST_YMD = CType(m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKST_YMD), Integer)
                        End If

                        If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) > m_intJutogaiST_YMD Then

                            ' 連番用カウントを＋１
                            m_intRenbanCnt += 1
                            ' 履歴番号をセット
                            m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                            '*履歴番号 000023 2005/12/16 追加開始
                            ' 住基のレコードが再転入レコードの時でかつ住登外のレコードが直近レコードの場合
                            ' 終了年月日を住基レコードの開始年月日の一日前にセットする
                            If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RRemove(0, 1) = "0" AndAlso
                               CType(m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKED_YMD), String) = "99999999" Then

                                m_cfDateClass.p_strDateValue = CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), String)
                                m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)

                            End If
                            '*履歴番号 000023 2005/12/16 追加終了
                            '* 履歴番号 000044 2011/11/09 修正開始
                            '' 住登外ロウをインサート
                            'intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csJutogaiRows(intIdx))

                            '直近宛名履歴データを退避データから取得
                            csCkinRirekiFzyRows = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                                                                           m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                           m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RIREKINO).ToString)

                            '宛名履歴標準
                            csCkinRirekiHyojunRows = Me.GetChokkin_RirekiHyojun(m_csReRirekiHyojunEntity,
                                                                           m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                           m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RIREKINO).ToString)
                            '宛名履歴付随標準
                            csCkinRirekiFzyHyojunRows = Me.GetChokkin_RirekiFZYHyojun(m_csRERirekiFZYHyojunEntity,
                                                                           m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                           m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RIREKINO).ToString)

                            intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csJutogaiRows(intIdx), csCkinRirekiHyojunRows, csCkinRirekiFzyRows, csCkinRirekiFzyHyojunRows)
                            '* 履歴番号 000044 2011/11/09 修正終了
                            If (intCount <> 1) Then
                                ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                                m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                                objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                                Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                            End If
                        Else
                            If intJukiInCnt = 0 Then
                                ' 住基データの直近をインサート
                                ' 連番用カウントを＋１
                                m_intRenbanCnt += 1
                                ' 履歴番号をセット
                                csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                                '* corresponds to VS2008 Start 2010/04/16 000043
                                ''*履歴番号 000020 2005/12/07 修正開始
                                '''''*履歴番号 000018 2005/11/27 修正開始
                                '''''If m_blnSaiTenyuFG = True Then
                                ''''If m_blnHenkanFG = False Then
                                ''''    '*履歴番号 000018 2005/11/27 修正終了
                                ''''    ' 住登外優先区分は"1"
                                ''''    csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                                ''''    ' 履歴終了年月日を住登外ロウの履歴開始年月日の一日前にセットする
                                ''''    m_cfDateClass.p_strDateValue = CType(m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKST_YMD), String)
                                ''''    csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
                                ''''End If
                                '* corresponds to VS2008 End 2010/04/16 000043

                                If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RRemove(0, 1) = "0" Then
                                    ' 住民の時
                                    ' 住登外優先区分は"1"
                                    csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                                Else
                                    ' 住民でない時
                                    If m_blnHenkanFG = False Then
                                        csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                                        '*履歴番号 000023 2005/12/16 追加開始
                                        ' 履歴終了年月日を住登外ロウの履歴開始年月日の一日前にセットする
                                        m_cfDateClass.p_strDateValue = CType(m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKST_YMD), String)
                                        csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
                                        '*履歴番号 000023 2005/12/16 追加終了
                                    Else
                                        csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                                    End If
                                End If
                                '* corresponds to VS2008 Start 2010/04/16 000043
                                ''*履歴番号 000023 2005/12/16 削除開始
                                ''''' 履歴終了年月日を住登外ロウの履歴開始年月日の一日前にセットする
                                ''''m_cfDateClass.p_strDateValue = CType(m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKST_YMD), String)
                                ''''csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
                                ''*履歴番号 000023 2005/12/16 削除終了
                                '* corresponds to VS2008 End 2010/04/16 000043
                                '*履歴番号 000020 2005/12/07 修正終了

                                '* 履歴番号 000044 2011/11/09 修正開始
                                'intJukiInCnt = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)

                                '直近宛名履歴データを退避データから取得
                                csCkinRirekiFzyRows = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)

                                '宛名履歴標準
                                csCkinRirekiHyojunRows = Me.GetChokkin_RirekiHyojun(m_csReRirekiHyojunEntity,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                                '宛名履歴付随標準
                                csCkinRirekiFzyHyojunRows = Me.GetChokkin_RirekiFZYHyojun(m_csRERirekiFZYHyojunEntity,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)

                                intJukiInCnt = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csCkinRirekiHyojunRows, csCkinRirekiFzyRows, csCkinRirekiFzyHyojunRows)
                                '* 履歴番号 000044 2011/11/09 修正終了

                                If (intJukiInCnt <> 1) Then
                                    ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                                    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                                    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                                    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                                End If
                            End If

                            ' 住基データの直近がインサートされていて
                            ' 再転入フラグがTrueのとき住登外を起こす作業を行う
                            '*履歴番号 000018 2005/11/27 修正開始
                            'If intJukiInCnt <> 0 AndAlso m_blnSaiTenyuFG = True Then
                            If intJukiInCnt <> 0 AndAlso m_blnHenkanFG = False AndAlso
                                CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RRemove(0, 1) <> "0" Then
                                '*履歴番号 000018 2005/11/27 修正終了
                                ' 連番用カウントを＋１
                                m_intRenbanCnt += 1
                                ' 履歴番号をセット
                                csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)
                                ' 住登外優先区分を"0"に設定
                                csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                                ' 履歴開始年月日を住登外ロウの履歴開始と同一のものにする
                                csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD) = CType(m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKST_YMD), String)
                                ' 履歴終了年月日をオール９に設定
                                csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD) = "99999999"

                                '* 履歴番号 000044 2011/11/09 修正開始
                                'intJukiInCnt = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)

                                '直近宛名履歴データを退避データから取得
                                csCkinRirekiFzyRows = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)

                                '宛名履歴標準
                                csCkinRirekiHyojunRows = Me.GetChokkin_RirekiHyojun(m_csReRirekiHyojunEntity,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                                '宛名履歴付随標準
                                csCkinRirekiFzyHyojunRows = Me.GetChokkin_RirekiFZYHyojun(m_csRERirekiFZYHyojunEntity,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)

                                intJukiInCnt = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csCkinRirekiHyojunRows, csCkinRirekiFzyRows, csCkinRirekiFzyHyojunRows)
                                '* 履歴番号 000044 2011/11/09 修正終了

                                If (intCount <> 1) Then
                                    ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                                    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                                    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                                    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                                End If

                                '*履歴番号 000018 2005/11/27 追加開始
                                m_blnHenkanFG = True
                                '*履歴番号 000018 2005/11/27 追加終了
                            End If

                            ' 住登外ロウをインサート
                            ' 連番用カウントを＋１
                            m_intRenbanCnt += 1
                            ' 履歴番号をセット
                            m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                            '* 履歴番号 000044 2011/11/09 修正開始
                            'intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csJutogaiRows(intIdx))

                            '直近宛名履歴データを退避データから取得
                            csCkinRirekiFzyRows = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                                                                           m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                           m_csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RIREKINO).ToString)
                            '宛名履歴標準
                            csCkinRirekiHyojunRows = Me.GetChokkin_RirekiHyojun(m_csReRirekiHyojunEntity,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                            '宛名履歴付随標準
                            csCkinRirekiFzyHyojunRows = Me.GetChokkin_RirekiFZYHyojun(m_csRERirekiFZYHyojunEntity,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                               csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString)

                            intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csJutogaiRows(intIdx), csCkinRirekiHyojunRows, csCkinRirekiFzyRows, csCkinRirekiFzyHyojunRows)
                            '* 履歴番号 000044 2011/11/09 修正終了

                            If (intCount <> 1) Then
                                ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                                m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                                objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                                Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                            End If

                        End If
                    Next intIdx

                    ' 住基の直近レコードがまだインサートされていなければインサート
                    If intJukiInCnt = 0 Then

                        ' 連番用カウントを＋１
                        m_intRenbanCnt += 1
                        ' 履歴番号をセット
                        csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                        If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RSubstring(1, 1) = "0" Then
                            '*履歴番号 000020 2005/12/07 修正開始
                            ' データ種別が住民の時は住登外優先区分は"1"
                            '* corresponds to VS2008 Start 2010/04/16 000043
                            ''''csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                            '* corresponds to VS2008 End 2010/04/16 000043
                            csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                        Else
                            If m_blnHenkanFG = False Then
                                csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                            Else
                                csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                            End If
                            '*履歴番号 000020 2005/12/07 修正終了
                        End If

                        '* 履歴番号 000044 2011/11/09 修正開始
                        'intJukiInCnt = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)

                        'さきほど取得した宛名履歴付随行の履歴番号を宛名履歴行の履歴番号で上書き
                        csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                        '宛名履歴標準
                        csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                        '宛名履歴付随標準
                        csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)

                        'インサート
                        intJukiInCnt = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csAtenaRirekiHyojunRow, csAtenaRirekiFzyRow, csAtenaRirekiFZYHyojunRow)
                        '* 履歴番号 000044 2011/11/09 修正終了
                        If (intCount <> 1) Then
                            ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                            m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                            objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                            Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                        End If
                    End If
                Else

                    '---------------------------------------------------------------------------------------
                    ' 8-3-3-2. 直近の住登外データが存在しない、または、
                    ' 　　　   履歴データの更新処理で退避していた住登外データが全て更新されている時、
                    ' 　　　   住基データを更新する。
                    '---------------------------------------------------------------------------------------

                    ' 住登外が起きていないデータ、住登外データを再セットし終わっているデータはそのままインサート
                    ' 履歴番号を設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = strMaxRirekino

                    '*履歴番号 000020 2005/12/07 修正開始
                    '* corresponds to VS2008 Start 2010/04/16 000043
                    ''''*履歴番号 000018 2005/11/27 修正開始
                    ''''If m_blnSaiTenyuFG = True Then
                    ''If m_blnHenkanFG = False Then
                    ''    ' 再転入が起きている場合には住登外優先区分は"1"
                    ''    csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                    ''Else
                    ''    csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                    ''End If
                    ''''*履歴番号 000018 2005/11/27 修正終了
                    '* corresponds to VS2008 End 2010/04/16 000043

                    If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RRemove(0, 1) = "0" Then
                        ' 種別が"*0"の場合は無条件で住登外優先区分は"1"
                        csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                        m_blnHenkanFG = False
                    Else
                        ' 種別が"*0"でないとき
                        '*履歴番号 000023 2005/12/16 修正開始
                        ''If m_blnHenkanFG = False Then
                        ''    csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                        ''Else
                        ''    csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                        ''End If
                        If m_blnHenkanFG = True Then
                            csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                        Else
                            If blnJutogaiUmu = True Then
                                csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                            Else
                                csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                            End If
                        End If
                        '*履歴番号 000023 2005/12/16 修正終了
                    End If
                    '*履歴番号 000020 2005/12/07 修正終了

                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)

                    'さきほど取得した宛名履歴付随行の履歴番号を宛名履歴行の履歴番号で上書き
                    csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                    '宛名履歴標準
                    csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                    '宛名履歴付随標準
                    csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)

                    'インサート
                    intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csAtenaRirekiHyojunRow, csAtenaRirekiFzyRow, csAtenaRirekiFZYHyojunRow)
                    '* 履歴番号 000044 2011/11/09 修正終了

                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If
                End If
                '*履歴番号 000016 2005/11/01 修正開始

                '* 履歴番号 000044 2011/11/09 追加開始
            Else
                If ((csAtenaRirekiFzyTokushuRow Is Nothing) AndAlso (blnAfterSekobi)) Then
                    '宛名履歴付随特殊が存在しない且つ施行日以降の時、宛名付随から作成
                    csAtenaRirekiFzyTokushuRow = csAtenaRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).NewRow
                    csAtenaRirekiFzyTokushuRow = Me.SetAtenaRirekiFzy(csAtenaRirekiFzyTokushuRow, csAtenaFzyRow)
                    '履歴番号・更新日時を直近宛名履歴付随より取得
                    csAtenaRirekiFzyTokushuRow(ABAtenaRirekiEntity.RIREKINO) = csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                    csAtenaRirekiFzyTokushuRow(ABAtenaRirekiEntity.KOSHINNICHIJI) = csUpRirekiRow(ABAtenaRirekiEntity.KOSHINNICHIJI)
                    'インサート
                    m_cAtenaRirekiFzyB.InsertAtenaFZYRB(csAtenaRirekiFzyTokushuRow)
                Else
                    '何もしない
                End If
                If ((csAtenaRirekiFzyHyojunTokushuRow Is Nothing) AndAlso (blnAfterSekobi)) Then
                    '宛名履歴付随標準特殊が存在しない且つ施行日以降の時、宛名付随標準から作成
                    csAtenaRirekiFzyHyojunTokushuRow = csAtenaRirekiFZYHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).NewRow
                    csAtenaRirekiFzyHyojunTokushuRow = Me.SetAtenaRirekiFZYHyojun(csAtenaRirekiFzyHyojunTokushuRow, csAtenaFzyHyojunRow)
                    '履歴番号・更新日時を直近宛名履歴付随より取得
                    csAtenaRirekiFzyHyojunTokushuRow(ABAtenaRirekiFZYHyojunEntity.RIREKINO) = csUpRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                    csAtenaRirekiFzyHyojunTokushuRow(ABAtenaRirekiFZYHyojunEntity.KOSHINNICHIJI) = csUpRirekiRow(ABAtenaRirekiEntity.KOSHINNICHIJI)
                    'インサート
                    m_cABAtenaRirekiFZYHyojunB.InsertAtenaRirekiFZYHyojunB(csAtenaRirekiFzyHyojunTokushuRow)
                Else
                    '何もしない
                End If
                '* 履歴番号 000044 2011/11/09 追加終了
            End If
            '*履歴番号 000013 2005/06/19 修正終了



            '---------------------------------------------------------------------------------------
            ' 9. 宛名累積マスタの更新　（後）
            '　　　　　特殊修正（03、04）の場合は更新データが異なる。
            '---------------------------------------------------------------------------------------
            '**
            '* 宛名累積（後）
            '*
            ' 宛名累積の列を取得し、初期化する。（更新カウターは、0、それ以外は、String Empty）（共通）　			
            ' 宛名累積より新しいRowを取得する
            csAtenaRuisekiEntity = m_csAtenaRuisekiEntity.Clone
            csAtenaRuisekiRow = csAtenaRuisekiEntity.Tables(ABAtenaRuisekiEntity.TABLE_NAME).NewRow
            ' 宛名履歴を初期化する
            Me.ClearAtenaRuiseki(csAtenaRuisekiRow)

            ' 宛名履歴マスタより宛名累積マスタの編集を行う(共通)
            ' 処理日時=システム日時
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHORINICHIJI) = StrShoriNichiji

            ' 前後区分=2
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.ZENGOKB) = "2"

            '* 履歴番号 000044 2011/11/09 追加開始
            '宛名累積付随行を作成
            csAtenaRuisekiFzyRow = Me.m_csAtenaRuisekiFzyEntity.Tables(ABAtenaRuisekiFZYEntity.TABLE_NAME).NewRow
            Me.ClearAtenaFZY(csAtenaRuisekiFzyRow)
            '処理日時と前後区分は宛名累積から取得
            csAtenaRuisekiFzyRow(ABAtenaRuisekiFZYEntity.SHORINICHIJI) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHORINICHIJI)
            csAtenaRuisekiFzyRow(ABAtenaRuisekiFZYEntity.ZENGOKB) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.ZENGOKB)
            '* 履歴番号 000044 2011/11/09 追加終了

            '宛名累積標準
            csAtenaRuisekiHyojunRow = Me.m_csAtenaRuisekiHyojunEntity.Tables(ABAtenaRuisekiHyojunEntity.TABLE_NAME).NewRow
            Me.ClearAtenaHyojun(csAtenaRuisekiHyojunRow)
            '処理日時と前後区分は宛名累積から取得
            csAtenaRuisekiHyojunRow(ABAtenaRuisekiHyojunEntity.SHORINICHIJI) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHORINICHIJI)
            csAtenaRuisekiHyojunRow(ABAtenaRuisekiHyojunEntity.ZENGOKB) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.ZENGOKB)

            '宛名累積付随標準
            csAtenaRuisekiFZYHyojunRow = Me.m_csAtenaRuisekiFZYHyojunEntity.Tables(ABAtenaRuisekiFZYHyojunEntity.TABLE_NAME).NewRow
            Me.ClearAtenaFZYHyojun(csAtenaRuisekiFZYHyojunRow)
            '処理日時と前後区分は宛名累積から取得
            csAtenaRuisekiFZYHyojunRow(ABAtenaRuisekiFZYHyojunEntity.SHORINICHIJI) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHORINICHIJI)
            csAtenaRuisekiFZYHyojunRow(ABAtenaRuisekiFZYHyojunEntity.ZENGOKB) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.ZENGOKB)

            '*履歴番号 000013 2005/06/19 修正開始
            ' それ以外の項目については、宛名マスタをそのまま編集する			
            ' 宛名履歴を宛名履歴へそのまま編集する
            '*履歴番号 000026 2005/12/18 修正開始
            ' 処理事由コードが"03"(特殊処理修正)　または　"04"(住民票ＣＤ修正)の場合は
            ' 別のロウを累積(後)に反映させる
            ''For Each csDataColumn In csAtenaRirekiRow.Table.Columns
            ''    csAtenaRuisekiRow(csDataColumn.ColumnName) = csAtenaRirekiRow(csDataColumn)
            ''Next csDataColumn
            '*履歴番号 000042 2009/08/10 修正開始
            'If CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "03" OrElse _
            '   CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "04" Then
            '* 履歴番号 000050 2014/06/25 修正開始
            'If CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "03" OrElse _
            '   CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "04" OrElse _
            '   (m_blnRirekiShusei = False AndAlso CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "08") Then
            '* 履歴番号 000058 2015/10/14 修正開始
            'If CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "03" OrElse _
            '   CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "04" OrElse _
            '   CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "05" OrElse _
            '   (m_blnRirekiShusei = False AndAlso CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "08") Then
            If (blnIsCreateAtenaRireki = False _
                AndAlso (CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "03" OrElse
                         CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "04" OrElse
                         CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "05" OrElse
                         (m_blnRirekiShusei = False AndAlso CType(csJukiDataRow(ABJukiData.SHORIJIYUCD), String) = "08"))) Then
                '* 履歴番号 000058 2015/10/14 修正終了
                '* 履歴番号 000050 2014/06/25 修正終了

                For Each csDataColumn In csUpRirekiRow.Table.Columns
                    csAtenaRuisekiRow(csDataColumn.ColumnName) = csUpRirekiRow(csDataColumn)
                Next csDataColumn

                '宛名累積標準
                csAtenaRuisekiHyojunRow = SetAtenaRuisekiHyojun(csAtenaRuisekiHyojunRow, csAtenaRirekiHyojunTokushuRow, csAtenaRuisekiRow)

                '* 履歴番号 000044 2011/11/09 追加開始
                If (blnAfterSekobi) Then
                    '施行日以降の時、宛名累積付随特殊から全項目コピー
                    csAtenaRuisekiFzyRow = Me.SetAtenaRuisekiFzy(csAtenaRuisekiFzyRow, csAtenaRirekiFzyTokushuRow, csAtenaRuisekiRow)

                    '宛名累積付随標準
                    csAtenaRuisekiFZYHyojunRow = SetAtenaRuisekiFZYHyojun(csAtenaRuisekiFZYHyojunRow, csAtenaRirekiFzyHyojunTokushuRow, csAtenaRuisekiRow)
                Else
                    '施行日以前は付随はNothingにして追加しない
                    csAtenaRuisekiFzyRow = Nothing
                    csAtenaRuisekiFZYHyojunRow = Nothing
                End If
                '* 履歴番号 000044 2011/11/09 追加終了
            Else
                For Each csDataColumn In csAtenaRirekiRow.Table.Columns
                    csAtenaRuisekiRow(csDataColumn.ColumnName) = csAtenaRirekiRow(csDataColumn)
                Next csDataColumn

                '* 履歴番号 000044 2011/11/09 追加開始
                '宛名履歴付随からコピー
                csAtenaRuisekiFzyRow = Me.SetAtenaRuisekiFzy(csAtenaRuisekiFzyRow, csAtenaRirekiFzyRow, csAtenaRuisekiRow)
                '* 履歴番号 000044 2011/11/09 追加終了
                '宛名累積標準
                csAtenaRuisekiHyojunRow = SetAtenaRuisekiHyojun(csAtenaRuisekiHyojunRow, csAtenaRirekiHyojunRow, csAtenaRuisekiRow)
                '宛名累積付随標準
                csAtenaRuisekiFZYHyojunRow = SetAtenaRuisekiFZYHyojun(csAtenaRuisekiFZYHyojunRow, csAtenaRirekiFZYHyojunRow, csAtenaRuisekiRow)
            End If
            '*履歴番号 000042 2009/08/10 修正終了
            '*履歴番号 000026 2005/12/18 修正終了
            'For Each csDataColumn In csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Columns
            '    csAtenaRuisekiRow(csDataColumn.ColumnName) = csAtenaRirekiRow(csDataColumn)
            'Next csDataColumn
            '*履歴番号 000013 2005/06/19 修正終了

            '*履歴番号 000014 2005/08/17 追加開始 000029 2006/04/19 修正開始
            ' 処理事由ＣＤを宛名累積のRESERCEにセットする
            '* 履歴番号 000058 2015/10/14 修正開始
            ' 宛名履歴を作成する（特殊処理の場合に特例として）は、「41：職権修正」を固定でリザーブを登録する
            'csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = csJukiDataRow(ABJukiData.SHORIJIYUCD)
            If (blnIsCreateAtenaRireki = True) Then
                csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = ABEnumDefine.ABJukiShoriJiyuType.ShokkenShusei.GetHashCode.ToString("00")
            Else
                csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = csJukiDataRow(ABJukiData.SHORIJIYUCD)
            End If
            '* 履歴番号 000058 2015/10/14 修正終了
            '' 汎用ＣＤを宛名累積のRESERCEにセットする
            'csAtenaRuisekiRow(ABAtenaRuisekiEntity.RESERCE) = csJukiDataRow(ABJukiData.HANYOCD)
            '*履歴番号 000014 2005/08/17 追加終了 000029 2006/04/19 修正終了

            '*履歴番号 000016 2005/11/01 追加開始   000028 2005/12/27 削除開始
            ' 処理事由コードを宛名累積のCKINJIYUCDにセットする
            ''csAtenaRuisekiRow(ABAtenaRuisekiEntity.CKINJIYUCD) = csJukiDataRow(ABJukiData.SHORIJIYUCD)
            '*履歴番号 000016 2005/11/01 追加終了   000028 2005/12/27 削除終了

            '*履歴番号 000003 2003/11/21 追加開始
            ' 宛名年金を取得する
            csAtenaNenkinEntity = m_cAtenaNenkinB.GetAtenaNenkin(strJuminCD)
            If (csAtenaNenkinEntity.Tables(ABAtenaNenkinEntity.TABLE_NAME).Rows.Count > 0) Then
                ' 宛名累積設定(宛名年金)
                Me.SetNenkinToRuiseki(csAtenaNenkinEntity.Tables(ABAtenaNenkinEntity.TABLE_NAME).Rows(0), csAtenaRuisekiRow)
            End If
            ' 宛名国保を取得する
            csAtenaKokuhoEntity = m_cAtenaKokuhoB.GetAtenaKokuho(strJuminCD)
            If (csAtenaKokuhoEntity.Tables(ABAtenaKokuhoEntity.TABLE_NAME).Rows.Count > 0) Then
                ' 宛名累積設定(宛名国保)
                Me.SetKokuhoToRuiseki(csAtenaKokuhoEntity.Tables(ABAtenaKokuhoEntity.TABLE_NAME).Rows(0), csAtenaRuisekiRow)
            End If
            '*履歴番号 000003 2003/11/21 追加終了

            ' 宛名累積へ追加する
            csAtenaRuisekiEntity.Tables(ABAtenaRuisekiEntity.TABLE_NAME).Rows.Add(csAtenaRuisekiRow)

            ' 宛名累積マスタの追加を行う
            '* 履歴番号 000044 2011/11/09 修正開始
            'intCount = m_cAtenaRuisekiB.InsertAtenaRB(csAtenaRuisekiRow)

            intCount = m_cAtenaRuisekiB.InsertAtenaRB(csAtenaRuisekiRow, csAtenaRuisekiHyojunRow, csAtenaRuisekiFzyRow, csAtenaRuisekiFZYHyojunRow)
            '* 履歴番号 000044 2011/11/09 修正終了
            If (intCount <> 1) Then
                ' エラー定義を取得（既に同一データが存在します。：宛名累積）
                m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名累積", objErrorStruct.m_strErrorCode)
            End If

            '* 履歴番号 000050 2014/06/25 追加開始
            '---------------------------------------------------------------------------------------
            ' x. 共通番号マスタの更新
            '---------------------------------------------------------------------------------------
            ' 共通番号マスタ更新判定
            If (Me.IsUpdateMyNumber(csJukiDataRow) = True) Then

                ' 共通番号・旧共通番号の取得（分割）
                a_strMyNumber = GetMyNumber(csJukiDataRow)

                ' 共通番号パラメーターの設定
                cABMyNumberPrm = Me.SetMyNumber(csJukiDataRow, a_strMyNumber(ABMyNumberType.New))

                ' 共通番号マスタ更新
                'Select Case csJukiDataRow.Item(ABJukiData.SHORIJIYUCD).ToString
                '    Case ABEnumDefine.ABJukiShoriJiyuType.KojinNoShusei.GetHashCode.ToString("00")
                '        ' 【特殊処理】
                '        '* 履歴番号 000057 2015/02/17 修正開始
                '        'Me.UpdateMyNumber(cABMyNumberPrm, StrShoriNichiji, a_strMyNumber(ABMyNumberType.Old), IsJumin(csJukiDataRow))
                '        Me.UpdateMyNumber(cABMyNumberPrm, StrShoriNichiji, a_strMyNumber(ABMyNumberType.Old))
                '        '* 履歴番号 000057 2015/02/17 修正終了
                '    Case Else
                ' 【通常処理】
                '* 履歴番号 000054 2014/12/26 修正開始
                'Me.UpdateMyNumber(cABMyNumberPrm, StrShoriNichiji)
                '* 履歴番号 000056 2015/01/28 修正開始
                'Me.UpdateMyNumber(cABMyNumberPrm, StrShoriNichiji, IsJumin(csJukiDataRow))
                Me.UpdateMyNumber(cABMyNumberPrm, StrShoriNichiji)
                '* 履歴番号 000056 2015/01/28 修正終了
                '* 履歴番号 000054 2014/12/26 修正終了
                '    End Select

            Else
                ' noop
            End If
            '* 履歴番号 000050 2014/06/25 追加終了

            '---------------------------------------------------------------------------------------
            ' 10. 固定資産税システムへの連携
            '　　　　　管理情報により連携を制御する。（04.12）
            '---------------------------------------------------------------------------------------
            '*履歴番号 000006 2004/08/27 修正開始
            '*履歴番号 000009 2005/03/18 修正開始
            '管理情報の固定連携レコードが存在しない時と、パラメータが“0”の時に固定連携処理を行う
            If m_strKoteiRenkeiFG Is Nothing OrElse m_strKoteiRenkeiFG = "0" Then
                '固定連動クラスがnothingならインスタンス化を行う
                If m_cBAAtenaLinkageBClass Is Nothing Then
                    '固定連動クラスのインスタンス化を行う
                    m_cBAAtenaLinkageBClass = New BAAtenaLinkageBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                    m_cBAAtenaLinkageIFXClass = New BAAtenaLinkageIFXClass
                End If
                '''''''''' 宛名管理情報Ｂクラスのインスタンス作成
                '''''''''cAtenaKanriJohoB = New ABAtenaKanriJohoBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ''''''''''  宛名管理情報の種別04識別キー01のデータを全件取得する
                '''''''''csAtenaKanriEntity = cAtenaKanriJohoB.GetKanriJohoHoshu("04", "12")

                ''''''''''管理情報の固定連携レコードが存在し、パラメータが“１”の時には固定連携処理を行なわない
                '''''''''If (csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows.Count = 0) OrElse _
                '''''''''     CStr(csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows(0).Item(ABAtenaKanriJohoEntity.PARAMETER)) = "0" Then
                '*履歴番号 000009 2005/03/18 修正終了

                '*履歴番号 000005 2004/03/09 追加開始
                '　固定資産税データ渡しを行なう
                If Not (blnJukiUmu) Then
                    m_cBAAtenaLinkageIFXClass.ShichosonCD = CType(csAtenaRow(ABAtenaEntity.KYUSHICHOSONCD), String)
                    m_cBAAtenaLinkageIFXClass.JuminCD = CType(csAtenaRow(ABAtenaEntity.JUMINCD), String)
                    '*履歴番号 000010 2005/04/04 修正開始
                    'm_cBAAtenaLinkageIFXClass.IdoYMD = CType(csAtenaRow(ABAtenaEntity.CKINIDOYMD), String)
                    If CType(csAtenaRow(ABAtenaEntity.CKINIDOYMD), String).Trim = String.Empty Then
                        m_cBAAtenaLinkageIFXClass.IdoYMD = "00000000"
                    Else
                        m_cBAAtenaLinkageIFXClass.IdoYMD = CType(csAtenaRow(ABAtenaEntity.CKINIDOYMD), String)
                    End If
                    '*履歴番号 000010 2005/04/04 修正終了
                    '*履歴番号 000007 2004/10/20 修正開始
                    m_cBAAtenaLinkageIFXClass.KjnHjnKB = CType(csAtenaRow(ABAtenaEntity.KJNHJNKB), String)
                    ''''cBAAtenaLinkageIFXClass.KjnHjnKB = CType(csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB), String)
                    '*履歴番号 000007 2004/10/20 修正終了
                    BlnRcd = m_cBAAtenaLinkageBClass.BAAtenaLinkage(m_cBAAtenaLinkageIFXClass)
                    If BlnRcd = False Then
                        m_cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                        ' エラー定義を取得（該当データは処理できません。：固定資産税）
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001046)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "固定資産税", objErrorStruct.m_strErrorCode)
                    End If
                Else
                    '*履歴番号 000008 2005/02/15     追加開始
                    m_cBAAtenaLinkageIFXClass.ShichosonCD = CType(csAtenaRow(ABAtenaEntity.KYUSHICHOSONCD), String)
                    m_cBAAtenaLinkageIFXClass.JuminCD = CType(csAtenaRow(ABAtenaEntity.JUMINCD), String)
                    '*履歴番号 000010 2005/04/04 修正開始
                    'm_cBAAtenaLinkageIFXClass.IdoYMD = CType(csAtenaRow(ABAtenaEntity.CKINIDOYMD), String)
                    If CType(csAtenaRow(ABAtenaEntity.CKINIDOYMD), String).Trim = String.Empty Then
                        m_cBAAtenaLinkageIFXClass.IdoYMD = "00000000"
                    Else
                        m_cBAAtenaLinkageIFXClass.IdoYMD = CType(csAtenaRow(ABAtenaEntity.CKINIDOYMD), String)
                    End If
                    '*履歴番号 000010 2005/04/04 修正終了
                    m_cBAAtenaLinkageIFXClass.KjnHjnKB = CType(csAtenaRow(ABAtenaEntity.KJNHJNKB), String)
                    BlnRcd = m_cBAAtenaLinkageBClass.BAAtenaLinkage_IR(m_cBAAtenaLinkageIFXClass)
                    If BlnRcd = False Then
                        m_cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                        ' エラー定義を取得（該当データは処理できません。：固定資産税）
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001046)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "固定資産税", objErrorStruct.m_strErrorCode)
                    End If
                    '*履歴番号 000008 2005/02/15     追加終了
                End If
                '*履歴番号 000005 2004/03/09 追加終了

            End If
            '*履歴番号 000006 2004/08/27 修正終了


            '*履歴番号 000004 2004/02/16 追加開始   000009 2005/02/28 削除開始
            '**
            '* ワークフロー処理(パラメータ格納)
            '*
            ''''''''''' 宛名管理情報Ｂクラスのインスタンス作成
            '''''''''cAtenaKanriJohoB = New ABAtenaKanriJohoBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
            ''''''''  宛名管理情報の種別04識別キー01のデータを全件取得する
            '''''''csAtenaKanriEntity = cAtenaKanriJohoB.GetKanriJohoHoshu("04", "01")

            ''''''''管理情報のワークフローレコードが存在し、パラメータが"1"の時だけワークフロー処理を行う
            '''''''If Not (csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows.Count = 0) Then
            '''''''    If CStr(csAtenaKanriEntity.Tables(ABAtenaKanriJohoEntity.TABLE_NAME).Rows(0).Item(ABAtenaKanriJohoEntity.PARAMETER)) = "1" Then

            '''''''        '住登外FLGが"1"でなく汎用区分が"02","10","11","12","14","15"で履歴終了年月日が"99999999"（直近データ）の場合
            '''''''        If Not (blnJutogaiUmu) And _
            '''''''            (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "02" Or _
            '''''''            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "10" Or _
            '''''''            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "11" Or _
            '''''''            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "12" Or _
            '''''''            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "14" Or _
            '''''''            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "15") And _
            '''''''            CType(csJukiDataRow(ABJukiData.RRKED_YMD), String) = "99999999" Then
            '''''''            'インスタンス化
            '''''''            m_ABToshoProperty(m_intCnt) = New ABToshoProperty()
            '''''''            '住民コードをプロパティにセット
            '''''''            m_ABToshoProperty(m_intCnt).p_strJuminCD = strJuminCD
            '''''''            '更新区分をプロパティにセット（追加:1 修正:2 削除:D）
            '''''''            m_ABToshoProperty(m_intCnt).p_strKoshinKB = "1"
            '''''''            'カウンターに1プラス
            '''''''            m_intCnt += 1

            '''''''        ElseIf CType(csJukiDataRow(ABJukiData.RRKED_YMD), String) = "99999999" Then
            '''''''            'インスタンス化
            '''''''            m_ABToshoProperty(m_intCnt) = New ABToshoProperty()
            '''''''            '住民コードをプロパティにセット
            '''''''            m_ABToshoProperty(m_intCnt).p_strJuminCD = strJuminCD
            '''''''            '更新区分をプロパティにセット（追加:1 修正:2 削除:D）
            '''''''            m_ABToshoProperty(m_intCnt).p_strKoshinKB = "2"
            '''''''            'カウンターに1プラス
            '''''''            m_intCnt += 1

            '''''''        End If

            '''''''    End If
            '''''''End If
            '*履歴番号 000004 2004/02/16 追加終了   000009 2005/02/28 削除終了
            '*履歴番号 000065 2024/04/02 追加開始
            ' 個人制御の更新
            UpdateKojinSeigyo(csJukiDataRow)
            '*履歴番号 000065 2024/04/02 追加終了

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try
    End Sub

    '************************************************************************************************
    '* メソッド名     住基データ更新（履歴）
    '* 
    '* 構文           Public Sub JukiDataKoshin08() 
    '* 
    '* 機能 　    　　住基履歴データを更新する
    '* 
    '* 引数           なし
    '* 
    '* 戻り値         なし
    '************************************************************************************************
    Private Sub JukiDataKoshin08(ByVal csJukiDataRow As DataRow)
        Const THIS_METHOD_NAME As String = "JukiDataKoshin08"
        Dim objErrorStruct As UFErrorStruct                 ' エラー定義構造体
        '*履歴番号 000040 2009/05/22 削除開始
        'Dim blnJutogaiUmu As Boolean                        ' 住登外有無FLG
        '*履歴番号 000040 2009/05/22 削除終了
        Dim blnJukiUmu As Boolean                           ' 住基有無FLG
        Dim strJuminCD As String                            ' 住民コード
        '*履歴番号 000040 2009/05/22 削除開始
        'Dim csJutogaiEntity As DataSet                      ' 住登外DataSet
        '*履歴番号 000040 2009/05/22 削除終了
        Dim cSearchKey As ABAtenaSearchKey                  ' 宛名検索キー
        Dim csAtenaEntity As DataSet                        ' 宛名マスタEntity
        Dim csAtenaRow As DataRow                           ' 宛名マスタRow
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csDataRow As DataRow                            ' ＤａｔａＲｏｗ
        'Dim csDataSet As DataSet                            ' ＤａｔａＳｅｔ
        '* corresponds to VS2008 End 2010/04/16 000043
        Dim csDataColumn As DataColumn                      ' ＤａｔａＣｏｌｕｍｎ
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csAtenaRirekiEntity As DataSet                  ' 宛名履歴DataSet
        'Dim csAtenaRirekiRows() As DataRow                  ' 宛名履歴Rows
        '* corresponds to VS2008 End 2010/04/16 000043
        Dim csAtenaRirekiRow As DataRow                     ' 宛名履歴Row
        Dim intCount As Integer                             ' 更新件数
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csAtenaRuisekiEntity As DataSet                 ' 宛名累積DataSet
        'Dim csAtenaRuisekiRow As DataRow                    ' 宛名累積Row
        '* corresponds to VS2008 End 2010/04/16 000043
        '*履歴番号 000003 2003/11/21 追加開始
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csAtenaNenkinEntity As DataSet                  ' 宛名年金DataSet
        'Dim csAtenaKokuhoEntity As DataSet                  ' 宛名国保DataSet
        '* corresponds to VS2008 End 2010/04/16 000043
        '*履歴番号 000003 2003/11/21 追加終了
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim StrShoriNichiji As String
        '* corresponds to VS2008 End 2010/04/16 000043
        '*履歴番号 000016 2005/11/01 追加開始
        Dim intYMD As Integer
        Dim intIdx As Integer
        '*履歴番号 000016 2005/11/01 追加終了
        '*履歴番号 000031 2007/01/30 追加開始
        Dim strBanchiCD() As String                         ' 番地コード取得用配列
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim strMotoBanchiCD() As String                     ' 変更前番地コード
        'Dim intLoop As Integer                              ' ループカウンタ
        '* corresponds to VS2008 End 2010/04/16 000043
        '*履歴番号 000031 2007/01/30 追加終了
        '*履歴番号 000036 2007/09/28 追加開始
        Dim cHenshuSearchKana As ABHenshuSearchShimeiBClass ' 検索用カナ生成クラス
        Dim strSearchKana(4) As String                      ' 検索用カナ名称用
        '*履歴番号 000036 2007/09/28 追加終了
        '* 履歴番号 000044 2011/11/09 追加開始
        Dim csAtenaFzyEntity As DataSet                     ' 宛名付随データ
        Dim csAtenaFzyRow As DataRow                        ' 宛名付随行
        Dim csAtenaRirekiFzyRow As DataRow                  ' 宛名履歴付随行
        Dim csAtenaRirekiFzyJugaiRow As DataRow             ' 宛名履歴付随行（住登外）
        '* 履歴番号 000044 2011/11/09 追加終了
        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)


            '---------------------------------------------------------------------------------------
            ' 1. 変数の初期化
            '
            '---------------------------------------------------------------------------------------
            ' 変数の初期化
            '*履歴番号 000040 2009/05/22 削除開始
            'blnJutogaiUmu = False           '住登外データが存在している場合はTrue
            '*履歴番号 000040 2009/05/22 削除終了
            blnJukiUmu = False              '住基データが存在している場合はTrue
            strJuminCD = csJukiDataRow(ABJukiData.JUMINCD).ToString    '対象データの住民コードを取得

            '*履歴番号 000036 2007/09/28 追加開始
            ' 検索用カナ生成クラスインスタンス化
            cHenshuSearchKana = New ABHenshuSearchShimeiBClass(m_cfControlData, m_cfConfigDataClass)
            '*履歴番号 000036 2007/09/28 追加終了



            '---------------------------------------------------------------------------------------
            ' 2. 住登外データの存在チェック
            '　　　　　直近の住登外データが存在しているか住登外マスタから取得する。
            '---------------------------------------------------------------------------------------
            '*履歴番号 000040 2009/05/22 削除開始
            '' 住民コードで住登外マスタを取得する（存在する場合は、住登外有りＦＬＧに”1”をセット）
            'csJutogaiEntity = m_cJutogaiB.GetJutogaiBHoshu(strJuminCD, True)
            'If (csJutogaiEntity.Tables(ABJutogaiEntity.TABLE_NAME).Rows.Count > 0) Then
            '    blnJutogaiUmu = True
            'End If
            '*履歴番号 000040 2009/05/22 削除終了

            ' 住民種別の下１桁が”0”（住民）でかつ住登外有りＦＬＧが”1”の時
            ' ・住登外データを削除する
            ' ・住登外優先で指定年月日”99999999”で宛名マスタを取得し、そのデータを削除する
            'If (((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").Substring(1, 1) = "0") _
            '        And blnJutogaiUmu) Then
            '    For Each csDataRow In csJutogaiEntity.Tables(ABJutogaiEntity.TABLE_NAME).Rows
            '        m_cJutogaiB.DeleteJutogaiB(csDataRow, "D")
            '    Next csDataRow
            '    cSearchKey = New ABAtenaSearchKey()
            '    cSearchKey.p_strJuminCD = strJuminCD
            '    cSearchKey.p_strJutogaiYusenKB = "1"
            '    csAtenaEntity = m_cAtenaB.GetAtenaBHoshu(1, cSearchKey, True)
            '    For Each csDataRow In csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows
            '        m_cAtenaB.DeleteAtenaB(csDataRow, "D")
            '    Next csDataRow
            'End If



            '---------------------------------------------------------------------------------------
            ' 3. 住基データの存在チェック
            '　　　　　直近の住基データが存在しているか宛名マスタから取得する。
            '---------------------------------------------------------------------------------------
            ' 住基優先で宛名マスタを取得する（存在する場合は、住基有りＦＬＧに”1”をセット）
            ' 宛名検索キーのインスタンス化
            cSearchKey = New ABAtenaSearchKey
            cSearchKey.p_strJuminCD = strJuminCD
            cSearchKey.p_strJuminYuseniKB = "1"
            csAtenaEntity = m_cAtenaB.GetAtenaBHoshu(1, cSearchKey, True)
            If (csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows.Count > 0) Then
                blnJukiUmu = True
                '* 履歴番号 000044 2011/11/09 追加開始
                '宛名付随データ取得（住民住登外区分は宛名から取得）
                csAtenaFzyEntity = Me.m_cAtenaFzyB.GetAtenaFZYBHoshu(strJuminCD,
                                                                     csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows(0)(ABAtenaEntity.JUMINJUTOGAIKB).ToString,
                                                                     True)
            Else
                '宛名付随データ取得（住民住登外区分はString.Empty）
                csAtenaFzyEntity = Me.m_cAtenaFzyB.GetAtenaFZYBHoshu(strJuminCD, String.Empty, True)
                '* 履歴番号 000044 2011/11/09 追加終了
            End If



            '---------------------------------------------------------------------------------------
            ' 4. データの編集
            '　　　　　直近の住基データが存在している場合は修正、していなければ追加となる。
            '　　　　　住基レイアウトから宛名レイアウトにする。
            '---------------------------------------------------------------------------------------
            ' 宛名マスタ

            ' 宛名マスタの列を取得し、初期化する。（更新カウターは、0、それ以外は、String Empty）（共通）
            If (blnJukiUmu) Then
                csAtenaRow = csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).Rows(0)
            Else
                csAtenaRow = csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).NewRow
                Me.ClearAtena(csAtenaRow)
            End If

            ' 住基データより宛名マスタの編集を行う（ＡＬＬ．ＮＵＬＬ又は、ＡＬＬスペースの時は、String.Emptyにして）
            For Each csDataColumn In csJukiDataRow.Table.Columns
                If (IsDBNull(csJukiDataRow(csDataColumn))) _
                        OrElse (CType(csJukiDataRow(csDataColumn), String).Trim = String.Empty) Then
                    csJukiDataRow(csDataColumn) = String.Empty
                End If
            Next csDataColumn

            ' 住基データの同一項目を宛名マスタの項目にセットする
            ' ・住民コード
            csAtenaRow(ABAtenaEntity.JUMINCD) = csJukiDataRow(ABJukiData.JUMINCD)
            ' ・市町村コード
            csAtenaRow(ABAtenaEntity.SHICHOSONCD) = csJukiDataRow(ABJukiData.SHICHOSONCD)
            ' ・旧市町村コード
            csAtenaRow(ABAtenaEntity.KYUSHICHOSONCD) = csJukiDataRow(ABJukiData.KYUSHICHOSONCD)

            ' 何もセットしない項目
            ' ・住民票コード
            ' ・汎用区分２
            ' ・漢字法人形態
            ' ・漢字法人代表者氏名
            ' ・家屋敷区分
            ' ・備考税目

            ' 編集してセットする項目
            ' ・住民住登外区分   1
            csAtenaRow(ABAtenaEntity.JUMINJUTOGAIKB) = "1"
            ' ・住民優先区分     1
            csAtenaRow(ABAtenaEntity.JUMINYUSENIKB) = "1"
            ' ・住登外優先区分
            ' 　　住民種別の下１桁が”0”（住民）でなく、且つ住登外有りＦＬＧが”1”の時、　0
            '*履歴番号 000040 2009/05/22 修正開始
            'とりあえず無条件に "1" としてセットする
            csAtenaRow(ABAtenaEntity.JUTOGAIYUSENKB) = "1"
            'If (((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").Substring(1, 1) <> "0") _
            '        And blnJutogaiUmu) Then
            '    csAtenaRow(ABAtenaEntity.JUTOGAIYUSENKB) = "0"
            'Else
            '    '   　上記以外       1
            '    csAtenaRow(ABAtenaEntity.JUTOGAIYUSENKB) = "1"
            'End If
            '*履歴番号 000040 2009/05/22 修正終了
            ' ・宛名データ区分=(11)
            csAtenaRow(ABAtenaEntity.ATENADATAKB) = "11"
            ' ・世帯コード～整理番号
            csAtenaRow(ABAtenaEntity.STAICD) = csJukiDataRow(ABJukiData.STAICD)
            'csAtenaRow(ABAtenaEntity.JUMINHYOCD) = String.Empty
            csAtenaRow(ABAtenaEntity.SEIRINO) = csJukiDataRow(ABJukiData.SEIRINO)
            ' ・宛名データ種別=(住民種別)
            csAtenaRow(ABAtenaEntity.ATENADATASHU) = csJukiDataRow(ABJukiData.JUMINSHU)
            ' ・汎用区分１=(写し区分)
            csAtenaRow(ABAtenaEntity.HANYOKB1) = csJukiDataRow(ABJukiData.UTSUSHIKB)
            ' ・個人法人区分=(1)
            csAtenaRow(ABAtenaEntity.KJNHJNKB) = "1"
            ' ・汎用区分２
            'csAtenaRow(ABAtenaEntity.HANYOKB2) = String.Empty

            '*履歴番号 000037 2008/05/12 削除開始
            '* corresponds to VS2008 Start 2010/04/16 000043
            '''' ・管内管外区分
            '''' 　　住民種別の下１桁が”8”（転出者）の場合、　　2
            '* corresponds to VS2008 End 2010/04/16 000043
            ''If ((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").Substring(1, 1) = "8") Then
            ''    csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "2"
            ''Else
            ''    ' 住民種別の下１桁が”8”（転出者）でない場合、1			
            ''    csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "1"
            ''End If
            '*履歴番号 000037 2008/05/12 削除終了

            '*履歴番号 000068 2024/07/05 追加開始
            If (CStr(csJukiDataRow(ABJukiData.HONGOKUMEI)).Trim <> String.Empty) AndAlso
               (CStr(csJukiDataRow(ABJukiData.KANJIHEIKIMEI)).Trim <> String.Empty) AndAlso
               (CStr(csJukiDataRow(ABJukiData.KANJITSUSHOMEI)).Trim = String.Empty) Then
                ' 本国名≠空白 かつ 併記名≠空白 かつ 通称名＝空白の場合
                ' 漢字名称２・カナ名称２に空白を設定
                csJukiDataRow(ABJukiData.KANJIMEISHO2) = String.Empty
                csJukiDataRow(ABJukiData.KANAMEISHO2) = String.Empty
            Else
            End If
            '*履歴番号 000068 2024/07/05 追加終了

            '*履歴番号 000036 2007/09/28 修正開始
            ' ・カナ名称１～検索用カナ名
            If ((CStr(csJukiDataRow(ABJukiData.SHIMEIRIYOKB)).Trim = "2") AndAlso
                    (CStr(csJukiDataRow(ABJukiData.KANJIMEISHO2)).Trim <> String.Empty)) Then
                ' 本名優先(本名と通称名を持つ外国人かつ氏名利用区分が"2")
                csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO2)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
                csAtenaRow(ABAtenaEntity.KANAMEISHO2) = String.Empty
                csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = String.Empty
                csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = csJukiDataRow(ABJukiData.KANJIMEISHO2)

                '履歴番号 000039 2009/05/12 修正開始
                ' 検索用カナ姓名、検索用カナ姓、検索用カナ名を生成し格納
                strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)),
                                                               String.Empty, m_cFrnHommyoKensakuType)
                'strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)), _
                '                                               String.Empty, cuKanriJohoB.GetFrn_HommyoKensaku_Param)
                '履歴番号 000039 2009/05/12 修正終了

                ' 通称名を漢字法人代表者氏名に格納
                csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
                ' 汎用区分２に氏名利用区分のパラメータを格納
                csAtenaRow(ABAtenaEntity.HANYOKB2) = csJukiDataRow(ABJukiData.SHIMEIRIYOKB)
                ' 取得した検索用カナ姓名、検索用カナ姓、検索用カナ名を格納
                csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = strSearchKana(0)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = strSearchKana(1)
                csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = strSearchKana(2)

                '*履歴番号 000039 2009/05/12 修正開始
            ElseIf (m_cFrnHommyoKensakuType = FrnHommyoKensakuType.Tsusho_Seishiki) Then
                'ElseIf (cuKanriJohoB.GetFrn_HommyoKensaku_Param = FrnHommyoKensakuType.Tsusho_Seishiki) Then
                '*履歴番号 000039 2009/05/12 修正終了

                ' 通称名優先(本名優先の条件以外の場合)
                csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO1)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
                csAtenaRow(ABAtenaEntity.KANAMEISHO2) = csJukiDataRow(ABJukiData.KANAMEISHO2)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
                csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = csJukiDataRow(ABJukiData.SEARCHKANJIMEISHO)

                '*履歴番号 000039 2009/05/12 修正開始
                ' 検索用カナ姓名、検索用カナ姓、検索用カナ名を生成し格納
                strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO1)),
                                                                CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)),
                                                                m_cFrnHommyoKensakuType)
                'strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO1)), _
                '                                               CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)), _
                '                                               cuKanriJohoB.GetFrn_HommyoKensaku_Param)
                '*履歴番号 000039 2009/05/12 修正終了

                ' 通称名を漢字法人代表者氏名を空にする
                csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = String.Empty
                ' 汎用区分２に氏名利用区分のパラメータを格納
                csAtenaRow(ABAtenaEntity.HANYOKB2) = csJukiDataRow(ABJukiData.SHIMEIRIYOKB)
                ' 取得した検索用カナ姓名、検索用カナ姓、検索用カナ名を格納
                csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = strSearchKana(0)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = strSearchKana(1)
                csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = strSearchKana(2)
            Else
                '通称名優先（既存ユーザ）
                csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO1)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
                csAtenaRow(ABAtenaEntity.KANAMEISHO2) = csJukiDataRow(ABJukiData.KANAMEISHO2)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
                ' 通称名を漢字法人代表者氏名を空にする
                csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = String.Empty
                ' 汎用区分２に氏名利用区分のパラメータを格納
                csAtenaRow(ABAtenaEntity.HANYOKB2) = csJukiDataRow(ABJukiData.SHIMEIRIYOKB)
                csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = csJukiDataRow(ABJukiData.SEARCHKANJIMEISHO)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = csJukiDataRow(ABJukiData.SEARCHKANASEIMEI)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = csJukiDataRow(ABJukiData.SEARCHKANASEI)
                csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = csJukiDataRow(ABJukiData.SEARCHKANAMEI)
            End If
            '' ・カナ名称１～検索用カナ名
            'csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO1)
            'csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
            'csAtenaRow(ABAtenaEntity.KANAMEISHO2) = csJukiDataRow(ABJukiData.KANAMEISHO2)
            'csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
            ''csAtenaRow(ABAtenaEntity.KANJIHJNKEITAI) = String.Empty
            ''csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = String.Empty
            'csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = csJukiDataRow(ABJukiData.SEARCHKANJIMEISHO)
            ''*履歴番号 000034 2007/08/31 修正開始
            'If (cuKanriJohoB.GetFrn_HommyoKensaku_Param = FrnHommyoKensakuType.Tsusho_Seishiki) Then
            '    '外国人本名検索機能が"2(Tsusho_Seishiki)"のとき英字は大文字にする
            '    csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = CType(csJukiDataRow(ABJukiData.SEARCHKANASEIMEI), String).ToUpper()
            '    csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = GetSearchKana(CType(csJukiDataRow(ABJukiData.KANAMEISHO2), String))
            '    csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = CType(csJukiDataRow(ABJukiData.SEARCHKANAMEI), String).ToUpper()
            'Else
            '    csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = csJukiDataRow(ABJukiData.SEARCHKANASEIMEI)
            '    csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = csJukiDataRow(ABJukiData.SEARCHKANASEI)
            '    csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = csJukiDataRow(ABJukiData.SEARCHKANAMEI)
            'End If
            ''csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = csJukiDataRow(ABJukiData.SEARCHKANASEIMEI)
            ''csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = csJukiDataRow(ABJukiData.SEARCHKANASEI)
            ''csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = csJukiDataRow(ABJukiData.SEARCHKANAMEI)
            ''*履歴番号 000034 2007/08/31 修正終了
            '*履歴番号 000036 2007/09/28 修正終了
            csAtenaRow(ABAtenaEntity.KYUSEI) = csJukiDataRow(ABJukiData.KYUSEI)

            ' ・住基履歴番号=(履歴番号)
            csAtenaRow(ABAtenaEntity.JUKIRRKNO) = CStr(csJukiDataRow(ABJukiData.RIREKINO)).RSubstring(2, 4)
            ' ・履歴開始年月日～住民票表示順
            csAtenaRow(ABAtenaEntity.RRKST_YMD) = csJukiDataRow(ABJukiData.RRKST_YMD)
            csAtenaRow(ABAtenaEntity.RRKED_YMD) = csJukiDataRow(ABJukiData.RRKED_YMD)
            csAtenaRow(ABAtenaEntity.UMAREYMD) = csJukiDataRow(ABJukiData.UMAREYMD)
            csAtenaRow(ABAtenaEntity.UMAREWMD) = csJukiDataRow(ABJukiData.UMAREWMD)
            csAtenaRow(ABAtenaEntity.SEIBETSUCD) = csJukiDataRow(ABJukiData.SEIBETSUCD)
            csAtenaRow(ABAtenaEntity.SEIBETSU) = csJukiDataRow(ABJukiData.SEIBETSU)
            csAtenaRow(ABAtenaEntity.SEKINO) = csJukiDataRow(ABJukiData.SEIKINO)
            csAtenaRow(ABAtenaEntity.JUMINHYOHYOJIJUN) = csJukiDataRow(ABJukiData.JUMINHYOHYOJIJUN)
            ' ・第２住民票表示順
            csAtenaRow(ABAtenaEntity.DAI2JUMINHYOHYOJIJUN) = csJukiDataRow(ABJukiData.HYOJIJUN2)
            ' ・続柄コード・続柄・第2続柄コード・第2続柄
            ' 　住民種別の下１桁が”8”（転出者）の場合で続柄が”01”（世帯主）の場合、管理情報のコードに変更し、			
            '   名称はクリアする
            If ((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").RSubstring(1, 1) = "8") Then
                If (csJukiDataRow(ABJukiData.ZOKUGARACD).ToString.TrimEnd = "01") Then
                    If (m_strZokugara1Init = "00") Then
                        csAtenaRow(ABAtenaEntity.ZOKUGARACD) = String.Empty
                    Else
                        csAtenaRow(ABAtenaEntity.ZOKUGARACD) = m_strZokugara1Init
                    End If
                    csAtenaRow(ABAtenaEntity.ZOKUGARA) = String.Empty
                Else
                    csAtenaRow(ABAtenaEntity.ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD)
                    csAtenaRow(ABAtenaEntity.ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA)
                End If
                If (csJukiDataRow(ABJukiData.ZOKUGARACD2).ToString.TrimEnd = "01") Then
                    If (m_strZokugara2Init = "00") Then
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = String.Empty
                    Else
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = m_strZokugara2Init
                    End If
                    csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = String.Empty
                Else
                    csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD2)
                    csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA2)
                End If
            Else
                ' 住民種別の下１桁が”8”（転出者）でない場合は、そのままセット			
                csAtenaRow(ABAtenaEntity.ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD)
                csAtenaRow(ABAtenaEntity.ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA)
                csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD2)
                csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA2)
            End If
            ' ・世帯主住民コード～カナ第２世帯主名
            csAtenaRow(ABAtenaEntity.STAINUSJUMINCD) = csJukiDataRow(ABJukiData.STAINUSJUMINCD)
            csAtenaRow(ABAtenaEntity.STAINUSMEI) = csJukiDataRow(ABJukiData.KANJISTAINUSMEI)
            csAtenaRow(ABAtenaEntity.KANASTAINUSMEI) = csJukiDataRow(ABJukiData.KANASTAINUSMEI)
            csAtenaRow(ABAtenaEntity.DAI2STAINUSJUMINCD) = csJukiDataRow(ABJukiData.STAINUSJUMINCD2)
            csAtenaRow(ABAtenaEntity.DAI2STAINUSMEI) = csJukiDataRow(ABJukiData.KANJISTAINUSMEI2)
            csAtenaRow(ABAtenaEntity.KANADAI2STAINUSMEI) = csJukiDataRow(ABJukiData.KANASTAINUSMEI2)

            ' ・郵便番号～方書
            ' ・転出確定住所がある場合は、転出確定欄からセット（ない項目はセットなし）
            If (csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO).ToString.TrimEnd <> String.Empty) Then
                csAtenaRow(ABAtenaEntity.YUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIYUBINNO)
                '*履歴番号 000001 2003/09/11 修正開始
                'csAtenaRow(ABAtenaEntity.JUSHOCD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD)
                csAtenaRow(ABAtenaEntity.JUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD), String)
                '*履歴番号 000001 2003/09/11 修正終了
                csAtenaRow(ABAtenaEntity.JUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO)
                '*履歴番号 000031 2007/01/30 修正開始
                ' 番地情報から番地コードを取得
                '*履歴番号 000038 2009/04/07 修正開始
                strBanchiCD = m_cBanchiCDHenshuB.CreateBanchiCD(CStr(csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)))
                'strBanchiCD = m_crBanchiCdMstB.GetBanchiCd(CStr(csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)), strMotoBanchiCD, True)
                '' 取得した番地コード配列にNothingの項目がある場合はString.Emptyをセットする
                'For intLoop = 0 To strBanchiCD.Length - 1
                '    If (IsNothing(strBanchiCD(intLoop))) Then
                '        strBanchiCD(intLoop) = String.Empty
                '    End If
                'Next
                '*履歴番号 000038 2009/04/07 修正終了
                csAtenaRow(ABAtenaEntity.BANCHICD1) = strBanchiCD(0)
                csAtenaRow(ABAtenaEntity.BANCHICD2) = strBanchiCD(1)
                csAtenaRow(ABAtenaEntity.BANCHICD3) = strBanchiCD(2)
                'csAtenaRow(ABAtenaEntity.BANCHICD1) = String.Empty
                'csAtenaRow(ABAtenaEntity.BANCHICD2) = String.Empty
                'csAtenaRow(ABAtenaEntity.BANCHICD3) = String.Empty
                '*履歴番号 000031 2007/01/30 修正終了
                csAtenaRow(ABAtenaEntity.BANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)
                csAtenaRow(ABAtenaEntity.KATAGAKIFG) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKICD) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI)

                '*履歴番号 000037 2008/05/12 追加開始
                ' 管内管外区分：管外にセット    ※コメント:転出確定住所が存在する場合は管外に設定する。
                csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "2"
                '*履歴番号 000037 2008/05/12 追加終了

            ElseIf (csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO).ToString.TrimEnd <> String.Empty) Then
                ' ・転出確定住所が無く、転出予定住所がある場合は、転出予定欄からセット（ない項目はセットなし）
                csAtenaRow(ABAtenaEntity.YUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIYUBINNO)
                '*履歴番号 000001 2003/09/11 修正開始
                'csAtenaRow(ABAtenaEntity.JUSHOCD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD)
                csAtenaRow(ABAtenaEntity.JUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD), String)
                '*履歴番号 000001 2003/09/11 修正終了
                csAtenaRow(ABAtenaEntity.JUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO)
                ' 番地情報から番地コードを取得
                '*履歴番号 000038 2009/04/07 修正開始
                strBanchiCD = m_cBanchiCDHenshuB.CreateBanchiCD(CStr(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)))
                'strBanchiCD = m_crBanchiCdMstB.GetBanchiCd(CStr(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)), strMotoBanchiCD, True)
                '' 取得した番地コード配列にNothingの項目がある場合はString.Emptyをセットする
                'For intLoop = 0 To strBanchiCD.Length - 1
                '    If (IsNothing(strBanchiCD(intLoop))) Then
                '        strBanchiCD(intLoop) = String.Empty
                '    End If
                'Next
                '*履歴番号 000038 2009/04/07 修正終了
                csAtenaRow(ABAtenaEntity.BANCHICD1) = strBanchiCD(0)
                csAtenaRow(ABAtenaEntity.BANCHICD2) = strBanchiCD(1)
                csAtenaRow(ABAtenaEntity.BANCHICD3) = strBanchiCD(2)
                'csAtenaRow(ABAtenaEntity.BANCHICD1) = String.Empty
                'csAtenaRow(ABAtenaEntity.BANCHICD2) = String.Empty
                'csAtenaRow(ABAtenaEntity.BANCHICD3) = String.Empty
                '*履歴番号 000031 2007/01/30 修正終了
                csAtenaRow(ABAtenaEntity.BANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)
                csAtenaRow(ABAtenaEntity.KATAGAKIFG) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKICD) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI)

                '*履歴番号 000037 2008/05/12 追加開始
                ' 管内管外区分：管外にセット    ※コメント:転出予定住所が存在する場合は管外に設定する。
                csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "2"
                '*履歴番号 000037 2008/05/12 追加終了

            Else
                ' ・両方も無い場合は、住基住所欄からセット
                csAtenaRow(ABAtenaEntity.YUBINNO) = csJukiDataRow(ABJukiData.JUKIYUBINNO)
                '*履歴番号 000001 2003/09/11 修正開始
                'csAtenaRow(ABAtenaEntity.JUSHOCD) = csJukiDataRow(ABJukiData.JUKIJUSHOCD)
                csAtenaRow(ABAtenaEntity.JUSHOCD) = CType(csJukiDataRow(ABJukiData.JUKIJUSHOCD), String).RPadLeft(13)
                '*履歴番号 000001 2003/09/11 修正終了
                csAtenaRow(ABAtenaEntity.JUSHO) = csJukiDataRow(ABJukiData.JUKIJUSHO)
                csAtenaRow(ABAtenaEntity.BANCHICD1) = csJukiDataRow(ABJukiData.JUKIBANCHICD1)
                csAtenaRow(ABAtenaEntity.BANCHICD2) = csJukiDataRow(ABJukiData.JUKIBANCHICD2)
                csAtenaRow(ABAtenaEntity.BANCHICD3) = csJukiDataRow(ABJukiData.JUKIBANCHICD3)
                csAtenaRow(ABAtenaEntity.BANCHI) = csJukiDataRow(ABJukiData.JUKIBANCHI)
                csAtenaRow(ABAtenaEntity.KATAGAKIFG) = csJukiDataRow(ABJukiData.JUKIKATAGAKIFG)
                csAtenaRow(ABAtenaEntity.KATAGAKICD) = csJukiDataRow(ABJukiData.JUKIKATAGAKICD).ToString.Trim.RPadLeft(20)
                csAtenaRow(ABAtenaEntity.KATAGAKI) = csJukiDataRow(ABJukiData.JUKIKATAGAKI)

                '*履歴番号 000037 2008/05/12 追加開始
                ' 管内管外区分：管内にセット    ※コメント:転出確定住所、転出予定住所が存在しない場合は管内に設定する。
                csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "1"
                '*履歴番号 000037 2008/05/12 追加終了

            End If
            ' ・連絡先１～改正年月日
            csAtenaRow(ABAtenaEntity.RENRAKUSAKI1) = csJukiDataRow(ABJukiData.RENRAKUSAKI1)
            csAtenaRow(ABAtenaEntity.RENRAKUSAKI2) = csJukiDataRow(ABJukiData.RENRAKUSAKI2)
            '*履歴番号 000001 2003/09/11 修正開始
            'csAtenaRow(ABAtenaEntity.HON_ZJUSHOCD) = csJukiDataRow(ABJukiData.HON_ZJUSHOCD)
            csAtenaRow(ABAtenaEntity.HON_ZJUSHOCD) = CType(csJukiDataRow(ABJukiData.HON_ZJUSHOCD), String)
            '*履歴番号 000001 2003/09/11 修正終了
            csAtenaRow(ABAtenaEntity.HON_JUSHO) = csJukiDataRow(ABJukiData.HON_JUSHO)
            csAtenaRow(ABAtenaEntity.HONSEKIBANCHI) = csJukiDataRow(ABJukiData.HON_BANCHI)
            csAtenaRow(ABAtenaEntity.HITTOSH) = csJukiDataRow(ABJukiData.HITTOSHA)
            csAtenaRow(ABAtenaEntity.CKINIDOYMD) = csJukiDataRow(ABJukiData.CKINIDOYMD)
            csAtenaRow(ABAtenaEntity.CKINJIYUCD) = csJukiDataRow(ABJukiData.CKINJIYUCD)
            csAtenaRow(ABAtenaEntity.CKINJIYU) = csJukiDataRow(ABJukiData.CKINJIYU)
            csAtenaRow(ABAtenaEntity.CKINTDKDYMD) = csJukiDataRow(ABJukiData.CKINTDKDYMD)
            csAtenaRow(ABAtenaEntity.CKINTDKDTUCIKB) = csJukiDataRow(ABJukiData.CKINTDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.TOROKUIDOYMD) = csJukiDataRow(ABJukiData.TOROKUIDOYMD)
            csAtenaRow(ABAtenaEntity.TOROKUIDOWMD) = csJukiDataRow(ABJukiData.TOROKUIDOWMD)
            csAtenaRow(ABAtenaEntity.TOROKUJIYUCD) = csJukiDataRow(ABJukiData.TOROKUJIYUCD)
            csAtenaRow(ABAtenaEntity.TOROKUJIYU) = csJukiDataRow(ABJukiData.TOROKUJIYU)
            csAtenaRow(ABAtenaEntity.TOROKUTDKDYMD) = csJukiDataRow(ABJukiData.TOROKUTDKDYMD)
            csAtenaRow(ABAtenaEntity.TOROKUTDKDWMD) = csJukiDataRow(ABJukiData.TOROKUTDKDWMD)
            csAtenaRow(ABAtenaEntity.TOROKUTDKDTUCIKB) = csJukiDataRow(ABJukiData.TOROKUTDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.JUTEIIDOYMD) = csJukiDataRow(ABJukiData.JUTEIIDOYMD)
            csAtenaRow(ABAtenaEntity.JUTEIIDOWMD) = csJukiDataRow(ABJukiData.JUTEIIDOWMD)
            csAtenaRow(ABAtenaEntity.JUTEIJIYUCD) = csJukiDataRow(ABJukiData.JUTEIJIYUCD)
            csAtenaRow(ABAtenaEntity.JUTEIJIYU) = csJukiDataRow(ABJukiData.JUTEIJIYU)
            csAtenaRow(ABAtenaEntity.JUTEITDKDYMD) = csJukiDataRow(ABJukiData.JUTEITDKDYMD)
            csAtenaRow(ABAtenaEntity.JUTEITDKDWMD) = csJukiDataRow(ABJukiData.JUTEITDKDWMD)
            csAtenaRow(ABAtenaEntity.JUTEITDKDTUCIKB) = csJukiDataRow(ABJukiData.JUTEITDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.SHOJOIDOYMD) = csJukiDataRow(ABJukiData.SHOJOIDOYMD)
            csAtenaRow(ABAtenaEntity.SHOJOJIYUCD) = csJukiDataRow(ABJukiData.SHOJOJIYUCD)
            csAtenaRow(ABAtenaEntity.SHOJOJIYU) = csJukiDataRow(ABJukiData.SHOJOJIYU)
            csAtenaRow(ABAtenaEntity.SHOJOTDKDYMD) = csJukiDataRow(ABJukiData.SHOJOTDKDYMD)
            csAtenaRow(ABAtenaEntity.SHOJOTDKDTUCIKB) = csJukiDataRow(ABJukiData.SHOJOTDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIIDOYMD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIIDOYMD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIIDOYMD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIIDOYMD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTITSUCHIYMD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTITUCIYMD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUNYURIYUCD) = csJukiDataRow(ABJukiData.TENSHUTSUNYURIYUCD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUNYURIYU) = csJukiDataRow(ABJukiData.TENSHUTSUNYURIYU)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_YUBINNO) = csJukiDataRow(ABJukiData.TENUMAEJ_YUBINNO)
            '*履歴番号 000001 2003/09/11 修正開始
            'csAtenaRow(ABAtenaEntity.TENUMAEJ_ZJUSHOCD) = csJukiDataRow(ABJukiData.TENUMAEJ_ZJUSHOCD)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_ZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENUMAEJ_ZJUSHOCD), String)
            '*履歴番号 000001 2003/09/11 修正終了
            csAtenaRow(ABAtenaEntity.TENUMAEJ_JUSHO) = csJukiDataRow(ABJukiData.TENUMAEJ_JUSHO)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_BANCHI) = csJukiDataRow(ABJukiData.TENUMAEJ_BANCHI)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_KATAGAKI) = csJukiDataRow(ABJukiData.TENUMAEJ_KATAGAKI)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_STAINUSMEI) = csJukiDataRow(ABJukiData.TENUMAEJ_STAINUSMEI)
            '* 履歴番号 000063 2024/02/06 修正開始
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIYUBINNO)
            ''*履歴番号 000001 2003/09/11 修正開始
            ''csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD), String).RPadLeft(13)
            ''*履歴番号 000001 2003/09/11 修正終了
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI)

            '住基データ.処理事由コード＝45（転入通知受理）の場合
            If (csJukiDataRow(ABJukiData.SHORIJIYUCD).ToString() = ABEnumDefine.ABJukiShoriJiyuType.TennyuTsuchiJuri.GetHashCode.ToString("00")) Then
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIYUBINNO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD), String)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI)
            Else
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIYUBINNO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD), String)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI)
            End If
            '* 履歴番号 000063 2024/02/06 修正終了
            csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEISTAINUSMEI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISTAINUSMEI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIYUBINNO)
            '*履歴番号 000001 2003/09/11 修正開始
            'csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIZJUSHOCD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD), String)
            '*履歴番号 000001 2003/09/11 修正終了
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTISTAINUSMEI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISTAINUSMEI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIMITDKFG) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIMITDKFG)
            csAtenaRow(ABAtenaEntity.BIKOYMD) = csJukiDataRow(ABJukiData.BIKOYMD)
            csAtenaRow(ABAtenaEntity.BIKO) = csJukiDataRow(ABJukiData.BIKO)
            csAtenaRow(ABAtenaEntity.BIKOTENSHUTSUKKTIJUSHOFG) = csJukiDataRow(ABJukiData.BIKOTENSHUTSUKKTIJUSHOFG)
            csAtenaRow(ABAtenaEntity.HANNO) = csJukiDataRow(ABJukiData.HANNO)
            csAtenaRow(ABAtenaEntity.KAISEIATOFG) = csJukiDataRow(ABJukiData.KAISEIATOFG)
            csAtenaRow(ABAtenaEntity.KAISEIMAEFG) = csJukiDataRow(ABJukiData.KAISEIMAEFG)
            csAtenaRow(ABAtenaEntity.KAISEIYMD) = csJukiDataRow(ABJukiData.KAISEIYMD)

            ' ・行政区コード～地区名３
            ' 　住民種別の下１桁が”8”（転出者）でない場合、住基行政区～住基地区名３をセット			
            If ((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").RSubstring(1, 1) <> "8") Then
                csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
                csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
                csAtenaRow(ABAtenaEntity.CHIKUCD1) = csJukiDataRow(ABJukiData.JUKICHIKUCD1)
                csAtenaRow(ABAtenaEntity.CHIKUMEI1) = csJukiDataRow(ABJukiData.JUKICHIKUMEI1)
                '*履歴番号 000002 2003/09/18 修正開始
                'csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                'csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
                csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD2)
                csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI2)
                '*履歴番号 000002 2003/09/18 修正終了
                csAtenaRow(ABAtenaEntity.CHIKUCD3) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                csAtenaRow(ABAtenaEntity.CHIKUMEI3) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
            Else
                ' 住民種別の下１桁が”8”（転出者）の場合、管理情報（行政区初期化～地区３）を見て、
                ' クリアになっている場合は、セットしない
                If (m_strGyosekuInit.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = String.Empty
                    csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = String.Empty
                Else
                    '*履歴番号 000021 2005/12/12 修正開始
                    ''csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
                    ''csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
                    If m_strTenshutsuGyoseikuCD.Trim = String.Empty Then
                        ' クリアしない場合で転出者用の行政区ＣＤが設定されていない場合は
                        ' そのまま住基側のデータを設定する。
                        csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
                        csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
                    Else
                        ' クリアしない場合で転出者用の行政区ＣＤが設定されている場合は
                        ' 行政区ＣＤマスタより行政区名称を取得し、設定する。
                        csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = m_strTenshutsuGyoseikuCD.RPadLeft(9, " "c)
                        '*履歴番号 000022 2005/12/15 修正開始
                        csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = String.Empty
                        'csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = m_strTenshutsuGyoseikuMei
                        '*履歴番号 000022 2005/12/15 修正終了
                    End If
                    '*履歴番号 000021 2005/12/12 修正終了
                End If
                If (m_strChiku1Init.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.CHIKUCD1) = String.Empty
                    csAtenaRow(ABAtenaEntity.CHIKUMEI1) = String.Empty
                Else
                    csAtenaRow(ABAtenaEntity.CHIKUCD1) = csJukiDataRow(ABJukiData.JUKICHIKUCD1)
                    csAtenaRow(ABAtenaEntity.CHIKUMEI1) = csJukiDataRow(ABJukiData.JUKICHIKUMEI1)
                End If
                If (m_strChiku2Init.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.CHIKUCD2) = String.Empty
                    csAtenaRow(ABAtenaEntity.CHIKUMEI2) = String.Empty
                Else
                    '*履歴番号 000002 2003/09/18 修正開始
                    'csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                    'csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
                    csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD2)
                    csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI2)
                    '*履歴番号 000002 2003/09/18 修正終了
                End If
                If (m_strChiku3Init.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.CHIKUCD3) = String.Empty
                    csAtenaRow(ABAtenaEntity.CHIKUMEI3) = String.Empty
                Else
                    csAtenaRow(ABAtenaEntity.CHIKUCD3) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                    csAtenaRow(ABAtenaEntity.CHIKUMEI3) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
                End If
            End If

            ' ・投票区コード～在留終了年月日
            csAtenaRow(ABAtenaEntity.TOHYOKUCD) = csJukiDataRow(ABJukiData.TOHYOKUCD)
            csAtenaRow(ABAtenaEntity.SHOGAKKOKUCD) = csJukiDataRow(ABJukiData.SHOGAKKOKUCD)
            csAtenaRow(ABAtenaEntity.CHUGAKKOKUCD) = csJukiDataRow(ABJukiData.CHUGAKKOKUCD)
            csAtenaRow(ABAtenaEntity.HOGOSHAJUMINCD) = csJukiDataRow(ABJukiData.HOGOSHAJUMINCD)
            csAtenaRow(ABAtenaEntity.KANJIHOGOSHAMEI) = csJukiDataRow(ABJukiData.KANJIHOGOSHAMEI)
            csAtenaRow(ABAtenaEntity.KANAHOGOSHAMEI) = csJukiDataRow(ABJukiData.KANAHOGOSHAMEI)
            csAtenaRow(ABAtenaEntity.KIKAYMD) = csJukiDataRow(ABJukiData.KIKAYMD)
            csAtenaRow(ABAtenaEntity.KARIIDOKB) = csJukiDataRow(ABJukiData.KARIIDOKB)
            csAtenaRow(ABAtenaEntity.SHORITEISHIKB) = csJukiDataRow(ABJukiData.SHORITEISHIKB)
            csAtenaRow(ABAtenaEntity.SHORIYOKUSHIKB) = csJukiDataRow(ABJukiData.SHORIYOKUSHIKB)
            csAtenaRow(ABAtenaEntity.JUKIYUBINNO) = csJukiDataRow(ABJukiData.JUKIYUBINNO)
            '*履歴番号 000001 2003/09/11 修正開始
            csAtenaRow(ABAtenaEntity.JUKIJUSHOCD) = csJukiDataRow(ABJukiData.JUKIJUSHOCD)
            'csAtenaRow(ABAtenaEntity.JUKIJUSHOCD) = CType(csJukiDataRow(ABJukiData.JUKIJUSHOCD), String).PadLeft(11)
            '*履歴番号 000001 2003/09/11 修正終了
            csAtenaRow(ABAtenaEntity.JUKIJUSHO) = csJukiDataRow(ABJukiData.JUKIJUSHO)
            csAtenaRow(ABAtenaEntity.JUKIBANCHICD1) = csJukiDataRow(ABJukiData.JUKIBANCHICD1)
            csAtenaRow(ABAtenaEntity.JUKIBANCHICD2) = csJukiDataRow(ABJukiData.JUKIBANCHICD2)
            csAtenaRow(ABAtenaEntity.JUKIBANCHICD3) = csJukiDataRow(ABJukiData.JUKIBANCHICD3)
            csAtenaRow(ABAtenaEntity.JUKIBANCHI) = csJukiDataRow(ABJukiData.JUKIBANCHI)
            csAtenaRow(ABAtenaEntity.JUKIKATAGAKIFG) = csJukiDataRow(ABJukiData.JUKIKATAGAKIFG)
            csAtenaRow(ABAtenaEntity.JUKIKATAGAKICD) = csJukiDataRow(ABJukiData.JUKIKATAGAKICD).ToString.Trim.RPadLeft(20)
            csAtenaRow(ABAtenaEntity.JUKIKATAGAKI) = csJukiDataRow(ABJukiData.JUKIKATAGAKI)
            csAtenaRow(ABAtenaEntity.JUKIGYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
            csAtenaRow(ABAtenaEntity.JUKIGYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
            csAtenaRow(ABAtenaEntity.JUKICHIKUCD1) = csJukiDataRow(ABJukiData.JUKICHIKUCD1)
            csAtenaRow(ABAtenaEntity.JUKICHIKUMEI1) = csJukiDataRow(ABJukiData.JUKICHIKUMEI1)
            csAtenaRow(ABAtenaEntity.JUKICHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD2)
            csAtenaRow(ABAtenaEntity.JUKICHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI2)
            csAtenaRow(ABAtenaEntity.JUKICHIKUCD3) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
            csAtenaRow(ABAtenaEntity.JUKICHIKUMEI3) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
            'csAtenaRow(ABAtenaEntity.KAOKUSHIKIKB) = String.Empty
            'csAtenaRow(ABAtenaEntity.BIKOZEIMOKU) = String.Empty
            csAtenaRow(ABAtenaEntity.KOKUSEKICD) = csJukiDataRow(ABJukiData.KOKUSEKICD)
            csAtenaRow(ABAtenaEntity.KOKUSEKI) = csJukiDataRow(ABJukiData.KOKUSEKI)
            csAtenaRow(ABAtenaEntity.ZAIRYUSKAKCD) = csJukiDataRow(ABJukiData.ZAIRYUSKAKCD)
            csAtenaRow(ABAtenaEntity.ZAIRYUSKAK) = csJukiDataRow(ABJukiData.ZAIRYUSKAK)
            csAtenaRow(ABAtenaEntity.ZAIRYUKIKAN) = csJukiDataRow(ABJukiData.ZAIRYUKIKAN)
            csAtenaRow(ABAtenaEntity.ZAIRYU_ST_YMD) = csJukiDataRow(ABJukiData.ZAIRYU_ST_YMD)
            csAtenaRow(ABAtenaEntity.ZAIRYU_ED_YMD) = csJukiDataRow(ABJukiData.ZAIRYU_ED_YMD)

            '*履歴番号 000003 2003/11/21 追加開始
            ' 宛名履歴マスタの住民住登外区分が１（住民）で履歴番号が一番大きいものを取得
            'cSearchKey = New ABAtenaSearchKey()
            'cSearchKey.p_strJuminCD = strJuminCD
            'csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(1, cSearchKey, "", "1", True)
            'StrShoriNichiji = m_cfRdbClass.GetSystemDate().ToString("yyyyMMddHHmmssfff")
            '' データが存在する場合は、

            '*履歴番号 000003 2003/11/21 追加終了

            '* 履歴番号 000044 2011/11/09 追加開始
            If ((blnJukiUmu) AndAlso csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).Rows.Count > 0) Then
                '宛名付随のデータが存在する場合、0行目を取得
                csAtenaFzyRow = csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).Rows(0)
            Else
                '上記以外の時、空の行を作成
                csAtenaFzyRow = csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).NewRow
                Me.ClearAtenaFZY(csAtenaFzyRow)
            End If

            '宛名付随行の編集
            csAtenaFzyRow = Me.SetAtenaFzy(csAtenaFzyRow, csAtenaRow, csJukiDataRow)
            '* 履歴番号 000044 2011/11/09 追加終了

            '---------------------------------------------------------------------------------------
            ' 5. 宛名履歴マスタの更新
            '　　　　　住登外データが存在している場合は開始・終了年月日と住登外優先区分を編集する。
            '---------------------------------------------------------------------------------------
            '**
            '* 宛名履歴
            '*
            ' ・住基有りＦＬＧが”1”の時は、住基優先で指定年月日に99999999で宛名履歴マスタをよみ履歴終了年月日をシステ、
            ' 　ム日付の前日をセットし、宛名履歴マスタ更新を実行する
            'If (blnJukiUmu) Then
            '    ' 日付クラスの必要な設定を行う
            '    m_cfDateClass.p_enDateSeparator = UFDateSeparator.None
            '    m_cfDateClass.p_enEraType = UFEraType.Number
            '    cSearchKey = New ABAtenaSearchKey()
            '    cSearchKey.p_strJuminCD = strJuminCD
            '    cSearchKey.p_strJuminYuseniKB = "1"
            '    csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(1, cSearchKey, "99999999", True)
            '    If (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count > 0) Then
            '        csDataRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows(0)
            '        'm_cfDateClass.p_strDateValue = m_cfRdbClass.GetSystemDate().ToString("yyyyMMdd") 'システム日付
            '        'csDataRow.Item(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
            '        ' 宛名マスタを宛名履歴へそのまま編集する
            '        For Each csDataColumn In csAtenaRow.Table.Columns
            '            csDataRow(csDataColumn.ColumnName) = csAtenaRow(csDataColumn)
            '        Next csDataColumn
            '        m_cfDateClass.p_strDateValue = CType(csDataRow.Item(ABAtenaRirekiEntity.RRKED_YMD), String)
            '        csDataRow.Item(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
            '        intCount = m_cAtenaRirekiB.UpdateAtenaRB(csDataRow)
            '        If (intCount <> 1) Then
            '            ' エラー定義を取得（該当データは他で更新されてしまいました。再度･･･：宛名履歴）
            '            m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
            '            objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
            '            Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
            '        End If
            '    End If
            'Else

            '*履歴番号 000016 2005/11/01 修正開始
            '*コメント**********************************************************
            ' 住登外が起きているデータに関してはそれを考慮してやらないと、     *
            ' 正しく履歴マスタは作られない。修正前は一切考慮されていないので、 *
            ' 住登外が起きている場合は新たに作りこんでやる必要がある。         *
            '*******************************************************************
            '* corresponds to VS2008 Start 2010/04/16 000043
            ''''' 宛名履歴マスタを該当者の全履歴を取得する
            ''''cSearchKey = New ABAtenaSearchKey()
            ''''cSearchKey.p_strJuminCD = strJuminCD
            ''''csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRBHoshu(999, cSearchKey, "", True)

            ''''' 宛名履歴の列を取得し、初期化する。（更新カウターは、0、それ以外は、String Empty）（共通）
            ''''csAtenaRirekiRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).NewRow
            ''''Me.ClearAtenaRireki(csAtenaRirekiRow)

            ''''' 宛名マスタより宛名履歴マスタの編集を行う(共通)
            ''''' 履歴番号　　　新規のばあいは、0001　　修正の場合は、宛名履歴マスタの最終番号にＡＤＤ　１する
            ''''' それ以外の項目については、宛名マスタをそのまま編集する			
            ''''If (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count = 0) Then
            ''''    ' 履歴番号
            ''''    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = "0001"
            ''''Else
            ''''    ' 履歴番号で降順に並び替え
            ''''    csAtenaRirekiRows = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Select("", ABAtenaRirekiEntity.RIREKINO + " DESC")
            ''''    ' 履歴番号(先頭行の履歴番号+1)
            ''''    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType((CType(csAtenaRirekiRows(0).Item(ABAtenaRirekiEntity.RIREKINO), Integer) + 1), String).PadLeft(4, "0"c)
            ''''End If
            ''''' 宛名マスタを宛名履歴へそのまま編集する
            ''''For Each csDataColumn In csAtenaRow.Table.Columns
            ''''    csAtenaRirekiRow(csDataColumn.ColumnName) = csAtenaRow(csDataColumn)
            ''''Next csDataColumn

            ''''m_cfDateClass.p_enDateSeparator = UFDateSeparator.None
            ''''m_cfDateClass.p_enEraType = UFEraType.Number

            ''''m_cfDateClass.p_strDateValue = CType(csAtenaRirekiRow.Item(ABAtenaRirekiEntity.RRKED_YMD), String)
            ''''csAtenaRirekiRow.Item(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)

            ''''' 宛名履歴マスタの追加を行う
            ''''csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Add(csAtenaRirekiRow)
            ''''intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)
            ''''If (intCount <> 1) Then
            ''''    ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
            ''''    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
            ''''    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
            ''''    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
            ''''End If
            '* corresponds to VS2008 End 2010/04/16 000043

            '---------------------------------------------------------------------------------------
            ' 5-1. 更新用の履歴レコードを作成する。
            '---------------------------------------------------------------------------------------

            ' 宛名履歴の行を取得し、初期化する。（更新カウターは、0、それ以外は、String Empty）（共通）
            csAtenaRirekiRow = m_csReRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).NewRow
            Me.ClearAtenaRireki(csAtenaRirekiRow)

            ' 宛名マスタを宛名履歴へそのまま編集する
            For Each csDataColumn In csAtenaRow.Table.Columns
                csAtenaRirekiRow(csDataColumn.ColumnName) = csAtenaRow(csDataColumn)
            Next csDataColumn

            '* 履歴番号 000044 2011/11/09 追加開始
            '退避した宛名履歴付随より新規行作成
            csAtenaRirekiFzyRow = Me.m_csReRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).NewRow
            Me.ClearAtenaFZY(csAtenaRirekiFzyRow)
            '宛名付随からデータコピー
            csAtenaRirekiFzyRow = Me.SetAtenaRirekiFzy(csAtenaRirekiFzyRow, csAtenaFzyRow)
            '* 履歴番号 000044 2011/11/09 追加終了
            '---------------------------------------------------------------------------------------
            ' 5-2. 開始・終了年月日の編集準備、終了年月日を一日マイナスにする
            '---------------------------------------------------------------------------------------

            ' 日付クラスの必要な設定をする
            m_cfDateClass.p_enDateSeparator = UFDateSeparator.None
            m_cfDateClass.p_enEraType = UFEraType.Number

            ' 終了年月日を住基側からのデータの一日前を設定する。
            ' (住基側は履歴年月日が１レコード目の終了と２レコード目の開始が同一日。宛名は一日ずれる)
            m_cfDateClass.p_strDateValue = CType(csAtenaRirekiRow.Item(ABAtenaRirekiEntity.RRKED_YMD), String)
            csAtenaRirekiRow.Item(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)


            '---------------------------------------------------------------------------------------
            ' 5-3. 住基・住登外の履歴データを更新する
            '---------------------------------------------------------------------------------------

            ' 住登外が起きていないデータに関してはそのまま追加
            If m_blnJutogaiAriFG = False Then

                '---------------------------------------------------------------------------------------
                ' 5-3-1. 住登外データが存在しないので、住基データをそのまま更新する
                '---------------------------------------------------------------------------------------

                m_intRenbanCnt += 1
                ' 履歴番号を設定する
                csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                ' 住登外優先区分を"1"に設定する
                csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"

                ' 宛名履歴マスタの追加を行う
                '* 履歴番号 000044 2011/11/09 修正開始
                'intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)

                If (Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                                            csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                           csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString) Is Nothing) Then
                    'Insertする宛名履歴と一致する宛名履歴付随が存在しなければ、Nothingにする
                    csAtenaRirekiFzyRow = Nothing
                Else
                    '履歴番号の設定
                    csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                End If

                intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csAtenaRirekiFzyRow)
                '* 履歴番号 000044 2011/11/09 修正終了
                If (intCount <> 1) Then
                    ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                End If
            Else

                '---------------------------------------------------------------------------------------
                ' 5-3-2. 住登外データが存在しているので、住基・住登外データの編集を行い更新する
                '---------------------------------------------------------------------------------------

                ' 住登外が起きているデータに関しては考慮する
                ' 連番用カウントを＋１
                m_intRenbanCnt += 1

                ' 追加する住基レコードが住登外を起こすべきレコードかどうかを判定する
                '*履歴番号 000020 2005/12/07 追加開始
                ' 住基レコードと住登外レコードの開始年月日が同じ場合の処理を追加
                '*履歴番号 000024 2005/12/17 修正開始
                ''If m_blnHenkanFG = False AndAlso _
                ''   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) = m_intJutogaiST_YMD AndAlso _
                ''   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).PadLeft(2, " "c).Remove(0, 1) <> "0" Then
                '*履歴番号 000025 2005/12/18 修正開始
                ''If m_blnHenkanFG = False AndAlso _
                ''   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) = m_intJutogaiST_YMD AndAlso _
                ''   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).PadLeft(2, " "c).Remove(0, 1) <> "0" AndAlso _
                ''   m_intJutogaiRowCnt > m_intJutogaiInCnt Then

                If m_blnHenkanFG = False AndAlso
                   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) >= m_intJutogaiST_YMD AndAlso
                   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RRemove(0, 1) <> "0" AndAlso
                   m_intJutogaiRowCnt > m_intJutogaiInCnt Then
                    '*履歴番号 000025 2005/12/18 修正終了
                    '*履歴番号 000024 2005/12/17 修正終了

                    '---------------------------------------------------------------------------------------
                    ' 5-3-2-1. 住登外が存在している期間で住基データを分割しないケース
                    '
                    '          住登外データ作成がまだない、　かつ
                    '　　　　　退避した住登外データの開始年月日と住基データの開始年月日が同じか、
                    '          住基データの方が未来日である、 かつ
                    '　　　　　住民以外、  かつ
                    '　　　　　退避した住登外データがまだ残っている　場合は
                    '
                    '          住基データ（1件）と住登外データ（1件）の計2件を更新する。
                    '---------------------------------------------------------------------------------------

                    ' 開始年月日が小さくて、住基レコードが除票者であるなら、そのレコードから住登外を起こす。
                    ' 宛名側で別途レコードを作成して、追加することはしない。
                    ' 履歴番号を設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)
                    ' 住登外優先区分を"0"に設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                    ' 宛名履歴マスタの追加を行う
                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)
                    '履歴番号を宛名履歴よりコピー
                    csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                    intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csAtenaRirekiFzyRow)
                    '* 履歴番号 000044 2011/11/09 修正終了
                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If

                    ' 連番用カウントを＋１
                    m_intRenbanCnt += 1

                    '* 履歴番号 000044 2011/11/09 追加開始
                    '退避した履歴付随データから初回住登外レコードに一致するデータを取得
                    csAtenaRirekiFzyJugaiRow = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                                                                  m_csFirstJutogaiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                  m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                    '* 履歴番号 000049 2012/04/06 削除開始
                    'If (csAtenaRirekiFzyJugaiRow IsNot Nothing) Then
                    '    '空でない時は履歴番号を上書き
                    '    csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO)
                    'Else
                    '    '何もしない
                    'End If
                    '* 履歴番号 000049 2012/04/06 削除終了
                    '* 履歴番号 000044 2011/11/09 追加終了

                    ' 履歴番号を設定する
                    m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)
                    ' 宛名履歴マスタの追加を行う
                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csFirstJutogaiRow)
                    '* 履歴番号 000049 2012/04/06 修正開始
                    'csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO)
                    If (csAtenaRirekiFzyJugaiRow IsNot Nothing) Then
                        '空でない時は履歴番号を上書き
                        csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO)
                    Else
                        '何もしない
                    End If
                    '* 履歴番号 000049 2012/04/06 修正終了
                    intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csFirstJutogaiRow, csAtenaRirekiFzyJugaiRow)
                    '* 履歴番号 000044 2011/11/09 修正終了
                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If
                    ' 住登外データカウントを＋１
                    m_intJutogaiInCnt += 1
                    ' 次の住登外ＲＯＷを取得する
                    If m_intJutogaiInCnt <= m_intJutogaiRowCnt - 1 Then
                        m_csFirstJutogaiRow = m_csJutogaiRows(m_intJutogaiInCnt)
                        m_intJutogaiST_YMD = CType(m_csFirstJutogaiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer)
                    End If
                    ' 住登外を起こしたかどうかのフラグをＴｒｕｅにする
                    m_blnHenkanFG = True
                    '*履歴番号 000020 2005/12/07 追加終了
                    '*履歴番号 000024 2005/12/17 修正開始
                    ''ElseIf m_blnHenkanFG = False AndAlso _
                    ''   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) <= m_intJutogaiST_YMD AndAlso _
                    ''   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD), Integer) > m_intJutogaiST_YMD AndAlso _
                    ''   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).PadLeft(2, " "c).Remove(0, 1) <> "0" Then
                    '*履歴番号 000040 2009/05/22 修正開始
                ElseIf m_blnHenkanFG = False AndAlso
                        CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) < m_intJutogaiST_YMD AndAlso
                            CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD), Integer) >= m_intJutogaiST_YMD AndAlso
                                CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RRemove(0, 1) <> "0" AndAlso
                                    m_intJutogaiRowCnt > m_intJutogaiInCnt Then
                    'ElseIf m_blnHenkanFG = False AndAlso _
                    '       CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) <= m_intJutogaiST_YMD AndAlso _
                    '       CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD), Integer) > m_intJutogaiST_YMD AndAlso _
                    '       CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).PadLeft(2, " "c).Remove(0, 1) <> "0" AndAlso _
                    '       m_intJutogaiRowCnt > m_intJutogaiInCnt Then
                    '*履歴番号 000040 2009/05/22 修正終了

                    '---------------------------------------------------------------------------------------
                    ' 5-3-2-2. 住登外が存在している期間で住基データを分割するケース
                    '
                    '          住登外データ作成がまだない、　かつ
                    '　　　　　退避した住登外データの開始年月日と住基データの開始年月日が同じか、
                    '          住基データの方が過去日である、 かつ
                    '　　　　　退避した住登外データの開始年月日より住基データの終了年月日の方が未来日である、 かつ
                    '　　　　　住民以外、  かつ　退避した住登外データがまだ残っている　場合は
                    '
                    '          住基データ（2件）と住登外データ（1件）の計3件を更新する。
                    '---------------------------------------------------------------------------------------

                    '*履歴番号 000024 2005/12/17 修正終了
                    ' 履歴番号を設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                    ' 住登外優先区分を"1"に設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"

                    ' 終了年月日を最初の住登外ＲＯＷの開始年月日の一日前に設定する
                    intYMD = CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD), Integer)   ' 退避する
                    m_cfDateClass.p_strDateValue = CType(m_csFirstJutogaiRow(ABAtenaRirekiEntity.RRKST_YMD), String)
                    csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)

                    ' 宛名履歴マスタの追加を行う
                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)

                    '宛名履歴の履歴番号を宛名履歴付随に設定
                    csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                    intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csAtenaRirekiFzyRow)
                    '* 履歴番号 000044 2011/11/09 修正終了
                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If

                    ' 連番用カウントを＋１
                    m_intRenbanCnt += 1

                    ' 履歴番号を設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                    ' 住登外優先区分を"0"に設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"

                    ' 開始年月日を最初の住登外ＲＯＷの開始年月日に設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD) = m_csFirstJutogaiRow(ABAtenaRirekiEntity.RRKST_YMD)

                    ' 終了年月日を住登外を起こす前のレコードの終了年月日に設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD) = CType(intYMD, String)

                    ' 宛名履歴マスタの追加を行う
                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)

                    '宛名履歴の履歴番号を宛名履歴付随に設定
                    csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                    intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csAtenaRirekiFzyRow)
                    '* 履歴番号 000044 2011/11/09 修正終了
                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If

                    ' 連番用カウントを＋１
                    m_intRenbanCnt += 1

                    '* 履歴番号 000044 2011/11/09 追加開始
                    '退避した履歴付随データから初回住登外レコードに一致するデータを取得
                    csAtenaRirekiFzyJugaiRow = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                                                                  m_csFirstJutogaiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                  m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                    '* 履歴番号 000049 2012/04/06 削除開始
                    'If (csAtenaRirekiFzyJugaiRow IsNot Nothing) Then
                    '    '空でない時は履歴番号を上書き
                    '    csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO)
                    'Else
                    '    '何もしない
                    'End If
                    '* 履歴番号 000049 2012/04/06 削除終了
                    '* 履歴番号 000044 2011/11/09 追加終了


                    ' 履歴番号を設定する
                    m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                    ' 宛名履歴マスタの追加を行う
                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csFirstJutogaiRow)
                    '* 履歴番号 000049 2012/04/06 修正開始
                    'csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO)
                    If (csAtenaRirekiFzyJugaiRow IsNot Nothing) Then
                        '空でない時は履歴番号を上書き
                        csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO)
                    Else
                        '何もしない
                    End If
                    '* 履歴番号 000049 2012/04/06 修正終了
                    intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csFirstJutogaiRow, csAtenaRirekiFzyJugaiRow)
                    '* 履歴番号 000044 2011/11/09 修正終了

                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If

                    ' 住登外データカウントを＋１
                    m_intJutogaiInCnt += 1

                    ' 次の住登外ＲＯＷを取得する
                    If m_intJutogaiInCnt <= m_intJutogaiRowCnt - 1 Then
                        m_csFirstJutogaiRow = m_csJutogaiRows(m_intJutogaiInCnt)
                        m_intJutogaiST_YMD = CType(m_csFirstJutogaiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer)
                    End If

                    ' 住登外を起こしたかどうかのフラグをＴｒｕｅにする
                    m_blnHenkanFG = True
                    '*履歴番号 000018 2005/11/27 削除開始
                    '' 再転入フラグをＦａｌｓｅにする
                    ''m_blnSaiTenyuFG = False
                    '*履歴番号 000018 2005/11/27 削除終了

                    '*履歴番号 000040 2009/05/22 修正開始
                    '*履歴番号 000024 2005/12/17 修正開始
                    ''ElseIf m_intJutogaiRowCnt > m_intJutogaiInCnt AndAlso _
                    ''   CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) > m_intJutogaiST_YMD Then
                    'ElseIf m_intJutogaiRowCnt > m_intJutogaiInCnt AndAlso _
                    '       CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) >= m_intJutogaiST_YMD AndAlso _
                    '       CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).PadLeft(2, " "c).Remove(0, 1) <> "0" Then
                    '*履歴番号 000024 2005/12/17 修正終了
                ElseIf m_intJutogaiRowCnt > m_intJutogaiInCnt AndAlso
                            CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) >= m_intJutogaiST_YMD Then
                    '*履歴番号 000040 2009/05/22 修正終了

                    '---------------------------------------------------------------------------------------
                    ' 5-3-2-3. 住登外が存在している期間で住基データを分割しないケース
                    '          （２レコード目以降の住登外データセット時）
                    '
                    '          退避した住登外データがまだ残っている、　かつ
                    '　　　　　退避した住登外データの開始年月日と住基データの開始年月日が同じか、
                    '          住基データの方が未来日である、 かつ
                    '
                    '　　　　　住民以外　の場合
                    '---------------------------------------------------------------------------------------
                    '** コメント ***************************************************************************
                    ' 住基データの全履歴が全て住民、かつ住登外の履歴が混在するケース（通常ありえないが）が発生する可能性がある。
                    ' デグレートの危険が大きいことと、発生頻度もかなり少ないのでこの考慮は行わないこととする。
                    '***************************************************************************************

                    '* 履歴番号 000048 2012/01/05 修正開始
                    ''* 履歴番号 000044 2011/11/09 追加開始
                    ''退避した履歴付随データから初回住登外レコードに一致するデータを取得
                    'csAtenaRirekiFzyJugaiRow = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity, _
                    '                                              m_csFirstJutogaiRow(ABAtenaRirekiEntity.JUMINCD).ToString, _
                    '                                              m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                    'If (csAtenaRirekiFzyJugaiRow IsNot Nothing) Then
                    '    '空でない時は履歴番号を上書き
                    '    csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO)
                    'Else
                    '    '何もしない
                    'End If
                    ''* 履歴番号 000044 2011/11/09 追加終了
                    '退避した履歴付随データから初回住登外レコードに一致するデータを取得
                    csAtenaRirekiFzyJugaiRow = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                                                                  m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                  m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RIREKINO).ToString)
                    '* 履歴番号 000048 2012/01/05 修正終了

                    ' 履歴番号を設定する
                    m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                    '*履歴番号 000023 2005/12/16 追加開始
                    ' 住基のレコードが再転入レコードの時でかつ住登外のレコードが直近レコードの場合
                    ' 終了年月日を住基レコードの開始年月日の一日前にセットする
                    If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RRemove(0, 1) = "0" AndAlso
                       CType(m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RRKED_YMD), String) = "99999999" Then
                        m_cfDateClass.p_strDateValue = CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), String)
                        m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
                    End If

                    '* 履歴番号 000048 2012/01/05 追加開始
                    If (csAtenaRirekiFzyJugaiRow IsNot Nothing) Then
                        '空でない時は履歴番号を上書き
                        csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RIREKINO)
                    Else
                        '何もしない
                    End If
                    '* 履歴番号 000048 2012/01/05 追加終了

                    '*履歴番号 000023 2005/12/16 追加終了
                    ' 宛名履歴マスタの追加を行う(住登外ＲＯＷ)
                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csJutogaiRows(m_intJutogaiInCnt))

                    intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csJutogaiRows(m_intJutogaiInCnt), csAtenaRirekiFzyJugaiRow)
                    '* 履歴番号 000044 2011/11/09 修正終了

                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If

                    ' 住登外データカウントを＋１
                    m_intJutogaiInCnt += 1

                    '住登外レコードが最後のひとつになるまで繰り返すと思われるが、何のためにやっているか分からない（よしざわ）
                    For intIdx = m_intJutogaiInCnt To m_intJutogaiRowCnt - 1

                        '*履歴番号 000040 2009/05/22 削除開始
                        'すぐ下でセットし直しているけど、これって意味あんの？消すことにする（よしざわ）
                        'm_intJutogaiST_YMD = CType(m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RRKST_YMD), Integer)
                        '*履歴番号 000040 2009/05/22 削除終了

                        ' 次の住登外ＲＯＷを取得
                        m_csFirstJutogaiRow = m_csJutogaiRows(m_intJutogaiInCnt)
                        m_intJutogaiST_YMD = CType(m_csFirstJutogaiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer)

                        '*履歴番号 000024 2005/12/17 修正開始
                        ''If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) > m_intJutogaiST_YMD Then
                        '住登外データの開始年月日と住基データの開始年月日が同じか、未来日の場合は住登外を更新する
                        If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer) >= m_intJutogaiST_YMD Then
                            '*履歴番号 000024 2005/12/17 修正終了
                            ' 連番用カウントを＋１
                            m_intRenbanCnt += 1
                            '* 履歴番号 000048 2012/01/05 修正開始
                            ''* 履歴番号 000044 2011/11/09 追加開始
                            ''退避した履歴付随データから初回住登外レコードに一致するデータを取得
                            'csAtenaRirekiFzyJugaiRow = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity, _
                            '                                              m_csFirstJutogaiRow(ABAtenaRirekiEntity.JUMINCD).ToString, _
                            '                                              m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO).ToString)
                            'If (csAtenaRirekiFzyJugaiRow IsNot Nothing) Then
                            '    '空でない時は履歴番号を上書き
                            '    csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csFirstJutogaiRow(ABAtenaRirekiEntity.RIREKINO)
                            'Else
                            '    '何もしない
                            'End If
                            ''* 履歴番号 000044 2011/11/09 追加終了
                            '退避した履歴付随データから初回住登外レコードに一致するデータを取得
                            csAtenaRirekiFzyJugaiRow = Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                                                                          m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.JUMINCD).ToString,
                                                                          m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RIREKINO).ToString)

                            '* 履歴番号 000048 2012/01/05 修正終了

                            ' 履歴番号を設定する
                            m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                            '*履歴番号 000023 2005/12/16 追加開始
                            ' 住基のレコードが再転入レコードの時でかつ住登外のレコードが直近レコードの場合
                            ' 終了年月日を住基レコードの開始年月日の一日前にセットする
                            If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RRemove(0, 1) = "0" AndAlso
                               CType(m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RRKED_YMD), String) = "99999999" Then

                                m_cfDateClass.p_strDateValue = CType(csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD), String)
                                m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)

                            End If
                            '*履歴番号 000023 2005/12/16 追加終了

                            '* 履歴番号 000048 2012/01/05 追加開始
                            If (csAtenaRirekiFzyJugaiRow IsNot Nothing) Then
                                '空でない時は履歴番号を上書き
                                csAtenaRirekiFzyJugaiRow(ABAtenaRirekiFZYEntity.RIREKINO) = m_csJutogaiRows(m_intJutogaiInCnt)(ABAtenaRirekiEntity.RIREKINO)
                            Else
                                '何もしない
                            End If
                            '* 履歴番号 000048 2012/01/05 追加終了

                            ' 宛名履歴マスタの追加を行う(住登外ＲＯＷ)
                            '* 履歴番号 000044 2011/11/09 修正開始
                            'intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csJutogaiRows(m_intJutogaiInCnt))

                            intCount = m_cAtenaRirekiB.InsertAtenaRB(m_csJutogaiRows(m_intJutogaiInCnt), csAtenaRirekiFzyJugaiRow)
                            '* 履歴番号 000044 2011/11/09 修正終了

                            If (intCount <> 1) Then
                                ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                                m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                                objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                                Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                            End If

                            ' 住登外データカウントを＋１
                            m_intJutogaiInCnt += 1
                        Else
                            '*履歴番号 000040 2009/05/22 削除開始
                            ' 前の住登外ＲＯＷを取得
                            '前レコードの開始年月日を取得しても使用されてないけど、これって意味あんの？消すことにする（よしざわ）
                            'm_csFirstJutogaiRow = m_csJutogaiRows(m_intJutogaiInCnt - 1)
                            'm_intJutogaiST_YMD = CType(m_csFirstJutogaiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer)
                            '*履歴番号 000040 2009/05/22 削除終了
                            Exit For
                        End If
                    Next intIdx

                    ' 連番用カウントを＋１
                    m_intRenbanCnt += 1

                    ' 履歴番号を設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                    ' 住民種別が住民なら住登外を起こしたかどうかのフラグをFalseにする
                    If CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RSubstring(1, 1) = "0" Then
                        m_blnHenkanFG = False
                        csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                        '*履歴番号 000018 2005/11/27 削除開始
                        ' 再転入フラグをTrueにする
                        'm_blnSaiTenyuFG = True
                        '*履歴番号 000018 2005/11/27 削除終了
                    Else
                        If m_blnHenkanFG = False Then
                            csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                        Else
                            csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                        End If
                    End If

                    ' 宛名履歴マスタの追加を行う
                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)

                    csAtenaRirekiFzyRow(ABAtenaRirekiEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                    intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csAtenaRirekiFzyRow)
                    '* 履歴番号 000044 2011/11/09 修正終了

                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If

                    ' 次の住登外ＲＯＷを取得する
                    If m_intJutogaiInCnt <= m_intJutogaiRowCnt - 1 Then
                        m_csFirstJutogaiRow = m_csJutogaiRows(m_intJutogaiInCnt)
                        m_intJutogaiST_YMD = CType(m_csFirstJutogaiRow(ABAtenaRirekiEntity.RRKST_YMD), Integer)
                    End If
                Else

                    '---------------------------------------------------------------------------------------
                    ' 5-3-2-4. どれにも当てはまらない場合
                    '---------------------------------------------------------------------------------------

                    ' 履歴番号を設定する
                    csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = CType(m_intRenbanCnt, String).RPadLeft(4, "0"c)

                    ' 住登外が起きていて　かつ　種別が住民でなければ住登外優先区分は"0"
                    If m_blnHenkanFG = True AndAlso
                       CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RSubstring(1, 1) <> "0" Then
                        ' 住登外優先区分は"0"
                        csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "0"
                    ElseIf m_blnHenkanFG = True AndAlso
                           CType(csAtenaRirekiRow(ABAtenaRirekiEntity.ATENADATASHU), String).RPadLeft(2, " "c).RSubstring(1, 1) = "0" Then
                        csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                        '*履歴番号 000018 2005/11/27 削除開始
                        '' 再転入フラグをTrueにする
                        ''m_blnSaiTenyuFG = True
                        '*履歴番号 000018 2005/11/27 削除終了
                        m_blnHenkanFG = False
                    Else
                        ' 住登外優先区分は"1"
                        csAtenaRirekiRow(ABAtenaRirekiEntity.JUTOGAIYUSENKB) = "1"
                    End If

                    ' 宛名履歴マスタの追加を行う
                    '* 履歴番号 000044 2011/11/09 修正開始
                    'intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow)

                    If (Me.GetChokkin_RirekiFzy(m_csReRirekiFzyEntity,
                            csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINCD).ToString,
                           csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO).ToString) Is Nothing) Then
                        'Insertする宛名履歴と一致する宛名履歴付随が存在しなければ、Nothingにする
                        csAtenaRirekiFzyRow = Nothing
                    Else
                        '履歴番号を宛名履歴より取得
                        csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
                    End If
                    intCount = m_cAtenaRirekiB.InsertAtenaRB(csAtenaRirekiRow, csAtenaRirekiFzyRow)
                    '* 履歴番号 000044 2011/11/09 修正終了

                    If (intCount <> 1) Then
                        ' エラー定義を取得（既に同一データが存在します。：宛名履歴）
                        m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                        objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                        Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                    End If
                End If

            End If
            '*履歴番号 000016 2005/11/01 修正終了

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try

    End Sub
    '************************************************************************************************
    '* メソッド名     宛名Rowの初期化
    '* 
    '* 構文           Public Sub ClearAtena(ByRef csAtenaRow As DataRow)
    '* 
    '* 機能 　    　　宛名Rowを初期化する
    '* 
    '* 引数           DataRow : AtenaEntity
    '* 
    '* 戻り値         DataRow : AtenaEntity
    '************************************************************************************************
    Private Sub ClearAtena(ByRef csAtenaDataRow As DataRow)
        Const THIS_METHOD_NAME As String = "ClearAtena"
        Dim csDataColumn As DataColumn                      ' ＤａｔａＣｏｌｕｍｎ

        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            ' 項目の初期化
            For Each csDataColumn In csAtenaDataRow.Table.Columns
                Select Case csDataColumn.ColumnName
                    Case ABAtenaEntity.KOSHINCOUNTER
                        csAtenaDataRow(csDataColumn) = Decimal.Zero
                    Case Else
                        csAtenaDataRow(csDataColumn) = String.Empty
                End Select
            Next csDataColumn

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try
    End Sub
    '************************************************************************************************
    '* メソッド名     宛名履歴Rowの初期化
    '* 
    '* 構文           Public Sub ClearAtenaRireki(ByRef csAtenaRirekiRow As DataRow)
    '* 
    '* 機能 　    　　宛名履歴Rowの初期化
    '* 
    '* 引数           DataRow : AtenaRirekiEntity
    '* 
    '* 戻り値         DataRow : AtenaRirekiEntity
    '************************************************************************************************
    Private Sub ClearAtenaRireki(ByRef csAtenaRirekiRow As DataRow)
        Const THIS_METHOD_NAME As String = "ClearAtenaRireki"
        Dim csDataColumn As DataColumn                      ' ＤａｔａＣｏｌｕｍｎ

        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            ' 項目の初期化
            For Each csDataColumn In csAtenaRirekiRow.Table.Columns
                Select Case csDataColumn.ColumnName
                    Case ABAtenaRirekiEntity.KOSHINCOUNTER
                        csAtenaRirekiRow(csDataColumn) = Decimal.Zero
                    Case Else
                        csAtenaRirekiRow(csDataColumn) = String.Empty
                End Select
            Next csDataColumn

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try
    End Sub
    '************************************************************************************************
    '* メソッド名     宛名累積Rowの初期化
    '* 
    '* 構文           Public Sub ClearAtenaRuiseki(ByRef csAtenaRuisekiRow As DataRow)
    '* 
    '* 機能 　    　　宛名累積Rowを初期化する
    '* 
    '* 引数           DataRow : AtenaRuisekiEntity
    '* 
    '* 戻り値         DataRow : AtenaRuisekiEntity
    '************************************************************************************************
    Private Sub ClearAtenaRuiseki(ByRef csAtenaRuisekiRow As DataRow)
        Const THIS_METHOD_NAME As String = "ClearAtenaRuiseki"
        Dim csDataColumn As DataColumn                      ' ＤａｔａＣｏｌｕｍｎ

        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            ' 項目の初期化
            For Each csDataColumn In csAtenaRuisekiRow.Table.Columns
                Select Case csDataColumn.ColumnName
                    Case ABAtenaRuisekiEntity.KOSHINCOUNTER
                        csAtenaRuisekiRow(csDataColumn) = Decimal.Zero
                    Case Else
                        csAtenaRuisekiRow(csDataColumn) = String.Empty
                End Select
            Next csDataColumn

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try
    End Sub

    '*履歴番号 000003 2003/11/21 追加開始
    '************************************************************************************************
    '* メソッド名     宛名累積Rowへ宛名年金を設定
    '* 
    '* 構文           Public Sub SetNenkinToRuiseki(ByVal csAtenaNenkinRow As DataRow, ByRef csAtenaRuisekiRow As DataRow)
    '* 
    '* 機能 　    　　宛名累積Rowを初期化する
    '* 
    '* 引数           DataRow : AtenaNenkinEntity
    '* 　　           DataRow : AtenaRuisekiEntity
    '* 
    '* 戻り値         DataRow : AtenaRuisekiEntity
    '************************************************************************************************
    Private Sub SetNenkinToRuiseki(ByVal csAtenaNenkinRow As DataRow, ByRef csAtenaRuisekiRow As DataRow)
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csDataColumn As DataColumn                      ' ＤａｔａＣｏｌｕｍｎ
        '* corresponds to VS2008 End 2010/04/16 000043

        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, Me.GetType.Name, System.Reflection.MethodBase.GetCurrentMethod.Name)

            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KSNENKNNO) = csAtenaNenkinRow(ABAtenaNenkinEntity.KSNENKNNO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.NENKNSKAKSHUTKYMD) = csAtenaNenkinRow(ABAtenaNenkinEntity.SKAKSHUTKYMD)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.NENKNSKAKSHUTKSHU) = csAtenaNenkinRow(ABAtenaNenkinEntity.SKAKSHUTKSHU)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.NENKNSKAKSHUTKRIYUCD) = csAtenaNenkinRow(ABAtenaNenkinEntity.SKAKSHUTKRIYUCD)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.NENKNSKAKSSHTSYMD) = csAtenaNenkinRow(ABAtenaNenkinEntity.SKAKSSHTSYMD)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.NENKNSKAKSSHTSRIYUCD) = csAtenaNenkinRow(ABAtenaNenkinEntity.SKAKSSHTSRIYUCD)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNKIGO1) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNKIGO1)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNNO1) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNNO1)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNSHU1) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNSHU1)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNEDABAN1) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNEDABAN1)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNKB1) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNKB1)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNKIGO2) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNKIGO2)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNNO2) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNNO2)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNSHU2) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNSHU2)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNEDABAN2) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNEDABAN2)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNKB2) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNKB2)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNKIGO3) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNKIGO3)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNNO3) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNNO3)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNSHU3) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNSHU3)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNEDABAN3) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNEDABAN3)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.JKYNENKNKB3) = csAtenaNenkinRow(ABAtenaNenkinEntity.JKYNENKNKB3)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.NENKINHIHOKENSHAGAITOKB) = String.Empty
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHUBETSUHENKOYMD) = String.Empty

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, Me.GetType.Name, System.Reflection.MethodBase.GetCurrentMethod.Name)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + Me.GetType.Name + "】" +
                                        "【メソッド名:" + System.Reflection.MethodBase.GetCurrentMethod.Name + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + Me.GetType.Name + "】" +
                                        "【メソッド名:" + System.Reflection.MethodBase.GetCurrentMethod.Name + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try
    End Sub

    '************************************************************************************************
    '* メソッド名     宛名累積Rowへ宛名国保を設定
    '* 
    '* 構文           Public Sub SetKokuhoToRuiseki(ByVal csAtenaKokuhoRow As DataRow, ByRef csAtenaRuisekiRow As DataRow)
    '* 
    '* 機能 　    　　宛名累積Rowを初期化する
    '* 
    '* 引数           DataRow : csAtenaKokuhoEntity
    '* 　　           DataRow : AtenaRuisekiEntity
    '* 
    '* 戻り値         DataRow : AtenaRuisekiEntity
    '************************************************************************************************
    Private Sub SetKokuhoToRuiseki(ByVal csAtenaKokuhoRow As DataRow, ByRef csAtenaRuisekiRow As DataRow)
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Dim csDataColumn As DataColumn                      ' ＤａｔａＣｏｌｕｍｎ
        '* corresponds to VS2008 End 2010/04/16 000043

        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, Me.GetType.Name, System.Reflection.MethodBase.GetCurrentMethod.Name)

            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHONO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHONO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOSHIKAKUKB) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOSHIKAKUKB)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOSHIKAKUKBMEISHO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOSHIKAKUKBMEISHO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOSHIKAKUKBRYAKUSHO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOSHIKAKUKBRYAKUSHO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOGAKUENKB) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOGAKUENKB)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOGAKUENKBMEISHO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOGAKUENKBMEISHO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOGAKUENKBRYAKUSHO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOGAKUENKBRYAKUSHO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOSHUTOKUYMD) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOSHUTOKUYMD)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOSOSHITSUYMD) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOSOSHITSUYMD)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOTISHKKB) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOTISHKKB)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOTISHKKBMEISHO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOTISHKKBMEISHO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOTISHKKBRYAKUSHO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOTISHKKBRYAKUSHO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOTISHKHONHIKB) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOTISHKHONHIKB)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOTISHKHONHIKBMEISHO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOTISHKHONHIKBMEISHO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOTISHKHONHIKBRYAKUSHO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOTISHKHONHIKBRYAKUSHO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOTISHKGAITOYMD) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOTISHKGAITOYMD)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOTISHKHIGAITOYMD) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOTISHKHIGAITOYMD)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOHOKENSHOKIGO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOHOKENSHOKIGO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKUHOHOKENSHONO) = csAtenaKokuhoRow(ABAtenaKokuhoEntity.KOKUHOHOKENSHONO)
            csAtenaRuisekiRow(ABAtenaRuisekiEntity.KOKHOHIHOKENSHAGAITOKB) = String.Empty

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, Me.GetType.Name, System.Reflection.MethodBase.GetCurrentMethod.Name)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + Me.GetType.Name + "】" +
                                        "【メソッド名:" + System.Reflection.MethodBase.GetCurrentMethod.Name + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + Me.GetType.Name + "】" +
                                        "【メソッド名:" + System.Reflection.MethodBase.GetCurrentMethod.Name + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try
    End Sub
    '*履歴番号 000003 2003/11/21 追加終了

    '*履歴番号 000009 2005/02/28     追加開始
    '************************************************************************************************
    '* メソッド名     住基レプリカデータ更新
    '* 
    '* 構文           Public Sub JukiDataReplicaKoshin(ByVal csJukiDataEntity As DataSet)
    '* 
    '* 機能 　    　　住基レプリカデータの更新処理を行なう
    '* 
    '* 引数           DataSet(csJukiDataEntity) : 住基データセット
    '* 
    '* 戻り値         なし
    '************************************************************************************************
    Public Sub JukiDataReplicaKoshin(ByVal csJukiDataEntity As DataSet)
        Const THIS_METHOD_NAME As String = "JukiDataReplicaKoshin"
        '*履歴番号 000009 2005/03/18 削除開始
        ''''''Dim cAtenaKanriJohoB As ABAtenaKanriJohoBClass      '宛名管理情報ＤＡビジネスクラス
        ''''''Dim csAtenaKanriEntity As DataSet                   '宛名管理情報データセット
        '*履歴番号 000009 2005/03/18 削除終了
        Dim csABToshoPrmEntity As New DataSet               'レプリカ作成用パラメータデータセット
        Dim csABToshoPrmTable As DataTable                  'レプリカ作成用パラメータデータテーブル
        Dim csABToshoPrmRow As DataRow                      'レプリカ作成用パラメータデータテーブル
        Dim csJukiDataRow As DataRow                        '住基データRow
        Dim blnJutogaiUmu As Boolean = False                ' 住登外有無FLG
        Dim csJutogaiEntity As DataSet                      ' 住登外DataSet
        Dim strJuminCD As String                            ' 住民コード
        Dim cABAtenaCnvBClass As ABAtenaCnvBClass
        Const WORK_FLOW_NAME As String = "宛名異動"             ' ワークフロー名
        Const DATA_NAME As String = "宛名"                      'データ名

        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, Me.GetType.Name, System.Reflection.MethodBase.GetCurrentMethod.Name)

            '管理情報のワークフローレコードが存在し、パラメータが"1"の時だけワークフロー処理を行う
            If Not m_strR3RenkeiFG Is Nothing AndAlso m_strR3RenkeiFG = "1" Then

                'データセット取得クラスのインスタンス化
                cABAtenaCnvBClass = New ABAtenaCnvBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)
                ' テーブルセットの取得
                csABToshoPrmTable = cABAtenaCnvBClass.CreateColumnsToshoPrmData()
                csABToshoPrmTable.TableName = ABToshoPrmEntity.TABLE_NAME
                ' データセットにテーブルセットの追加
                csABToshoPrmEntity.Tables.Add(csABToshoPrmTable)

                ' データ分繰り返す
                For Each csJukiDataRow In csJukiDataEntity.Tables(ABJukiData.TABLE_NAME).Rows
                    If CType(csJukiDataRow(ABJukiData.RRKED_YMD), String) = "99999999" Then

                        '住民ＣＤの取得
                        strJuminCD = csJukiDataRow(ABJukiData.JUMINCD).ToString

                        ' 住民コードで住登外マスタを取得する（存在する場合は、住登外有りＦＬＧに”1”をセット）
                        csJutogaiEntity = m_cJutogaiB.GetJutogaiBHoshu(strJuminCD, True)
                        If (csJutogaiEntity.Tables(ABJutogaiEntity.TABLE_NAME).Rows.Count > 0) Then
                            blnJutogaiUmu = True
                        End If

                        '住登外FLGが"1"でなく汎用区分が"02","10","11","12","14","15"で履歴終了年月日が"99999999"（直近データ）の場合
                        If Not (blnJutogaiUmu) And
                            (CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "02" Or
                            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "10" Or
                            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "11" Or
                            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "12" Or
                            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "14" Or
                            CType(csJukiDataRow(ABJukiData.HANYOCD), String) = "15") And
                            CType(csJukiDataRow(ABJukiData.RRKED_YMD), String) = "99999999" Then

                            '新規ロウの作成
                            csABToshoPrmRow = csABToshoPrmEntity.Tables(ABToshoPrmEntity.TABLE_NAME).NewRow()
                            'プロパティにセット
                            csABToshoPrmRow.Item(ABToshoPrmEntity.JUMINCD) = strJuminCD                                 '住民コード
                            csABToshoPrmRow.Item(ABToshoPrmEntity.STAICD) = csJukiDataRow(ABJukiData.STAICD).ToString   '世帯コード
                            csABToshoPrmRow.Item(ABToshoPrmEntity.KOSHINKB) = ABConstClass.WF_INSERT_KOSHINKB           '更新区分（追加:1 修正:2 削除:D）
                            'データセットにロウを追加する
                            csABToshoPrmEntity.Tables(ABToshoPrmEntity.TABLE_NAME).Rows.Add(csABToshoPrmRow)

                        ElseIf CType(csJukiDataRow(ABJukiData.RRKED_YMD), String) = "99999999" Then

                            '新規ロウの作成
                            csABToshoPrmRow = csABToshoPrmEntity.Tables(ABToshoPrmEntity.TABLE_NAME).NewRow()
                            'プロパティにセット
                            csABToshoPrmRow.Item(ABToshoPrmEntity.JUMINCD) = strJuminCD                                 '住民コード
                            csABToshoPrmRow.Item(ABToshoPrmEntity.STAICD) = csJukiDataRow(ABJukiData.STAICD).ToString   '世帯コード
                            csABToshoPrmRow.Item(ABToshoPrmEntity.KOSHINKB) = ABConstClass.WF_UPDATE_KOSHINKB           '更新区分（追加:1 修正:2 削除:D）
                            'データセットにロウを追加する
                            csABToshoPrmEntity.Tables(ABToshoPrmEntity.TABLE_NAME).Rows.Add(csABToshoPrmRow)

                        End If
                    End If
                Next csJukiDataRow

                'レコード件数が"0"出ない時はワークフロー処理を行う
                If Not (csABToshoPrmEntity.Tables(ABToshoPrmEntity.TABLE_NAME).Rows.Count = 0) Then
                    'ワークフロー送信処理呼び出し
                    cABAtenaCnvBClass.WorkFlowExec(csABToshoPrmEntity, WORK_FLOW_NAME, DATA_NAME)
                End If
            End If

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try
    End Sub
    '*履歴番号 000009 2005/02/28     追加終了

    '* 履歴番号 000055 2015/01/08 削除開始
    ''* 履歴番号 000053 2014/09/10 追加開始
    '''' <summary>
    '''' 中間サーバーＢＳデータ更新
    '''' </summary>
    '''' <param name="csJukiDataEntity">住基データ</param>
    '''' <remarks></remarks>
    'Public Sub JukiDataBSKoshin(ByVal csJukiDataEntity As DataSet)

    '    Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
    '    Dim cfErrorClass As UFErrorClass
    '    Dim cfErrorStruct As UFErrorStruct
    '    Dim csJuminCD As ArrayList
    '    Dim cABBSRenkeiB As ABBSRenkeiBClass

    '    Try

    '        ' デバッグ開始ログ出力
    '        m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

    '        ' 引数チェック
    '        If (csJukiDataEntity Is Nothing OrElse _
    '            csJukiDataEntity.Tables(ABJukiData.TABLE_NAME).Rows.Count = 0) Then
    '            cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
    '            cfErrorStruct = cfErrorClass.GetErrorStruct(ABErrorClass.ABE003304)
    '            Throw New UFAppException(cfErrorStruct.m_strErrorMessage, cfErrorStruct.m_strErrorCode)
    '        Else
    '            ' noop
    '        End If

    '        ' 住基データより直近データ（履歴終了日が"99999999"）の住民コードを取得
    '        csJuminCD = New ArrayList
    '        For Each csDataRow As DataRow In csJukiDataEntity.Tables(ABJukiData.TABLE_NAME).Select( _
    '                                            String.Format("{0} = '99999999'", ABJukiData.RRKED_YMD), _
    '                                            ABJukiData.JUMINCD)
    '            csJuminCD.Add(csDataRow.Item(ABJukiData.JUMINCD).ToString)
    '        Next csDataRow

    '        ' 中間サーバーＢＳ連携ビジネスクラスのインスタンス化
    '        cABBSRenkeiB = New ABBSRenkeiBClass(m_cfControlData, m_cfConfigDataClass, m_cfRdbClass)

    '        ' 中間サーバーＢＳ連携の実行
    '        cABBSRenkeiB.ExecRenkei(csJuminCD)

    '        ' デバッグ終了ログ出力
    '        m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

    '    Catch cfAppExp As UFAppException

    '        ' ワーニングログ出力
    '        m_cfLogClass.WarningWrite(m_cfControlData, _
    '                                    "【クラス名:" + THIS_CLASS_NAME + "】" + _
    '                                    "【メソッド名:" + THIS_METHOD_NAME + "】" + _
    '                                    "【ワーニングコード:" + cfAppExp.p_strErrorCode + "】" + _
    '                                    "【ワーニング内容:" + cfAppExp.Message + "】")
    '        Throw

    '    Catch csExp As Exception

    '        ' エラーログ出力
    '        m_cfLogClass.ErrorWrite(m_cfControlData, _
    '                                    "【クラス名:" + THIS_CLASS_NAME + "】" + _
    '                                    "【メソッド名:" + THIS_METHOD_NAME + "】" + _
    '                                    "【エラー内容:" + csExp.Message + "】")
    '        Throw

    '    End Try

    'End Sub
    '* 履歴番号 000053 2014/09/10 追加終了
    '* 履歴番号 000055 2015/01/08 削除終了

    '*履歴番号 000027 2005/12/20 追加開始
    '************************************************************************************************
    '* メソッド名     インサートする住登外レコードを編集する
    '* 
    '* 構文           Public Function EditJutogaiRows(ByVal csJutogaiRows() As DataRow) As DataRow()
    '* 
    '* 機能 　    　　インサートする住登外レコードを編集する
    '* 
    '* 引数           DataRow(csJutogaiRows()) : 住登外データロウ(複数)
    '* 
    '* 戻り値         DataRow()：編集した住登外データロウ(複数)
    '************************************************************************************************
    Public Function EditJutogaiRows(ByVal csJutogaiRows() As DataRow, ByVal strJukiCkinST_YMD As String) As DataRow()
        '* corresponds to VS2008 Start 2010/04/16 000043
        'Const THIS_METHOD_NAME As String = "EditJutogaiRows"
        '* corresponds to VS2008 End 2010/04/16 000043
        Dim intIdx As Integer = 0
        Dim intNewIdx As Integer = 0
        Dim csNewJutogaiRow(0) As DataRow

        For intIdx = 0 To csJutogaiRows.Length - 1

            If CType(csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKST_YMD), String) = m_strGapeiDate AndAlso
                (CType(csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKED_YMD), String) = m_strBefGapeiDate OrElse
                 CType(csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKED_YMD), String) = "99999999") Then
                ' 住登外レコードの開始年月日が合併日　かつ　(終了年月日が合併日一日前　または　"99999999")の場合、
                ' この住登外レコードは必要なくなるので何もしない。

            ElseIf CType(csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKED_YMD), String) = m_strBefGapeiDate Then
                ' 住登外レコードの終了年月日が合併日一日前の場合、
                ' この住登外レコードの終了年月日を住基データ直近レコードの開始年月日の一日前を設定する。
                ' 履歴エンティティの新規ロウを取得する
                ReDim Preserve csNewJutogaiRow(intNewIdx)
                csNewJutogaiRow(intNewIdx) = m_csReRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).NewRow

                m_cfDateClass.p_strDateValue = strJukiCkinST_YMD
                csJutogaiRows(intIdx)(ABAtenaRirekiEntity.RRKED_YMD) = m_cfDateClass.AddDay(-1)
                csNewJutogaiRow(intNewIdx) = csJutogaiRows(intIdx)

                intNewIdx += 1
            Else
                ' それ以外はそのままセット
                ' 履歴エンティティの新規ロウを取得する
                ReDim Preserve csNewJutogaiRow(intNewIdx)
                csNewJutogaiRow(intNewIdx) = m_csReRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).NewRow

                csNewJutogaiRow(intNewIdx) = csJutogaiRows(intIdx)

                intNewIdx += 1
            End If

        Next intIdx

        Return csNewJutogaiRow

    End Function
    '*履歴番号 000027 2005/12/20 追加終了

    '*履歴番号 000036 2007/09/28 削除開始
    ''*履歴番号 000034 2007/08/31 追加開始
    ''************************************************************************************************
    ''* メソッド名     検索用カナ取得：外国人本名検索機能
    ''* 
    ''* 構文           Public Function GetSearchKana(ByVal strKanaMeisho As String,) As String
    ''* 
    ''* 機能           検索用カナ名称を編集する
    ''* 
    ''* 引数           strKanaMeisho As String     : カナ名称
    ''* 
    ''* 戻り値         String                      : カナ姓名（清音化，文字数24文字以内）
    ''************************************************************************************************
    'Private Function GetSearchKana(ByVal strKanaMeisho As String) As String
    '    Const THIS_METHOD_NAME As String = "GetSearchKana"                      'メソッド名
    '    Dim strSearchKana As String                         '検索用カナ
    '    Dim cuString As New USStringClass                   '文字列編集
    '    Dim intIndex As Integer                             '先頭からの空白位置

    '    Try
    '        ' デバッグ開始ログ出力
    '        m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

    '        '本名カナ姓名
    '        If (strKanaMeisho.Length > 0) Then
    '            strSearchKana = cuString.ToKanaKey((strKanaMeisho).Replace(" ", String.Empty)).ToUpper()
    '        Else
    '            strSearchKana = String.Empty
    '        End If

    '        '検索カナ姓の桁チェック
    '        If strSearchKana.Length > 24 Then
    '            strSearchKana = strSearchKana.Substring(0, 24)
    '        End If

    '        ' デバッグ終了ログ出力
    '        m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)


    '    Catch objAppExp As UFAppException    ' UFAppExceptionをキャッチ
    '        ' ワーニングログ出力
    '        m_cfLogClass.WarningWrite(m_cfControlData, _
    '                                    "【クラス名:" + THIS_CLASS_NAME + "】" + _
    '                                    "【メソッド名:" + THIS_METHOD_NAME + "】" + _
    '                                    "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" + _
    '                                    "【ワーニング内容:" + objAppExp.Message + "】")
    '        ' エラーをそのままスローする
    '        Throw objAppExp

    '    Catch objExp As Exception
    '        ' エラーログ出力
    '        m_cfLogClass.ErrorWrite(m_cfControlData, _
    '                                    "【クラス名:" + THIS_CLASS_NAME + "】" + _
    '                                    "【メソッド名:" + THIS_METHOD_NAME + "】" + _
    '                                    "【エラー内容:" + objExp.Message + "】")
    '        ' システムエラーをスローする
    '        Throw objExp
    '    End Try

    '    Return strSearchKana

    'End Function
    ''*履歴番号 000034 2007/08/31 追加終了
    '*履歴番号 000036 2007/09/28 削除終了

    '* 履歴番号 000044 2011/11/09 追加開始
#Region "宛名付随初期化"
    '************************************************************************************************
    '* メソッド名     宛名付随系DataRwo初期化処理
    '* 
    '* 構文           Private Sub ClearAtenaFZY(ByVal csFzyRow As DataRow)
    '* 
    '* 機能           宛名付随系DataRowの初期化を行う
    '* 
    '* 引数           csFzyRow As DataRow     : 付随行
    '************************************************************************************************
    Private Sub ClearAtenaFZY(ByVal csFzyRow As DataRow)
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            ' 項目の初期化
            For Each csDataColumn As DataColumn In csFzyRow.Table.Columns
                Select Case csDataColumn.ColumnName
                    Case ABAtenaFZYEntity.KOSHINCOUNTER, ABAtenaFZYEntity.LINKNO
                        csFzyRow(csDataColumn) = Decimal.Zero
                    Case Else
                        csFzyRow(csDataColumn) = String.Empty
                End Select
            Next csDataColumn

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
    End Sub
#End Region
#Region "宛名付随データ設定"
    '************************************************************************************************
    '* メソッド名     宛名付随データ設定処理
    '* 
    '* 構文           Private Function SetAtenaFzy(ByVal csAtenaFzyRow As DataRow, ByVal csAtenaRow As DataRow, ByVal csJukiDataRow As DataRow) As DataRow
    '* 
    '* 機能           宛名付随系DataRowの初期化を行う
    '* 
    '* 引数           csAtenaFzyRow As DataRow     : 宛名付随データ
    '*                csAtenaRow As DataRow        ：宛名データ
    '*                csJukiDataRow As DataRow     ：住基データ
    '*
    '* 戻り値         宛名付随のデータ設定を行う
    '************************************************************************************************
    Private Function SetAtenaFzy(ByVal csAtenaFzyRow As DataRow, ByVal csAtenaRow As DataRow, ByVal csJukiDataRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            'データ編集
            csAtenaFzyRow(ABAtenaFZYEntity.JUMINCD) = csAtenaRow(ABAtenaEntity.JUMINCD)
            csAtenaFzyRow(ABAtenaFZYEntity.SHICHOSONCD) = csAtenaRow(ABAtenaEntity.SHICHOSONCD)
            csAtenaFzyRow(ABAtenaFZYEntity.KYUSHICHOSONCD) = csAtenaRow(ABAtenaEntity.KYUSHICHOSONCD)
            csAtenaFzyRow(ABAtenaFZYEntity.JUMINJUTOGAIKB) = csAtenaRow(ABAtenaEntity.JUMINJUTOGAIKB)
            csAtenaFzyRow(ABAtenaFZYEntity.TABLEINSERTKB) = csJukiDataRow(ABJukiData.TABLEINSERTKB)
            csAtenaFzyRow(ABAtenaFZYEntity.LINKNO) = csJukiDataRow(ABJukiData.LINKNO)
            csAtenaFzyRow(ABAtenaFZYEntity.JUMINHYOJOTAIKBN) = csJukiDataRow(ABJukiData.JUMINHYOJOTAIKBN)
            csAtenaFzyRow(ABAtenaFZYEntity.JUKYOCHITODOKEFLG) = csJukiDataRow(ABJukiData.JUKYOCHITODOKEFLG)
            csAtenaFzyRow(ABAtenaFZYEntity.HONGOKUMEI) = csJukiDataRow(ABJukiData.HONGOKUMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.KANAHONGOKUMEI) = csJukiDataRow(ABJukiData.KANAHONGOKUMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.KANJIHEIKIMEI) = csJukiDataRow(ABJukiData.KANJIHEIKIMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.KANAHEIKIMEI) = csJukiDataRow(ABJukiData.KANAHEIKIMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.KANJITSUSHOMEI) = csJukiDataRow(ABJukiData.KANJITSUSHOMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.KANATSUSHOMEI) = csJukiDataRow(ABJukiData.KANATSUSHOMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.KATAKANAHEIKIMEI) = csJukiDataRow(ABJukiData.KATAKANAHEIKIMEI)
            '* 履歴番号 000045 2011/11/28 追加開始
            If csJukiDataRow(ABJukiData.FUSHOUMAREBI).ToString.Trim.RLength > 0 Then
                csAtenaFzyRow(ABAtenaFZYEntity.UMAREFUSHOKBN) = ABConstClass.UMAREFUSHOKBN_FUSHO_YMD
            Else
                csAtenaFzyRow(ABAtenaFZYEntity.UMAREFUSHOKBN) = ABConstClass.UMAREFUSHOKBN_FUSHONASHI
            End If
            '* 履歴番号 000045 2011/11/28 追加終了
            csAtenaFzyRow(ABAtenaFZYEntity.TSUSHOMEITOUROKUYMD) = csJukiDataRow(ABJukiData.TSUSHOMEITOUROKUYMD)
            csAtenaFzyRow(ABAtenaFZYEntity.ZAIRYUKIKANCD) = csJukiDataRow(ABJukiData.ZAIRYUKIKANCD)
            csAtenaFzyRow(ABAtenaFZYEntity.ZAIRYUKIKANMEISHO) = csJukiDataRow(ABJukiData.ZAIRYUKIKANMEISHO)
            csAtenaFzyRow(ABAtenaFZYEntity.ZAIRYUSHACD) = csJukiDataRow(ABJukiData.ZAIRYUSHACD)
            csAtenaFzyRow(ABAtenaFZYEntity.ZAIRYUSHAMEISHO) = csJukiDataRow(ABJukiData.ZAIRYUSHAMEISHO)
            csAtenaFzyRow(ABAtenaFZYEntity.ZAIRYUCARDNO) = csJukiDataRow(ABJukiData.ZAIRYUCARDNO)
            csAtenaFzyRow(ABAtenaFZYEntity.KOFUYMD) = csJukiDataRow(ABJukiData.KOFUYMD)
            csAtenaFzyRow(ABAtenaFZYEntity.KOFUYOTEISTYMD) = csJukiDataRow(ABJukiData.KOFUYOTEISTYMD)
            csAtenaFzyRow(ABAtenaFZYEntity.KOFUYOTEIEDYMD) = csJukiDataRow(ABJukiData.KOFUYOTEIEDYMD)
            csAtenaFzyRow(ABAtenaFZYEntity.JUKITAISHOSHASHOJOIDOYMD) = csJukiDataRow(ABJukiData.JUKITAISHOSHASHOJOIDOYMD)
            csAtenaFzyRow(ABAtenaFZYEntity.JUKITAISHOSHASHOJOJIYUCD) = csJukiDataRow(ABJukiData.JUKITAISHOSHASHOJOJIYUCD)
            csAtenaFzyRow(ABAtenaFZYEntity.JUKITAISHOSHASHOJOJIYU) = csJukiDataRow(ABJukiData.JUKITAISHOSHASHOJOJIYU)
            csAtenaFzyRow(ABAtenaFZYEntity.JUKITAISHOSHASHOJOTDKDYMD) = csJukiDataRow(ABJukiData.JUKITAISHOSHASHOJOTDKDYMD)
            csAtenaFzyRow(ABAtenaFZYEntity.JUKITAISHOSHASHOJOTDKDTUCIKB) = csJukiDataRow(ABJukiData.JUKITAISHOSHASHOJOTDKDTUCIKB)
            csAtenaFzyRow(ABAtenaFZYEntity.FRNSTAINUSMEI) = csJukiDataRow(ABJukiData.FRNSTAINUSMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.FRNSTAINUSKANAMEI) = csJukiDataRow(ABJukiData.FRNSTAINUSKANAMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.STAINUSHEIKIMEI) = csJukiDataRow(ABJukiData.STAINUSHEIKIMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.STAINUSKANAHEIKIMEI) = csJukiDataRow(ABJukiData.STAINUSKANAHEIKIMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.STAINUSTSUSHOMEI) = csJukiDataRow(ABJukiData.STAINUSTSUSHOMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.STAINUSKANATSUSHOMEI) = csJukiDataRow(ABJukiData.STAINUSKANATSUSHOMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.TENUMAEJ_STAINUSMEI_KYOTSU) = csJukiDataRow(ABJukiData.TENUMAEJ_STAINUSMEI_KYOTSU)
            csAtenaFzyRow(ABAtenaFZYEntity.TENUMAEJ_STAINUSHEIKIMEI) = csJukiDataRow(ABJukiData.TENUMAEJ_STAINUSHEIKIMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.TENUMAEJ_STAINUSTSUSHOMEI) = csJukiDataRow(ABJukiData.TENUMAEJ_STAINUSTSUSHOMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.TENSHUTSUYOTEISTAINUSMEI_KYOTSU) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISTAINUSMEI_KYOTSU)
            csAtenaFzyRow(ABAtenaFZYEntity.TENSHUTSUYOTEISTAINUSHEIKIMEI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISTAINUSHEIKIMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.TENSHUTSUYOTEISTAINUSTSUSHOMEI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISTAINUSTSUSHOMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.TENSHUTSUKKTISTAINUSMEI_KYOTSU) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISTAINUSMEI_KYOTSU)
            csAtenaFzyRow(ABAtenaFZYEntity.TENSHUTSUKKTISTAINUSHEIKIMEI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISTAINUSHEIKIMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.TENSHUTSUKKTISTAINUSTSUSHOMEI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISTAINUSTSUSHOMEI)
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE1) = csJukiDataRow(ABJukiData.FRNRESERVE1)
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE2) = csJukiDataRow(ABJukiData.FRNRESERVE2)
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE3) = csJukiDataRow(ABJukiData.FRNRESERVE3)
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE4) = csJukiDataRow(ABJukiData.FRNRESERVE4)
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE5) = csJukiDataRow(ABJukiData.FRNRESERVE5)
            '* 履歴番号 000050 2014/06/25 修正開始
            'csAtenaFzyRow(ABAtenaFZYEntity.RESERVE6) = csJukiDataRow(ABJukiData.JUKIRESERVE1)
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE6) = String.Empty
            '* 履歴番号 000050 2014/06/25 修正終了
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE7) = csJukiDataRow(ABJukiData.JUKIRESERVE2)
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE8) = csJukiDataRow(ABJukiData.JUKIRESERVE3)
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE9) = csJukiDataRow(ABJukiData.JUKIRESERVE4)
            csAtenaFzyRow(ABAtenaFZYEntity.RESERVE10) = csJukiDataRow(ABJukiData.JUKIRESERVE5)

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csAtenaFzyRow
    End Function
#End Region

#Region "宛名履歴付随データ設定"
    '************************************************************************************************
    '* メソッド名     宛名履歴付随データ設定処理
    '* 
    '* 構文           Private Function SetAtenaRirekiFzy(ByVal csAtenaRirekiFzy As DataRow, ByVal csAtenaFzyRow As DataRow) As DataRow
    '* 
    '* 機能           宛名付随系DataRowの初期化を行う
    '* 
    '* 引数           csAtenaRirekiFzy As DataRow     : 宛名履歴付随データ
    '*                csAtenaFzyRow As DataRow        ：宛名付随データ
    '*
    '* 戻り値         宛名履歴付随のデータ設定を行う
    '************************************************************************************************
    Private Function SetAtenaRirekiFzy(ByVal csAtenaRirekiFzy As DataRow, ByVal csAtenaFzyRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            '付随から履歴付随にセット
            For Each csColumn As DataColumn In csAtenaFzyRow.Table.Columns
                If (csAtenaRirekiFzy(csColumn.ColumnName) IsNot Nothing) Then
                    '列があった時だけ設定
                    csAtenaRirekiFzy(csColumn.ColumnName) = csAtenaFzyRow(csColumn.ColumnName)
                Else
                    '何もしない
                End If
            Next

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csAtenaRirekiFzy
    End Function
#End Region
#Region "宛名累積付随データ設定"
    '************************************************************************************************
    '* メソッド名     宛名累積付随データ設定処理
    '* 
    '* 構文           Private Function SetAtenaRirekiFzy(ByVal csAtenaRirekiFzy As DataRow, ByVal csAtenaFzyRow As DataRow) As DataRow
    '* 
    '* 機能           宛名付随系DataRowの初期化を行う
    '* 
    '* 引数           csAtenaRuisekiFzyRow As DataRow     : 宛名累積付随データ
    '*                csAtenaRirekiRow As DataRow        ：宛名履歴データ
    '*                csAtenaRuisekiRow As DataRow       ：宛名累積データ
    '*
    '* 戻り値         宛名履歴付随から宛名累積付随を作る
    '************************************************************************************************
    Private Function SetAtenaRuisekiFzy(ByVal csAtenaRuisekiFzyRow As DataRow, ByVal csAtenaRirekiRow As DataRow, ByVal csAtenaRuisekiRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            '履歴or付随履歴から付随累積にセット
            For Each csColumn As DataColumn In csAtenaRirekiRow.Table.Columns
                If (csAtenaRuisekiFzyRow.Table.Columns.Contains(csColumn.ColumnName)) Then
                    '列があった時だけセット
                    csAtenaRuisekiFzyRow(csColumn.ColumnName) = csAtenaRirekiRow(csColumn.ColumnName)
                Else
                    '何もしない
                End If
            Next

            '処理日時と前後区分は累積からセット
            csAtenaRuisekiFzyRow(ABAtenaRuisekiFZYEntity.SHORINICHIJI) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHORINICHIJI)
            csAtenaRuisekiFzyRow(ABAtenaRuisekiFZYEntity.ZENGOKB) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.ZENGOKB)

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csAtenaRuisekiFzyRow
    End Function
#End Region
#Region "宛名履歴付随直近データ取得"
    '************************************************************************************************
    '* メソッド名     宛名履歴付随直近データ取得
    '* 
    '* 構文           Private Function GetChokkin_RirekiFzy(ByVal csAtenaRirekiFzy As DataSet, ByVal strJuminCD As String, ByVal strRirekiNo As String) As DataRow
    '* 
    '* 機能           宛名付随系DataRowの初期化を行う
    '* 
    '* 引数           csAtenaRirekiFzy As DataSet     : 宛名履歴付随データ
    '*                strJuminCD As String            ：住民コード
    '*                strRirekiNo As String           ：履歴番号
    '*
    '* 戻り値         宛名履歴付随を引数の条件で検索し、結果の０番目を返す。無い時はNothingを返す
    '************************************************************************************************
    Private Function GetChokkin_RirekiFzy(ByVal csAtenaRirekiFzy As DataSet, ByVal strJuminCD As String, ByVal strRirekiNo As String) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Dim csSelectedRows As DataRow() '検索結果配列
        Dim csCkinRow As DataRow        '直近行
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            If (csAtenaRirekiFzy IsNot Nothing) Then
                '引数宛名履歴付随がNothingでない時
                csSelectedRows = csAtenaRirekiFzy.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).Select(
                    String.Format("{0}='{1}' AND {2}='{3}'",
                          ABAtenaRirekiFZYEntity.JUMINCD, strJuminCD,
                          ABAtenaRirekiFZYEntity.RIREKINO, strRirekiNo))
                If (csSelectedRows.Count > 0) Then
                    '直近データが存在した時、０行目を取っておく
                    csCkinRow = csSelectedRows(0)
                Else
                    'それ以外の時、Nothingで返す
                    csCkinRow = Nothing
                End If
            Else
                'Nothingの時はNothingで返す
                csCkinRow = Nothing
            End If


            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csCkinRow
    End Function
#End Region
    '* 履歴番号 000044 2011/11/09 追加終了

    '* 履歴番号 000050 2014/06/25 追加開始
#Region "共通番号マスタの更新判定"

    ''' <summary>
    ''' 共通番号マスタの更新判定
    ''' </summary>
    ''' <param name="csDataRow">住基データ</param>
    ''' <returns>更新判定結果（True：更新する、False：更新しない）</returns>
    ''' <remarks></remarks>
    Private Function IsUpdateMyNumber(
        ByVal csDataRow As DataRow) As Boolean

        Dim blnResult As Boolean = False

        Try

            ' 処理事由判定
            Select Case csDataRow.Item(ABJukiData.SHORIJIYUCD).ToString
                '* 履歴番号 000054 2014/12/26 修正開始
                '* 履歴番号 000052 2014/09/10 修正開始
                '* 履歴番号 000051 2014/07/08 修正開始
                'Case ABEnumDefine.ABJukiShoriJiyuType.TokushuTsuika.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.Tennyu.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.Shussei.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.ShokkenKisai.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoShusei.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoHenko.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoKisai.GetHashCode.ToString("00")
                '    ' "02"（特殊追加）、"10"（転入）、"11"（出生）、"12"（職権記載）
                '    ' "05"（個人番号修正）、"48"（個人番号変更請求）、"49"（個人番号職権記載）
                'Case ABEnumDefine.ABJukiShoriJiyuType.TokushuTsuika.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.Tennyu.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.Shussei.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.ShokkenKisai.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.TenshutsuTorikeshi.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.Kaifuku.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoShusei.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoKisai.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoHenko.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoShokkenShusei.GetHashCode.ToString("00")
                '    ' "02"（特殊追加）、"10"（転入）、"11"（出生）、"12"（職権記載）
                '    ' "43"（転出取消）、"44"（回復）
                '    ' "05"（個人番号修正）、"06"（個人番号職権記載）、"48"（個人番号変更請求）、"49"（個人番号職権修正）
                'Case ABEnumDefine.ABJukiShoriJiyuType.TokushuTsuika.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.Tennyu.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.Shussei.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.ShokkenKisai.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.ShokkenShusei.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.TenshutsuTorikeshi.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.Kaifuku.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoShusei.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoKisai.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoHenko.GetHashCode.ToString("00"), _
                '     ABEnumDefine.ABJukiShoriJiyuType.KojinNoShokkenShusei.GetHashCode.ToString("00")
                '    ' "02"（特殊追加）、"10"（転入）、"11"（出生）、"12"（職権記載）
                '    ' "41"（職権修正）、"43"（転出取消）、"44"（回復）
                '    ' "05"（個人番号修正）、"06"（個人番号職権記載）、"48"（個人番号変更請求）、"49"（個人番号職権修正）
                Case ABEnumDefine.ABJukiShoriJiyuType.TokushuTsuika.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.Tennyu.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.Shussei.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.ShokkenKisai.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.JushoSettei.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.ShokkenShusei.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.TenshutsuTorikeshi.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.TennyuTsuchiJuri.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.Kaifuku.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.KojinNoShusei.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.KojinNoKisai.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.KojinNoHenko.GetHashCode.ToString("00"),
                     ABEnumDefine.ABJukiShoriJiyuType.KojinNoShokkenShusei.GetHashCode.ToString("00")
                    ' "02"（特殊追加）、"10"（転入）、"11"（出生）、"12"（職権記載）、"15"（住所設定）
                    ' "41"（職権修正）、"43"（転出取消）、"44"（回復）、"45"（転入通知受理）
                    ' "05"（個人番号修正）、"06"（個人番号職権記載）、"48"（個人番号変更請求）、"49"（個人番号職権修正）
                    '* 履歴番号 000051 2014/07/08 修正終了
                    '* 履歴番号 000052 2014/09/10 修正終了
                    '* 履歴番号 000054 2014/12/26 修正終了
                    blnResult = True
                Case Else
                    blnResult = False
            End Select

        Catch csExp As Exception
            Throw
        End Try

        Return blnResult

    End Function

#End Region

#Region "住民判定"

    '* 履歴番号 000057 2015/02/17 削除開始
    '''' <summary>
    '''' 住民判定
    '''' </summary>
    '''' <param name="csDataRow">住基データ</param>
    '''' <returns>住民判定結果（True：住民、False：住民以外）</returns>
    '''' <remarks></remarks>
    'Private Function IsJumin( _
    '    ByVal csDataRow As DataRow) As Boolean

    '    Dim blnResult As Boolean = False

    '    Try

    '        ' 住民判定
    '        Select Case csDataRow.Item(ABJukiData.JUMINSHU).ToString
    '            Case ABConstClass.JUMINSHU_NIHONJIN_JUMIN, _
    '                 ABConstClass.JUMINSHU_GAIKOKUJIN_JUMIN
    '                ' "10"（日本人住民）、"20"（外国人住民）
    '                blnResult = True
    '            Case Else
    '                blnResult = False
    '        End Select

    '    Catch csExp As Exception
    '        Throw
    '    End Try

    '    Return blnResult

    'End Function
    '* 履歴番号 000057 2015/02/17 削除終了

#End Region

#Region "共通番号の取得"

    ''' <summary>
    ''' 共通番号の取得
    ''' </summary>
    ''' <param name="csDataRow">住基データ</param>
    ''' <returns>共通番号（要素0：共通番号、要素1：旧共通番号）</returns>
    ''' <remarks></remarks>
    Private Function GetMyNumber(
        ByVal csDataRow As DataRow) As String()

        Dim a_strResult() As String = {String.Empty, String.Empty}
        Dim a_strMyNumber() As String
        Const SEPARATOR As String = ","c

        Try

            ' 住基リザーブ１をカンマで分割する
            a_strMyNumber = csDataRow.Item(ABJukiData.JUKIRESERVE1).ToString.Split(SEPARATOR.ToCharArray)

            ' 共通番号
            a_strResult(ABMyNumberType.New) = a_strMyNumber(ABMyNumberType.New)

            ' 旧共通番号
            If (a_strMyNumber.Length > 1) Then
                a_strResult(ABMyNumberType.Old) = a_strMyNumber(ABMyNumberType.Old)
            Else
                a_strResult(ABMyNumberType.Old) = String.Empty
            End If

        Catch csExp As Exception
            Throw
        End Try

        Return a_strResult

    End Function

#End Region

#Region "共通番号パラメータークラスの設定"

    ''' <summary>
    ''' 共通番号パラメータークラスの設定
    ''' </summary>
    ''' <param name="csDataRow">住基データ</param>
    ''' <param name="strMyNumber">共通番号</param>
    ''' <returns>共通番号パラメータークラス</returns>
    ''' <remarks></remarks>
    Private Function SetMyNumber(
        ByVal csDataRow As DataRow,
        ByVal strMyNumber As String) As ABMyNumberPrmXClass

        Dim csResult As ABMyNumberPrmXClass = Nothing

        Try

            csResult = New ABMyNumberPrmXClass
            With csResult
                .p_strJuminCD = csDataRow.Item(ABJukiData.JUMINCD).ToString
                .p_strShichosonCD = csDataRow.Item(ABJukiData.SHICHOSONCD).ToString
                .p_strKyuShichosonCD = csDataRow.Item(ABJukiData.KYUSHICHOSONCD).ToString
                .p_strMyNumber = strMyNumber
                .p_strCkinKB = ABMyNumberEntity.DEFAULT.CKINKB.CKIN
                .p_strIdoKB = ABMyNumberEntity.DEFAULT.IDOKB.JUKIIDO
                .p_strIdoYMD = m_cfRdbClass.GetSystemDate.ToString("yyyyMMdd")
                .p_strIdoSha = m_cfControlData.m_strUserName
                .p_strReserve = String.Empty
            End With

        Catch csExp As Exception
            Throw
        End Try

        Return csResult

    End Function

#End Region

#Region "共通番号マスタの更新処理"

    '* 履歴番号 000054 2014/12/26 修正開始
    '''' <summary>
    '''' 共通番号マスタの更新処理
    '''' </summary>
    '''' <param name="cABMyNumberPrm">共通番号パラメータークラス</param>
    '''' <param name="strShoriNichiji">処理日時</param>
    '''' <returns>更新件数</returns>
    '''' <remarks>通常処理に使用します。</remarks>
    'Public Overloads Function UpdateMyNumber( _
    '    ByVal cABMyNumberPrm As ABMyNumberPrmXClass, _
    '    ByVal strShoriNichiji As String) As Integer
    '* 履歴番号 000056 2015/01/28 修正開始
    '''' <summary>
    '''' 共通番号マスタの更新処理
    '''' </summary>
    '''' <param name="cABMyNumberPrm">共通番号パラメータークラス</param>
    '''' <param name="strShoriNichiji">処理日時</param>
    '''' <param name="blnIsJuminFG">住民フラグ</param>
    '''' <returns>更新件数</returns>
    '''' <remarks>通常処理に使用します。</remarks>
    'Public Overloads Function UpdateMyNumber( _
    '    ByVal cABMyNumberPrm As ABMyNumberPrmXClass, _
    '    ByVal strShoriNichiji As String, _
    '    ByVal blnIsJuminFG As Boolean) As Integer
    ''' <summary>
    ''' 共通番号マスタの更新処理
    ''' </summary>
    ''' <param name="cABMyNumberPrm">共通番号パラメータークラス</param>
    ''' <param name="strShoriNichiji">処理日時</param>
    ''' <returns>更新件数</returns>
    ''' <remarks>通常処理に使用します。</remarks>
    Public Overloads Function UpdateMyNumber(
        ByVal cABMyNumberPrm As ABMyNumberPrmXClass,
        ByVal strShoriNichiji As String) As Integer
        '* 履歴番号 000056 2015/01/28 修正終了
        '* 履歴番号 000054 2014/12/26 修正終了

        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name

        Dim intKoshinCount As Integer
        Dim intCount As Integer
        Dim cfErrorClass As UFErrorClass
        Dim objErrorStruct As UFErrorStruct
        Dim csABMyNumberEntity As DataSet
        Dim csABMyNumberRuisekiEntity As DataSet
        Dim csDataSet As DataSet
        Dim csNewRow As DataRow
        Dim csRrkDataSet As DataSet
        Dim strShoriKB As String
        Dim csABMyNumberHyojunEntity As DataSet
        Dim csABMyNumberRuisekiHyojunEntity As DataSet
        Dim csMyNumberDS As DataSet
        Dim csHyojunNewRow As DataRow
        Dim csRuisekiNewRow As DataRow

        Try

            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            ' ---------------------------------------------------------------------------------------------------------

            ' 共通番号のスキーマを取得
            csABMyNumberEntity = m_cfRdbClass.GetTableSchema(ABMyNumberEntity.TABLE_NAME)

            ' 共通番号累積のスキーマを取得
            csABMyNumberRuisekiEntity = m_cfRdbClass.GetTableSchema(ABMyNumberRuisekiEntity.TABLE_NAME)

            '共通番号標準
            csABMyNumberHyojunEntity = m_cfRdbClass.GetTableSchema(ABMyNumberHyojunEntity.TABLE_NAME)
            '共通番号累積標準
            csABMyNumberRuisekiHyojunEntity = m_cfRdbClass.GetTableSchema(ABMyNumberRuisekiHyojunEntity.TABLE_NAME)

            ' ---------------------------------------------------------------------------------------------------------
            ' 【共通番号存在有無を判定】

            If (cABMyNumberPrm.p_strMyNumber.Trim.RLength > 0) Then
                ' noop
            Else
                ' 共通番号に値が存在しないため、更新件数0にて処理を離脱する。（通常処理では、値なしでの更新は行わない。）
                Return 0
            End If

            '* 履歴番号 000056 2015/01/28 削除開始
            ''* 履歴番号 000054 2014/12/26 追加開始
            '' ---------------------------------------------------------------------------------------------------------
            '' 【共通番号マスタのレコード有無を判定】　※除票者に対する更新の考慮

            '' 住民フラグを判定
            'If (blnIsJuminFG = True) Then
            '    ' noop
            'Else

            '    ' 既存レコードの取得
            '    csDataSet = m_cABMyNumberB.SelectByJuminCd(cABMyNumberPrm.p_strJuminCD, String.Empty)

            '    If (csDataSet IsNot Nothing _
            '        AndAlso csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then
            '        ' 既存レコードが存在するため、更新件数0にて処理を離脱する。（除票者に対しては、新規付番のみ行う。）
            '        Return 0
            '    Else
            '        ' noop
            '    End If

            'End If

            '' ---------------------------------------------------------------------------------------------------------
            ''* 履歴番号 000054 2014/12/26 追加終了
            '* 履歴番号 000056 2015/01/28 削除終了

            ' ---------------------------------------------------------------------------------------------------------
            ' 【直近の共通番号変更有無を判定】

            ' 直近レコードの取得
            csDataSet = m_cABMyNumberB.SelectByJuminCd(cABMyNumberPrm.p_strJuminCD)

            If (csDataSet IsNot Nothing _
                 AndAlso csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then

                ' 共通番号の変更有無を判定
                If (cABMyNumberPrm.p_strMyNumber.Trim =
                    csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0).Item(ABMyNumberEntity.MYNUMBER).ToString.Trim) Then
                    ' 直近の共通番号に変更がないため、更新件数0にて処理を離脱する。
                    Return 0
                Else
                    ' noop
                End If

            Else
                ' noop
            End If

            ' ---------------------------------------------------------------------------------------------------------
            ' 【共通番号の更新】

            ' 更新後同一キーレコードの取得
            csDataSet = m_cABMyNumberB.SelectByKey(cABMyNumberPrm.p_strJuminCD, cABMyNumberPrm.p_strMyNumber)

            If (csDataSet IsNot Nothing _
                 AndAlso csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then

                ' -----------------------------------------------------------------------------------------------------

                ' 処理区分を設定
                strShoriKB = ABMyNumberRuisekiEntity.DEFAULT.SHORIKB.UPD

                ' -----------------------------------------------------------------------------------------------------
                ' 【共通番号累積マスタの更新（異動前）】

                ' 共通番号累積DataRowの生成
                csNewRow = CreateMyNumberRuiseki(
                                csABMyNumberRuisekiEntity,
                                csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0),
                                strShoriNichiji,
                                strShoriKB,
                                ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.MAE)

                ' 共通番号累積追加処理
                m_cABMyNumberRuisekiB.Insert(csNewRow)

                ' -----------------------------------------------------------------------------------------------------
                ' 【共通番号の更新】

                With csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0)
                    .BeginEdit()
                    .Item(ABMyNumberEntity.CKINKB) = cABMyNumberPrm.p_strCkinKB
                    .EndEdit()
                End With
                intCount = m_cABMyNumberB.Update(csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0))
                If (intCount <> 1) Then
                    cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                    objErrorStruct = cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                    Throw New UFAppException(String.Concat(objErrorStruct.m_strErrorMessage, "共通番号"), objErrorStruct.m_strErrorCode)
                Else
                    ' noop
                End If

                ' 返信値へ設定
                intKoshinCount += intCount

                ' -----------------------------------------------------------------------------------------------------

            Else

                ' -----------------------------------------------------------------------------------------------------

                ' 処理区分を設定
                strShoriKB = ABMyNumberRuisekiEntity.DEFAULT.SHORIKB.INS

                ' -----------------------------------------------------------------------------------------------------
                ' 【共通番号の追加】

                csNewRow = csABMyNumberEntity.Tables(ABMyNumberEntity.TABLE_NAME).NewRow
                With csNewRow
                    .BeginEdit()
                    .Item(ABMyNumberEntity.JUMINCD) = cABMyNumberPrm.p_strJuminCD
                    .Item(ABMyNumberEntity.SHICHOSONCD) = cABMyNumberPrm.p_strShichosonCD
                    .Item(ABMyNumberEntity.KYUSHICHOSONCD) = cABMyNumberPrm.p_strKyuShichosonCD
                    .Item(ABMyNumberEntity.MYNUMBER) = cABMyNumberPrm.p_strMyNumber
                    .Item(ABMyNumberEntity.CKINKB) = cABMyNumberPrm.p_strCkinKB
                    .Item(ABMyNumberEntity.IDOKB) = cABMyNumberPrm.p_strIdoKB
                    .Item(ABMyNumberEntity.IDOYMD) = cABMyNumberPrm.p_strIdoYMD
                    .Item(ABMyNumberEntity.IDOSHA) = cABMyNumberPrm.p_strIdoSha
                    .Item(ABMyNumberEntity.RESERVE) = cABMyNumberPrm.p_strReserve
                    .EndEdit()
                End With
                csABMyNumberEntity.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Add(csNewRow)
                intKoshinCount += m_cABMyNumberB.Insert(csNewRow)

                ' -----------------------------------------------------------------------------------------------------
                '共通番号標準
                csMyNumberDS = m_csABMyNumberHyojunB.SelectByKey(cABMyNumberPrm.p_strJuminCD, cABMyNumberPrm.p_strMyNumber)
                If (csMyNumberDS IsNot Nothing _
                    AndAlso csMyNumberDS.Tables(ABMyNumberHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                Else
                    csHyojunNewRow = CreateMyNumberHyojun(csABMyNumberHyojunEntity, cABMyNumberPrm)
                    m_csABMyNumberHyojunB.Insert(csHyojunNewRow)
                    '共通番号累積標準
                    csRuisekiNewRow = CreateMyNumberRuisekiHyojun(csABMyNumberRuisekiHyojunEntity, csHyojunNewRow,
                                                                  cABMyNumberPrm, strShoriNichiji, ABMyNumberRuisekiHyojunEntity.DEFAULT.ZENGOKB.ATO)
                    m_csAbMyNumberRuisekiHyojunB.Insert(csRuisekiNewRow)
                End If
            End If

            ' ---------------------------------------------------------------------------------------------------------
            ' 【共通番号累積マスタの更新（異動後）】

            ' 更新後同一キーレコードの取得
            csDataSet = m_cABMyNumberB.SelectByKey(cABMyNumberPrm.p_strJuminCD, cABMyNumberPrm.p_strMyNumber)

            If (csDataSet IsNot Nothing _
                 AndAlso csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then

                ' 共通番号累積DataRowの生成
                csNewRow = CreateMyNumberRuiseki(
                                csABMyNumberRuisekiEntity,
                                csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0),
                                strShoriNichiji,
                                strShoriKB,
                                ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.ATO)

                ' 共通番号累積追加処理
                m_cABMyNumberRuisekiB.Insert(csNewRow)

            Else
                ' noop
            End If

            ' ---------------------------------------------------------------------------------------------------------
            ' 【処理日時のインクリメント】

            strShoriNichiji = (CType(strShoriNichiji, Long) + 1000).ToString

            ' ---------------------------------------------------------------------------------------------------------
            ' 【更新後同一キーレコード以外を履歴化】

            ' 全履歴レコードの取得
            csDataSet = m_cABMyNumberB.SelectByJuminCd(cABMyNumberPrm.p_strJuminCD, String.Empty)

            If (csDataSet IsNot Nothing _
                 AndAlso csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then

                For Each csDataRow As DataRow In csDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows

                    ' 共通番号値有無判定
                    If (csDataRow.Item(ABMyNumberEntity.MYNUMBER).ToString.Trim.RLength > 0) Then

                        ' 更新後同一キーレコード判定
                        If (cABMyNumberPrm.p_strMyNumber.Trim =
                            csDataRow.Item(ABMyNumberEntity.MYNUMBER).ToString.Trim) Then
                            ' noop
                        Else

                            ' 直近判定
                            If (csDataRow.Item(ABMyNumberEntity.CKINKB).ToString = ABMyNumberEntity.DEFAULT.CKINKB.CKIN) Then

                                ' -------------------------------------------------------------------------------------

                                ' 処理区分を設定
                                strShoriKB = ABMyNumberRuisekiEntity.DEFAULT.SHORIKB.UPD

                                ' -------------------------------------------------------------------------------------
                                ' 【共通番号累積マスタの更新（異動前）】

                                ' 共通番号累積DataRowの生成
                                csNewRow = CreateMyNumberRuiseki(
                                                csABMyNumberRuisekiEntity,
                                                csDataRow,
                                                strShoriNichiji,
                                                strShoriKB,
                                                ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.MAE)

                                ' 共通番号累積追加処理
                                m_cABMyNumberRuisekiB.Insert(csNewRow)

                                ' -------------------------------------------------------------------------------------
                                ' 【既存レコードの履歴化】

                                csDataRow.BeginEdit()
                                csDataRow.Item(ABMyNumberEntity.CKINKB) = ABMyNumberEntity.DEFAULT.CKINKB.RRK
                                csDataRow.EndEdit()
                                intCount = m_cABMyNumberB.Update(csDataRow)
                                If (intCount <> 1) Then
                                    cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                                    objErrorStruct = cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                                    Throw New UFAppException(String.Concat(objErrorStruct.m_strErrorMessage, "共通番号"), objErrorStruct.m_strErrorCode)
                                Else
                                    ' noop
                                End If

                                ' 返信値へ設定
                                intKoshinCount += intCount

                                ' -------------------------------------------------------------------------------------
                                ' 【共通番号累積マスタの更新（異動後）】

                                ' 履歴化したレコードの取得
                                csRrkDataSet = m_cABMyNumberB.SelectByKey(
                                                csDataRow.Item(ABMyNumberEntity.JUMINCD).ToString,
                                                csDataRow.Item(ABMyNumberEntity.MYNUMBER).ToString)

                                If (csRrkDataSet IsNot Nothing _
                                     AndAlso csRrkDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then

                                    ' 共通番号累積DataRowの生成
                                    csNewRow = CreateMyNumberRuiseki(
                                                    csABMyNumberRuisekiEntity,
                                                    csRrkDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0),
                                                    strShoriNichiji,
                                                    strShoriKB,
                                                    ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.ATO)

                                    ' 共通番号累積追加処理
                                    m_cABMyNumberRuisekiB.Insert(csNewRow)

                                Else
                                    ' noop
                                End If

                                ' -------------------------------------------------------------------------------------
                                ' 【処理日時のインクリメント】

                                strShoriNichiji = (CType(strShoriNichiji, Long) + 1000).ToString

                                ' -------------------------------------------------------------------------------------

                            Else
                                ' noop
                            End If

                            ' -----------------------------------------------------------------------------------------

                        End If

                        ' ---------------------------------------------------------------------------------------------

                    Else

                        ' ---------------------------------------------------------------------------------------------

                        ' 処理区分を設定
                        strShoriKB = ABMyNumberRuisekiEntity.DEFAULT.SHORIKB.DEL

                        ' ---------------------------------------------------------------------------------------------
                        ' 【共通番号累積マスタの更新（異動前）】

                        ' 共通番号累積DataRowの生成
                        csNewRow = CreateMyNumberRuiseki(
                                        csABMyNumberRuisekiEntity,
                                        csDataRow,
                                        strShoriNichiji,
                                        strShoriKB,
                                        ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.MAE)

                        ' 共通番号累積追加処理
                        m_cABMyNumberRuisekiB.Insert(csNewRow)

                        ' ---------------------------------------------------------------------------------------------
                        ' 【共通番号なしレコードの削除】

                        intCount = m_cABMyNumberB.Delete(csDataRow)
                        If (intCount <> 1) Then
                            cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                            objErrorStruct = cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                            Throw New UFAppException(String.Concat(objErrorStruct.m_strErrorMessage, "共通番号"), objErrorStruct.m_strErrorCode)
                        Else
                            ' noop
                        End If

                        ' 返信値へ設定
                        intKoshinCount += intCount

                        ' ---------------------------------------------------------------------------------------------
                        ' 【共通番号累積マスタの更新（異動後）】

                        ' 共通番号累積DataRowの生成
                        csNewRow.BeginEdit()
                        csNewRow.Item(ABMyNumberRuisekiEntity.ZENGOKB) = ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.ATO
                        csNewRow.EndEdit()

                        ' 共通番号累積追加処理
                        m_cABMyNumberRuisekiB.Insert(csNewRow)

                        ' ---------------------------------------------------------------------------------------------
                        ' 【処理日時のインクリメント】

                        strShoriNichiji = (CType(strShoriNichiji, Long) + 1000).ToString

                        ' ---------------------------------------------------------------------------------------------

                    End If

                    ' -------------------------------------------------------------------------------------------------

                Next csDataRow

            Else
                ' noop
            End If

            ' ---------------------------------------------------------------------------------------------------------

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch cfAppExp As UFAppException

            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + cfAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + cfAppExp.Message + "】")

            ' エラーをそのままスローする
            Throw

        Catch csExp As Exception

            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + csExp.Message + "】")

            ' エラーをそのままスローする
            Throw

        End Try

        Return intKoshinCount

    End Function

    '* 履歴番号 000057 2015/02/17 修正開始
    '''' <summary>
    '''' 共通番号マスタの更新処理
    '''' </summary>
    '''' <param name="cABMyNumberPrm">共通番号パラメータークラス</param>
    '''' <param name="strShoriNichiji">処理日時</param>
    '''' <param name="strOldMyNumber">旧共通番号</param>
    '''' <param name="blnIsJuminFG">住民フラグ</param>
    '''' <returns>更新件数</returns>
    '''' <remarks>特殊処理に使用します。</remarks>
    'Public Overloads Function UpdateMyNumber( _
    '    ByVal cABMyNumberPrm As ABMyNumberPrmXClass, _
    '    ByVal strShoriNichiji As String, _
    '    ByVal strOldMyNumber As String, _
    '    ByVal blnIsJuminFG As Boolean) As Integer
    ''' <summary>
    ''' 共通番号マスタの更新処理
    ''' </summary>
    ''' <param name="cABMyNumberPrm">共通番号パラメータークラス</param>
    ''' <param name="strShoriNichiji">処理日時</param>
    ''' <param name="strOldMyNumber">旧共通番号</param>
    ''' <returns>更新件数</returns>
    ''' <remarks>特殊処理に使用します。</remarks>
    Public Overloads Function UpdateMyNumber(
        ByVal cABMyNumberPrm As ABMyNumberPrmXClass,
        ByVal strShoriNichiji As String,
        ByVal strOldMyNumber As String) As Integer
        '* 履歴番号 000057 2015/02/17 修正終了

        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name

        Dim intKoshinCount As Integer
        Dim intCount As Integer
        Dim cfErrorClass As UFErrorClass
        Dim objErrorStruct As UFErrorStruct
        Dim csABMyNumberEntity As DataSet
        Dim csABMyNumberRuisekiEntity As DataSet
        Dim csNewRow As DataRow
        Dim csMaeDataSet As DataSet
        Dim csAtoDataSet As DataSet
        Dim strShoriKB As String
        Dim csABMyNumberHyojunEntity As DataSet
        Dim csABMyNumberRuisekiHyojunEntity As DataSet
        Dim csMyNumberDS As DataSet
        Dim csHyojunNewRow As DataRow
        Dim csRuisekiNewRow As DataRow

        Try

            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            ' ---------------------------------------------------------------------------------------------------------

            ' 共通番号のスキーマを取得
            csABMyNumberEntity = m_cfRdbClass.GetTableSchema(ABMyNumberEntity.TABLE_NAME)

            ' 共通番号累積のスキーマを取得
            csABMyNumberRuisekiEntity = m_cfRdbClass.GetTableSchema(ABMyNumberRuisekiEntity.TABLE_NAME)

            '共通番号標準
            csABMyNumberHyojunEntity = m_cfRdbClass.GetTableSchema(ABMyNumberHyojunEntity.TABLE_NAME)
            '共通番号累積標準
            csABMyNumberRuisekiHyojunEntity = m_cfRdbClass.GetTableSchema(ABMyNumberRuisekiHyojunEntity.TABLE_NAME)
            ' ---------------------------------------------------------------------------------------------------------
            ' 【共通番号の変更有無を判定】

            If (cABMyNumberPrm.p_strMyNumber.Trim = strOldMyNumber.Trim) Then
                ' 共通番号に変更がないため、更新件数0にて処理を離脱する。
                Return 0
            Else
                ' noop
            End If

            ' ---------------------------------------------------------------------------------------------------------
            ' 【更新前同一キーレコードの存在有無を判定】

            ' 更新前同一キーレコードを取得
            csMaeDataSet = m_cABMyNumberB.SelectByKey(cABMyNumberPrm.p_strJuminCD, strOldMyNumber)

            If (csMaeDataSet IsNot Nothing _
                 AndAlso csMaeDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then

                ' -----------------------------------------------------------------------------------------------------

                ' 処理区分を設定
                strShoriKB = ABMyNumberRuisekiEntity.DEFAULT.SHORIKB.DEL

                ' -----------------------------------------------------------------------------------------------------
                ' 【共通番号累積マスタの更新（異動前）】

                ' 共通番号累積DataRowの生成
                csNewRow = CreateMyNumberRuiseki(
                                csABMyNumberRuisekiEntity,
                                csMaeDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0),
                                strShoriNichiji,
                                strShoriKB,
                                ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.MAE)

                ' 共通番号累積追加処理
                m_cABMyNumberRuisekiB.Insert(csNewRow)

                ' -----------------------------------------------------------------------------------------------------
                ' 【更新前同一キーレコードの削除】

                intCount = m_cABMyNumberB.Delete(csMaeDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0))
                If (intCount <> 1) Then
                    cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                    objErrorStruct = cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                    Throw New UFAppException(String.Concat(objErrorStruct.m_strErrorMessage, "共通番号"), objErrorStruct.m_strErrorCode)
                Else
                    ' noop
                End If

                ' 返信値へ設定
                intKoshinCount += intCount

                ' -----------------------------------------------------------------------------------------------------
                ' 【共通番号累積マスタの更新（異動後）】

                ' 共通番号累積DataRowの生成
                csNewRow.BeginEdit()
                csNewRow.Item(ABMyNumberRuisekiEntity.ZENGOKB) = ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.ATO
                csNewRow.EndEdit()

                ' 共通番号累積追加処理
                m_cABMyNumberRuisekiB.Insert(csNewRow)

                '共通番号標準削除
                csMyNumberDS = m_csABMyNumberHyojunB.SelectByKey(cABMyNumberPrm.p_strJuminCD, strOldMyNumber)
                If (csMyNumberDS IsNot Nothing _
                    AndAlso csMyNumberDS.Tables(ABMyNumberHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                    '共通番号累積標準-前追加
                    csRuisekiNewRow = CreateMyNumberRuisekiHyojun(csABMyNumberRuisekiEntity,
                                      csMyNumberDS.Tables(ABMyNumberHyojunEntity.TABLE_NAME).Rows(0),
                                      cABMyNumberPrm, strShoriNichiji, ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.MAE)
                    m_csAbMyNumberRuisekiHyojunB.Insert(csRuisekiNewRow)
                    '共通番号標準削除
                    m_csABMyNumberHyojunB.Delete(csMyNumberDS.Tables(ABMyNumberHyojunEntity.TABLE_NAME).Rows(0))
                    '共通番号累積標準-後追加
                    csRuisekiNewRow.BeginEdit()
                    csRuisekiNewRow.Item(ABMyNumberRuisekiHyojunEntity.ZENGOKB) = ABMyNumberRuisekiHyojunEntity.DEFAULT.ZENGOKB.ATO
                    csRuisekiNewRow.EndEdit()
                    m_csAbMyNumberRuisekiHyojunB.Insert(csRuisekiNewRow)
                Else
                End If

                ' -----------------------------------------------------------------------------------------------------
                ' 【処理日時のインクリメント】

                strShoriNichiji = (CType(strShoriNichiji, Long) + 1000).ToString

                ' -----------------------------------------------------------------------------------------------------

                ' 更新後同一キーレコードを取得
                csAtoDataSet = m_cABMyNumberB.SelectByKey(cABMyNumberPrm.p_strJuminCD, cABMyNumberPrm.p_strMyNumber)

                If (csAtoDataSet IsNot Nothing _
                     AndAlso csAtoDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then

                    ' -------------------------------------------------------------------------------------------------
                    ' 【更新前同一キーレコードの直近区分と更新後同一キーレコードの直近区分を判定】

                    If (csMaeDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0).Item(ABMyNumberEntity.CKINKB).ToString =
                        ABMyNumberEntity.DEFAULT.CKINKB.CKIN _
                        AndAlso
                        csAtoDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0).Item(ABMyNumberEntity.CKINKB).ToString =
                        ABMyNumberEntity.DEFAULT.CKINKB.RRK) Then
                        ' 更新前同一キーレコードの直近区分が"1"、かつ更新後同一キーレコードの直近区分が"0"の場合

                        ' ---------------------------------------------------------------------------------------------

                        ' 処理区分を設定
                        strShoriKB = ABMyNumberRuisekiEntity.DEFAULT.SHORIKB.UPD

                        ' ---------------------------------------------------------------------------------------------
                        ' 【共通番号累積マスタの更新（異動前）】

                        ' 共通番号累積DataRowの生成
                        csNewRow = CreateMyNumberRuiseki(
                                        csABMyNumberRuisekiEntity,
                                        csAtoDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0),
                                        strShoriNichiji,
                                        strShoriKB,
                                        ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.MAE)

                        ' 共通番号累積追加処理
                        m_cABMyNumberRuisekiB.Insert(csNewRow)

                        ' ---------------------------------------------------------------------------------------------
                        ' 【共通番号の更新】

                        With csAtoDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0)
                            .BeginEdit()
                            .Item(ABMyNumberEntity.CKINKB) = ABMyNumberEntity.DEFAULT.CKINKB.CKIN
                            .EndEdit()
                        End With
                        intCount = m_cABMyNumberB.Update(csAtoDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0))
                        If (intCount <> 1) Then
                            cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                            objErrorStruct = cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                            Throw New UFAppException(String.Concat(objErrorStruct.m_strErrorMessage, "共通番号"), objErrorStruct.m_strErrorCode)
                        Else
                            ' noop
                        End If

                        ' 返信値へ設定
                        intKoshinCount += intCount

                        ' ---------------------------------------------------------------------------------------------
                        ' 【共通番号累積マスタの更新（異動後）】

                        ' 更新後同一キーレコードの取得
                        csAtoDataSet = m_cABMyNumberB.SelectByKey(cABMyNumberPrm.p_strJuminCD, cABMyNumberPrm.p_strMyNumber)

                        If (csAtoDataSet IsNot Nothing _
                             AndAlso csAtoDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then

                            ' 共通番号累積DataRowの生成
                            csNewRow = CreateMyNumberRuiseki(
                                            csABMyNumberRuisekiEntity,
                                            csAtoDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0),
                                            strShoriNichiji,
                                            strShoriKB,
                                            ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.ATO)

                            ' 共通番号累積追加処理
                            m_cABMyNumberRuisekiB.Insert(csNewRow)

                        Else
                            ' noop
                        End If

                        ' ---------------------------------------------------------------------------------------------
                        ' 【処理日時のインクリメント】

                        strShoriNichiji = (CType(strShoriNichiji, Long) + 1000).ToString

                        ' ---------------------------------------------------------------------------------------------

                    Else
                        ' noop
                    End If

                    ' -------------------------------------------------------------------------------------------------

                Else

                    ' -------------------------------------------------------------------------------------------------

                    ' 処理区分を設定
                    strShoriKB = ABMyNumberRuisekiEntity.DEFAULT.SHORIKB.INS

                    ' -------------------------------------------------------------------------------------------------
                    ' 【共通番号の追加】

                    ' 更新処理だが、DELETE/INSERTで処理させるので必要項目のみ上書きとする。
                    ' ※主キーの更新を伴う、UPDATEを行わないようにするため。（異動累積への配慮を含む。）
                    With csMaeDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0)
                        .BeginEdit()
                        .Item(ABMyNumberEntity.MYNUMBER) = cABMyNumberPrm.p_strMyNumber
                        .Item(ABMyNumberEntity.IDOKB) = cABMyNumberPrm.p_strIdoKB
                        .Item(ABMyNumberEntity.IDOYMD) = cABMyNumberPrm.p_strIdoYMD
                        .Item(ABMyNumberEntity.IDOSHA) = cABMyNumberPrm.p_strIdoSha
                        .EndEdit()
                    End With
                    intKoshinCount += m_cABMyNumberB.Insert(csMaeDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0))

                    ' -------------------------------------------------------------------------------------------------
                    ' 【共通番号累積マスタの更新（異動後）】

                    ' 更新後同一キーレコードの取得
                    csAtoDataSet = m_cABMyNumberB.SelectByKey(cABMyNumberPrm.p_strJuminCD, cABMyNumberPrm.p_strMyNumber)

                    If (csAtoDataSet IsNot Nothing _
                         AndAlso csAtoDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows.Count > 0) Then

                        ' 共通番号累積DataRowの生成
                        csNewRow = CreateMyNumberRuiseki(
                                        csABMyNumberRuisekiEntity,
                                        csAtoDataSet.Tables(ABMyNumberEntity.TABLE_NAME).Rows(0),
                                        strShoriNichiji,
                                        strShoriKB,
                                        ABMyNumberRuisekiEntity.DEFAULT.ZENGOKB.ATO)

                        ' 共通番号累積追加処理
                        m_cABMyNumberRuisekiB.Insert(csNewRow)

                    Else
                        ' noop
                    End If

                    '共通番号標準
                    csMyNumberDS = m_csABMyNumberHyojunB.SelectByKey(cABMyNumberPrm.p_strJuminCD, cABMyNumberPrm.p_strMyNumber)
                    If (csMyNumberDS IsNot Nothing _
                    AndAlso csMyNumberDS.Tables(ABMyNumberHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                    Else
                        csHyojunNewRow = CreateMyNumberHyojun(csABMyNumberHyojunEntity, cABMyNumberPrm)
                        m_csABMyNumberHyojunB.Insert(csHyojunNewRow)
                        '共通番号累積標準
                        csRuisekiNewRow = CreateMyNumberRuisekiHyojun(csABMyNumberRuisekiEntity, csHyojunNewRow,
                                                                  cABMyNumberPrm, strShoriNichiji, ABMyNumberRuisekiHyojunEntity.DEFAULT.ZENGOKB.ATO)
                        m_csAbMyNumberRuisekiHyojunB.Insert(csRuisekiNewRow)
                    End If
                    ' -------------------------------------------------------------------------------------------------
                    ' 【処理日時のインクリメント】

                    strShoriNichiji = (CType(strShoriNichiji, Long) + 1000).ToString

                    ' -------------------------------------------------------------------------------------------------

                End If
                ' -----------------------------------------------------------------------------------------------------

            Else

                ' -----------------------------------------------------------------------------------------------------

                '* 履歴番号 000057 2015/02/17 修正開始
                ' 住民判定を行わないこととする。
                ' 除票者に対する修正の場合に、
                ' 本来直近とすべきでない番号が直近となる可能性があるが、
                ' 正しい更新であったか確認していただく運用を徹底することとする。
                '' 住民フラグを判定
                'If (blnIsJuminFG = True) Then
                '    ' 住民の場合は、通常処理として処理させる。
                '    '* 履歴番号 000054 2014/12/26 修正開始
                '    'Return Me.UpdateMyNumber(cABMyNumberPrm, strShoriNichiji)
                '    '* 履歴番号 000056 2015/01/28 修正開始
                '    'Return Me.UpdateMyNumber(cABMyNumberPrm, strShoriNichiji, blnIsJuminFG)
                '    Return Me.UpdateMyNumber(cABMyNumberPrm, strShoriNichiji)
                '    '* 履歴番号 000056 2015/01/28 修正終了
                '    '* 履歴番号 000054 2014/12/26 修正終了
                'Else
                '    ' 更新対象レコードが存在しないため、更新件数0にて処理を離脱する。
                '    Return 0
                'End If
                Return Me.UpdateMyNumber(cABMyNumberPrm, strShoriNichiji)
                '* 履歴番号 000057 2015/02/17 修正終了

                ' -----------------------------------------------------------------------------------------------------

            End If

            ' ---------------------------------------------------------------------------------------------------------

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch cfAppExp As UFAppException

            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + cfAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + cfAppExp.Message + "】")

            ' エラーをそのままスローする
            Throw

        Catch csExp As Exception

            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + csExp.Message + "】")

            ' エラーをそのままスローする
            Throw

        End Try

        Return intKoshinCount

    End Function

#End Region

#Region "共通番号累積DataRowの生成"

    ''' <summary>
    ''' 共通番号累積DataRowの生成
    ''' </summary>
    ''' <param name="csMyNumberRuisekiEntity">共通番号累積マスタ</param>
    ''' <param name="csDataRow">対象DataRow</param>
    ''' <param name="strShoriNichiji">処理日時</param>
    ''' <param name="strShoriKB">処理区分</param>
    ''' <param name="strZengoKB">前後区分</param>
    ''' <returns>共通番号累積DataRow</returns>
    ''' <remarks></remarks>
    Private Function CreateMyNumberRuiseki(
        ByVal csMyNumberRuisekiEntity As DataSet,
        ByVal csDataRow As DataRow,
        ByVal strShoriNichiji As String,
        ByVal strShoriKB As String,
        ByVal strZengoKB As String) As DataRow

        Dim csNewRow As DataRow

        Try

            csNewRow = csMyNumberRuisekiEntity.Tables(ABMyNumberRuisekiEntity.TABLE_NAME).NewRow
            With csNewRow
                .BeginEdit()
                .Item(ABMyNumberRuisekiEntity.JUMINCD) = csDataRow.Item(ABMyNumberEntity.JUMINCD)
                .Item(ABMyNumberRuisekiEntity.SHICHOSONCD) = csDataRow.Item(ABMyNumberEntity.SHICHOSONCD)
                .Item(ABMyNumberRuisekiEntity.KYUSHICHOSONCD) = csDataRow.Item(ABMyNumberEntity.KYUSHICHOSONCD)
                .Item(ABMyNumberRuisekiEntity.MYNUMBER) = csDataRow.Item(ABMyNumberEntity.MYNUMBER)
                .Item(ABMyNumberRuisekiEntity.SHORINICHIJI) = strShoriNichiji
                .Item(ABMyNumberRuisekiEntity.SHORIKB) = strShoriKB
                .Item(ABMyNumberRuisekiEntity.ZENGOKB) = strZengoKB
                .Item(ABMyNumberRuisekiEntity.CKINKB) = csDataRow.Item(ABMyNumberEntity.CKINKB)
                .Item(ABMyNumberRuisekiEntity.IDOKB) = csDataRow.Item(ABMyNumberEntity.IDOKB)
                .Item(ABMyNumberRuisekiEntity.IDOYMD) = csDataRow.Item(ABMyNumberEntity.IDOYMD)
                .Item(ABMyNumberRuisekiEntity.IDOSHA) = csDataRow.Item(ABMyNumberEntity.IDOSHA)
                .Item(ABMyNumberRuisekiEntity.RESERVE) = csDataRow.Item(ABMyNumberEntity.RESERVE)
                .EndEdit()
            End With
            csMyNumberRuisekiEntity.Tables(ABMyNumberRuisekiEntity.TABLE_NAME).Rows.Add(csNewRow)

        Catch csExp As Exception
            Throw
        End Try

        Return csNewRow

    End Function

#End Region
    '* 履歴番号 000050 2014/06/25 追加終了

#Region "宛名標準初期化"
    '************************************************************************************************
    '* メソッド名     宛名標準系DataRwo初期化処理
    '* 
    '* 構文           Private Sub ClearAtenaHyojun(ByVal csRow As DataRow)
    '* 
    '* 機能           宛名標準系DataRowの初期化を行う
    '* 
    '* 引数           csRow As DataRow     : 宛名標準Row
    '************************************************************************************************
    Private Sub ClearAtenaHyojun(ByVal csRow As DataRow)
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            ' 項目の初期化
            For Each csDataColumn As DataColumn In csRow.Table.Columns
                Select Case csDataColumn.ColumnName
                    Case ABAtenaHyojunEntity.KOSHINCOUNTER, ABAtenaHyojunEntity.RRKNO,
                         ABAtenaHyojunEntity.EDANO, ABAtenaHyojunEntity.KYOYUNINZU
                        csRow(csDataColumn) = Decimal.Zero
                    Case Else
                        csRow(csDataColumn) = String.Empty
                End Select
            Next csDataColumn

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
    End Sub
#End Region

#Region "宛名標準データ設定"
    '************************************************************************************************
    '* メソッド名     宛名標準データ設定処理
    '* 
    '* 構文           Private Function SetAtenaHyojun(ByVal csRow As DataRow, ByVal csAtenaRow As DataRow, ByVal csJukiDataRow As DataRow) As DataRow
    '* 
    '* 機能           宛名標準の編集を行う
    '* 
    '* 引数           csRow As DataRow             : 宛名標準データ
    '*                csAtenaRow As DataRow        ：宛名データ
    '*                csJukiDataRow As DataRow     ：住基データ
    '*
    '* 戻り値         宛名標準データ
    '************************************************************************************************
    Private Function SetAtenaHyojun(ByVal csRow As DataRow, ByVal csAtenaRow As DataRow, ByVal csJukiDataRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        '*履歴番号 000069 2024/07/09 追加開始
        Dim cfDate As UFDateClass
        '*履歴番号 000069 2024/07/09 追加終了
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            '*履歴番号 000069 2024/07/09 追加開始
            ' 日付クラス
            cfDate = New UFDateClass(m_cfConfigDataClass)
            cfDate.p_enDateFillType = UFDateFillType.Zero
            cfDate.p_enDateSeparator = UFDateSeparator.Hyphen
            cfDate.p_enEraType = UFEraType.Number
            '*履歴番号 000069 2024/07/09 追加終了

            'データ編集
            csRow(ABAtenaHyojunEntity.JUMINCD) = csAtenaRow(ABAtenaEntity.JUMINCD)                            ' 住民コード
            csRow(ABAtenaHyojunEntity.JUMINJUTOGAIKB) = csAtenaRow(ABAtenaEntity.JUMINJUTOGAIKB)              ' 住民住登外区分
            csRow(ABAtenaHyojunEntity.RRKNO) = csJukiDataRow(ABJukiData.RIREKINO)                             ' 履歴番号
            csRow(ABAtenaHyojunEntity.EDANO) = csJukiDataRow(ABJukiData.EDANO)                                ' 枝番号
            csRow(ABAtenaHyojunEntity.SHIMEIKANAKAKUNINFG) = csJukiDataRow(ABJukiData.SHIMEIKANAKAKUNINFG)    ' 氏名フリガナ確認フラグ
            If (csJukiDataRow(ABJukiData.FUSHOUMAREBI).ToString.Trim = String.Empty) Then
                csRow(ABAtenaHyojunEntity.UMAREBIFUSHOPTN) = FUSHOPTN_NASHI                                   ' 生年月日不詳パターン
            Else
                csRow(ABAtenaHyojunEntity.UMAREBIFUSHOPTN) = FUSHOPTN_FUSHO
            End If
            csRow(ABAtenaHyojunEntity.FUSHOUMAREBI) = csJukiDataRow(ABJukiData.FUSHOUMAREBI)                  ' 不詳生年月日
            csRow(ABAtenaHyojunEntity.JIJITSUSTAINUSMEI) = csJukiDataRow(ABJukiData.JIJITSUSTAINUSMEI)        ' 事実上の世帯主

            If (csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO).ToString.TrimEnd <> String.Empty) Then
                '転出確定
                csRow(ABAtenaHyojunEntity.SHIKUCHOSONCD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISHIKUCHOSONCD)                 ' 住所_市区町村コード
                csRow(ABAtenaHyojunEntity.MACHIAZACD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIMACHIAZACD)                       ' 住所_町字コード
                csRow(ABAtenaHyojunEntity.TODOFUKEN) = csJukiDataRow(ABJukiData.TENSHUTSUKKTITODOFUKEN)                         ' 住所_都道府県
                csRow(ABAtenaHyojunEntity.SHIKUCHOSON) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISHIKUCHOSON)                     ' 住所_市区郡町村名
                csRow(ABAtenaHyojunEntity.MACHIAZA) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIMACHIAZA)                           ' 住所_町字
                csRow(ABAtenaHyojunEntity.SEARCHJUSHO) = GetSearchMoji(csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO).ToString)   ' 検索用住所
                csRow(ABAtenaHyojunEntity.SEARCHKATAGAKI) = GetSearchMoji(csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI).ToString)  ' 検索用方書
                csRow(ABAtenaHyojunEntity.BANCHIEDABANSUCHI) = m_cABBanchiEdabanSuchiB.GetBanchiEdabanSuchi(
                                                               csAtenaRow(ABAtenaEntity.BANCHICD1).ToString,
                                                               csAtenaRow(ABAtenaEntity.BANCHICD2).ToString,
                                                               csAtenaRow(ABAtenaEntity.BANCHICD3).ToString)                    ' 番地枝番数値
            ElseIf (csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO).ToString.TrimEnd <> String.Empty) Then
                '転出予定
                csRow(ABAtenaHyojunEntity.SHIKUCHOSONCD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISHIKUCHOSONCD)                ' 住所_市区町村コード
                csRow(ABAtenaHyojunEntity.MACHIAZACD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIMACHIAZACD)                      ' 住所_町字コード
                csRow(ABAtenaHyojunEntity.TODOFUKEN) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEITODOFUKEN)                        ' 住所_都道府県
                csRow(ABAtenaHyojunEntity.SHIKUCHOSON) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISHIKUCHOSON)                    ' 住所_市区郡町村名
                csRow(ABAtenaHyojunEntity.MACHIAZA) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIMACHIAZA)                          ' 住所_町字
                csRow(ABAtenaHyojunEntity.SEARCHJUSHO) = GetSearchMoji(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO).ToString)  ' 検索用住所
                csRow(ABAtenaHyojunEntity.SEARCHKATAGAKI) = GetSearchMoji(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI).ToString) ' 検索用方書
                csRow(ABAtenaHyojunEntity.BANCHIEDABANSUCHI) = m_cABBanchiEdabanSuchiB.GetBanchiEdabanSuchi(
                                                               csAtenaRow(ABAtenaEntity.BANCHICD1).ToString,
                                                               csAtenaRow(ABAtenaEntity.BANCHICD2).ToString,
                                                               csAtenaRow(ABAtenaEntity.BANCHICD3).ToString)                    ' 番地枝番数値
            Else
                csRow(ABAtenaHyojunEntity.SHIKUCHOSONCD) = csJukiDataRow(ABJukiData.SHIKUCHOSONCD)                              ' 住所_市区町村コード
                csRow(ABAtenaHyojunEntity.MACHIAZACD) = csJukiDataRow(ABJukiData.MACHIAZACD)                                    ' 住所_町字コード
                csRow(ABAtenaHyojunEntity.TODOFUKEN) = csJukiDataRow(ABJukiData.TODOFUKEN)                                      ' 住所_都道府県
                csRow(ABAtenaHyojunEntity.SHIKUCHOSON) = csJukiDataRow(ABJukiData.SHIKUGUNCHOSON)                               ' 住所_市区郡町村名
                csRow(ABAtenaHyojunEntity.MACHIAZA) = csJukiDataRow(ABJukiData.MACHIAZA)                                        ' 住所_町字
                csRow(ABAtenaHyojunEntity.SEARCHJUSHO) = csJukiDataRow(ABJukiData.SEARCHJUSHO)                                  ' 検索用住所
                csRow(ABAtenaHyojunEntity.SEARCHKATAGAKI) = csJukiDataRow(ABJukiData.SEARCHKATAGAKI)                            ' 検索用方書
                csRow(ABAtenaHyojunEntity.BANCHIEDABANSUCHI) = csJukiDataRow(ABJukiData.BANCHIEDABANSUCHI)                      ' 番地枝番数値
            End If
            csRow(ABAtenaHyojunEntity.KANAKATAGAKI) = String.Empty                                         ' 方書フリガナ
            csRow(ABAtenaHyojunEntity.JUSHO_KUNIMEICODE) = String.Empty                                    ' 住所_国名コード
            csRow(ABAtenaHyojunEntity.JUSHO_KUNIMEITO) = String.Empty                                      ' 住所_国名等
            csRow(ABAtenaHyojunEntity.JUSHO_KOKUGAIJUSHO) = String.Empty                                   ' 住所_国外住所
            csRow(ABAtenaHyojunEntity.HON_SHIKUCHOSONCD) = csJukiDataRow(ABJukiData.HON_SHIKUCHOSONCD)     ' 本籍_市区町村コード
            csRow(ABAtenaHyojunEntity.HON_MACHIAZACD) = csJukiDataRow(ABJukiData.HON_MACHIAZACD)           ' 本籍_町字コード
            csRow(ABAtenaHyojunEntity.HON_TODOFUKEN) = csJukiDataRow(ABJukiData.HON_TODOFUKEN)             ' 本籍_都道府県
            csRow(ABAtenaHyojunEntity.HON_SHIKUGUNCHOSON) = csJukiDataRow(ABJukiData.HON_SHIKUGUNCHOSON)   ' 本籍_市区郡町村名
            csRow(ABAtenaHyojunEntity.HON_MACHIAZA) = csJukiDataRow(ABJukiData.HON_MACHIAZA)               ' 本籍_町字
            csRow(ABAtenaHyojunEntity.CKINIDOWMD) = csJukiDataRow(ABJukiData.CKINIDOWMD)                   ' 直近異動和暦年月日
            If (csJukiDataRow(ABJukiData.FUSHOCKINIDOBI).ToString.Trim = String.Empty) Then
                csRow(ABAtenaHyojunEntity.CKINIDOBIFUSHOPTN) = FUSHOPTN_NASHI                              ' 直近異動日不詳パターン
            Else
                csRow(ABAtenaHyojunEntity.CKINIDOBIFUSHOPTN) = FUSHOPTN_FUSHO
            End If
            csRow(ABAtenaHyojunEntity.FUSHOCKINIDOBI) = csJukiDataRow(ABJukiData.FUSHOCKINIDOBI)           ' 不詳直近異動日
            csRow(ABAtenaHyojunEntity.TOROKUIDOBIFUSHOPTN) = FUSHOPTN_NASHI                                ' 登録異動日不詳パターン
            csRow(ABAtenaHyojunEntity.FUSHOTOROKUIDOBI) = String.Empty                                     ' 不詳登録異動日
            csRow(ABAtenaHyojunEntity.HYOJUNKISAIJIYUCD) = csJukiDataRow(ABJukiData.HYOJUNKISAIJIYUCD)     ' 記載事由
            csRow(ABAtenaHyojunEntity.KISAIYMD) = csJukiDataRow(ABJukiData.KISAIYMD)                       ' 記載年月日
            csRow(ABAtenaHyojunEntity.KISAIBIFUSHOPTN) = FUSHOPTN_NASHI                                    ' 記載年月日不詳パターン
            csRow(ABAtenaHyojunEntity.FUSHOKISAIBI) = String.Empty                                         ' 不詳記載年月日
            csRow(ABAtenaHyojunEntity.JUTEIIDOBIFUSHOPTN) = FUSHOPTN_NASHI                                 ' 住定異動日不詳パターン
            csRow(ABAtenaHyojunEntity.FUSHOJUTEIIDOBI) = String.Empty                                      ' 不詳住定異動日
            csRow(ABAtenaHyojunEntity.HYOJUNSHOJOJIYUCD) = csJukiDataRow(ABJukiData.HYOJUNSHOJOJIYUCD)     ' 消除事由
            csRow(ABAtenaHyojunEntity.KOKUSEKISOSHITSUBI) = String.Empty                                   ' 国籍喪失日
            csRow(ABAtenaHyojunEntity.SHOJOIDOWMD) = csJukiDataRow(ABJukiData.SHOJOIDOWMD)                 ' 消除異動和暦年月日
            If (csJukiDataRow(ABJukiData.FUSHOSHOJOIDOBI).ToString.Trim = String.Empty) Then
                csRow(ABAtenaHyojunEntity.SHOJOIDOBIFUSHOPTN) = FUSHOPTN_NASHI                             ' 消除異動日不詳パターン
            Else
                csRow(ABAtenaHyojunEntity.SHOJOIDOBIFUSHOPTN) = FUSHOPTN_FUSHO
            End If
            csRow(ABAtenaHyojunEntity.FUSHOSHOJOIDOBI) = csJukiDataRow(ABJukiData.FUSHOSHOJOIDOBI)                ' 不詳消除異動日
            csRow(ABAtenaHyojunEntity.TENUMAEJ_SHIKUCHOSONCD) = csJukiDataRow(ABJukiData.TENUMAEJ_SHIKUCHOSONCD)  ' 転入前住所_市区町村コード
            csRow(ABAtenaHyojunEntity.TENUMAEJ_MACHIAZACD) = csJukiDataRow(ABJukiData.TENUMAEJ_MACHIAZACD)        ' 転入前住所_町字コード
            csRow(ABAtenaHyojunEntity.TENUMAEJ_TODOFUKEN) = csJukiDataRow(ABJukiData.TENUMAEJ_TODOFUKEN)          ' 転入前住所_都道府県
            csRow(ABAtenaHyojunEntity.TENUMAEJ_SHIKUCHOSON) = csJukiDataRow(ABJukiData.TENUMAEJ_SHIKUCHOSON)      ' 転入前住所_市区郡町村名
            csRow(ABAtenaHyojunEntity.TENUMAEJ_MACHIAZA) = csJukiDataRow(ABJukiData.TENUMAEJ_MACHIAZA)            ' 転入前住所_町字
            csRow(ABAtenaHyojunEntity.TENUMAEJ_KOKUSEKICD) = csJukiDataRow(ABJukiData.TENUMAEJ_KOKUSEKICD)        ' 転入前住所_国名コード
            csRow(ABAtenaHyojunEntity.TENUMAEJ_KOKUSEKI) = csJukiDataRow(ABJukiData.TENUMAEJ_KOKUSEKI)            ' 転入前住所_国名
            csRow(ABAtenaHyojunEntity.TENUMAEJ_KOKUGAIJUSHO) = csJukiDataRow(ABJukiData.TENUMAEJ_KOKUGAIJUSHO)    ' 転入前住所_国外住所
            csRow(ABAtenaHyojunEntity.SAISHUTJ_YUBINNO) = String.Empty                                     ' 最終登録住所_郵便番号
            csRow(ABAtenaHyojunEntity.SAISHUTJ_SHIKUCHOSONCD) = String.Empty                               ' 最終登録住所_市区町村コード
            csRow(ABAtenaHyojunEntity.SAISHUTJ_MACHIAZACD) = String.Empty                                  ' 最終登録住所_町字コード
            csRow(ABAtenaHyojunEntity.SAISHUTJ_TODOFUKEN) = String.Empty                                   ' 最終登録住所_都道府県
            csRow(ABAtenaHyojunEntity.SAISHUTJ_SHIKUCHOSON) = String.Empty                                 ' 最終登録住所_市区郡町村名
            csRow(ABAtenaHyojunEntity.SAISHUTJ_MACHIAZA) = String.Empty                                    ' 最終登録住所_町字
            csRow(ABAtenaHyojunEntity.SAISHUTJ_BANCHI) = String.Empty                                      ' 最終登録住所_番地号表記
            csRow(ABAtenaHyojunEntity.SAISHUTJ_KATAGAKI) = String.Empty                                    ' 最終登録住所_方書
            csRow(ABAtenaHyojunEntity.SAISHUJ_TODOFUKEN) = String.Empty                                    ' 最終住所_都道府県
            csRow(ABAtenaHyojunEntity.SAISHUJ_SHIKUCHOSON) = String.Empty                                  ' 最終住所_市区郡町村名
            csRow(ABAtenaHyojunEntity.SAISHUJ_MACHIAZA) = String.Empty                                     ' 最終住所_町字
            csRow(ABAtenaHyojunEntity.SAISHUJ_BANCHI) = String.Empty                                       ' 最終住所_番地号表記
            csRow(ABAtenaHyojunEntity.SAISHUJ_KATAGAKI) = String.Empty                                     ' 最終住所_方書
            '* 履歴番号 000063 2024/02/06 修正開始
            'csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEISHIKUCHOSONCD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISHIKUCHOSONCD) ' 転出予定_市区町村コード
            'csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEIMACHIAZACD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIMACHIAZACD)       ' 転出予定_町字コード
            'csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEITODOFUKEN) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEITODOFUKEN)         ' 転出予定_都道府県
            'csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEISHIKUCHOSON) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISHIKUCHOSON)     ' 転出予定_市区郡町村名
            'csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEIMACHIAZA) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIMACHIAZA)           ' 転出予定_町字

            '住基データ.処理事由コード＝45（転入通知受理）の場合
            If (csJukiDataRow(ABJukiData.SHORIJIYUCD).ToString() = ABEnumDefine.ABJukiShoriJiyuType.TennyuTsuchiJuri.GetHashCode.ToString("00")) Then
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEISHIKUCHOSONCD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISHIKUCHOSONCD)  ' 転出予定_市区町村コード
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEIMACHIAZACD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIMACHIAZACD)        ' 転出予定_町字コード
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEITODOFUKEN) = csJukiDataRow(ABJukiData.TENSHUTSUKKTITODOFUKEN)          ' 転出予定_都道府県
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEISHIKUCHOSON) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISHIKUCHOSON)      ' 転出予定_市区郡町村名
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEIMACHIAZA) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIMACHIAZA)            ' 転出予定_町字
            Else
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEISHIKUCHOSONCD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISHIKUCHOSONCD) ' 転出予定_市区町村コード
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEIMACHIAZACD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIMACHIAZACD)       ' 転出予定_町字コード
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEITODOFUKEN) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEITODOFUKEN)         ' 転出予定_都道府県
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEISHIKUCHOSON) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISHIKUCHOSON)     ' 転出予定_市区郡町村名
                csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEIMACHIAZA) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIMACHIAZA)           ' 転出予定_町字
            End If
            '* 履歴番号 000063 2024/02/06 修正終了
            csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEIKOKUSEKICD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKOKUSEKICD)       ' 転出予定_国名コード
            csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEIKOKUSEKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKOKUSEKI)           ' 転出予定_国名等
            csRow(ABAtenaHyojunEntity.TENSHUTSUYOTEIKOKUGAIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKOKUGAIJUSHO)   ' 転出予定_国外住所
            csRow(ABAtenaHyojunEntity.TENSHUTSUKKTISHIKUCHOSONCD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISHIKUCHOSONCD)   ' 転出確定_市区町村コード
            csRow(ABAtenaHyojunEntity.TENSHUTSUKKTIMACHIAZACD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIMACHIAZACD)         ' 転出確定_町字コード
            csRow(ABAtenaHyojunEntity.TENSHUTSUKKTITODOFUKEN) = csJukiDataRow(ABJukiData.TENSHUTSUKKTITODOFUKEN)           ' 転出確定_都道府県
            csRow(ABAtenaHyojunEntity.TENSHUTSUKKTISHIKUCHOSON) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISHIKUCHOSON)       ' 転出確定_市区郡町村名
            csRow(ABAtenaHyojunEntity.TENSHUTSUKKTIMACHIAZA) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIMACHIAZA)             ' 転出確定_町字
            csRow(ABAtenaHyojunEntity.KAISEIBIFUSHOPTN) = FUSHOPTN_NASHI                                   ' 改製年月日不詳パターン
            csRow(ABAtenaHyojunEntity.FUSHOKAISEIBI) = String.Empty                                        ' 不詳改製年月日
            csRow(ABAtenaHyojunEntity.KAISEISHOJOYMD) = String.Empty                                       ' 改製消除年月日
            csRow(ABAtenaHyojunEntity.KAISEISHOJOBIFUSHOPTN) = FUSHOPTN_NASHI                              ' 改製消除年月日不詳パターン
            csRow(ABAtenaHyojunEntity.FUSHOKAISEISHOJOBI) = String.Empty                                   ' 不詳改製消除年月日
            csRow(ABAtenaHyojunEntity.CHIKUCD4) = String.Empty                                             ' 地区コード４
            csRow(ABAtenaHyojunEntity.CHIKUCD5) = String.Empty                                             ' 地区コード５
            csRow(ABAtenaHyojunEntity.CHIKUCD6) = String.Empty                                             ' 地区コード６
            csRow(ABAtenaHyojunEntity.CHIKUCD7) = String.Empty                                             ' 地区コード７
            csRow(ABAtenaHyojunEntity.CHIKUCD8) = String.Empty                                             ' 地区コード８
            csRow(ABAtenaHyojunEntity.CHIKUCD9) = String.Empty                                             ' 地区コード９
            csRow(ABAtenaHyojunEntity.CHIKUCD10) = String.Empty                                            ' 地区コード１０
            csRow(ABAtenaHyojunEntity.TOKUBETSUYOSHIKB) = csJukiDataRow(ABJukiData.TOKUBETSUYOSHIKB)       ' 特別養子区分
            csRow(ABAtenaHyojunEntity.HYOJUNIDOKB) = csJukiDataRow(ABJukiData.IDOKB)                       ' 異動区分
            csRow(ABAtenaHyojunEntity.NYURYOKUBASHOCD) = csJukiDataRow(ABJukiData.NYURYOKUBASHOCD)         ' 入力場所コード
            csRow(ABAtenaHyojunEntity.NYURYOKUBASHO) = csJukiDataRow(ABJukiData.NYURYOKUBASHO)             ' 入力場所表記
            csRow(ABAtenaHyojunEntity.SEARCHKANJIKYUUJI) = csJukiDataRow(ABJukiData.SEARCHKANJIKYUUJI)     ' 検索用漢字旧氏
            csRow(ABAtenaHyojunEntity.SEARCHKANAKYUUJI) = csJukiDataRow(ABJukiData.SEARCHKANAKYUUJI)       ' 検索用カナ旧氏
            csRow(ABAtenaHyojunEntity.KYUUJIKANAKAKUNINFG) = csJukiDataRow(ABJukiData.KYUUJIKANAKAKUNINFG) ' 旧氏フリガナ確認フラグ
            csRow(ABAtenaHyojunEntity.TDKDSHIMEI) = csJukiDataRow(ABJukiData.TDKDSHIMEI)                   ' 届出人氏名
            csRow(ABAtenaHyojunEntity.HYOJUNIDOJIYUCD) = csJukiDataRow(ABJukiData.HYOJUNIDOJIYUCD)         ' 標準準拠異動事由コード
            csRow(ABAtenaHyojunEntity.NICHIJOSEIKATSUKENIKICD) = String.Empty                              ' 日常生活圏域コード
            csRow(ABAtenaHyojunEntity.KOBOJONOJUSHO_SHOZAICHI_YOMIGANA) = String.Empty                     ' 公簿上の住所（所在地）_読み仮名
            csRow(ABAtenaHyojunEntity.TOROKUBUSHO) = String.Empty                                          ' 登録部署
            csRow(ABAtenaHyojunEntity.TANKITAIZAISHAFG) = String.Empty                                     ' 短期滞在者フラグ
            csRow(ABAtenaHyojunEntity.KYOYUNINZU) = Decimal.Zero                                           ' 共有者人数
            csRow(ABAtenaHyojunEntity.SHIZEIJIMUSHOCD) = String.Empty                                      ' 市税事務所コード
            csRow(ABAtenaHyojunEntity.SHUKKOKUKIKAN_ST) = String.Empty                                     ' 出国期間_開始年月日
            csRow(ABAtenaHyojunEntity.SHUKKOKUKIKAN_ED) = String.Empty                                     ' 出国期間_終了年月日
            csRow(ABAtenaHyojunEntity.IDOSHURUI) = String.Empty                                            ' 異動の種類
            csRow(ABAtenaHyojunEntity.SHOKANKUCD) = "000000"                                               ' 所管区コード
            csRow(ABAtenaHyojunEntity.TOGOATENAFG) = csJukiDataRow(ABJukiData.TOGOATENAFG)                 ' 統合宛名フラグ
            '*履歴番号 000069 2024/07/09 修正開始
            'csRow(ABAtenaHyojunEntity.FUSHOUMAREBI_DATE) = csJukiDataRow(ABJukiData.FUSHOUMAREBIDATE)      ' 不詳生年月日DATE
            'csRow(ABAtenaHyojunEntity.FUSHOCKINIDOBI_DATE) = csJukiDataRow(ABJukiData.FUSHOCKINIDOBIDATE)  ' 不詳直近異動日DATE
            'csRow(ABAtenaHyojunEntity.FUSHOSHOJOIDOBI_DATE) = csJukiDataRow(ABJukiData.FUSHOSHOJOIDOBIDATE) ' 不詳消除異動日DATE
            ' 不詳生年月日DATE
            If (csRow(ABAtenaHyojunEntity.UMAREBIFUSHOPTN).ToString = FUSHOPTN_FUSHO) Then
                csRow(ABAtenaHyojunEntity.FUSHOUMAREBI_DATE) = csJukiDataRow(ABJukiData.FUSHOUMAREBIDATE)
            Else
                cfDate.p_strDateValue = csJukiDataRow(ABJukiData.UMAREYMD).ToString
                csRow(ABAtenaHyojunEntity.FUSHOUMAREBI_DATE) = cfDate.p_strSeirekiYMD
            End If
            ' 不詳直近異動日DATE
            If (csRow(ABAtenaHyojunEntity.CKINIDOBIFUSHOPTN).ToString = FUSHOPTN_FUSHO) Then
                csRow(ABAtenaHyojunEntity.FUSHOCKINIDOBI_DATE) = csJukiDataRow(ABJukiData.FUSHOCKINIDOBIDATE)
            Else
                cfDate.p_strDateValue = csJukiDataRow(ABJukiData.CKINIDOYMD).ToString
                csRow(ABAtenaHyojunEntity.FUSHOCKINIDOBI_DATE) = cfDate.p_strSeirekiYMD
            End If
            ' 不詳消除異動日DATE
            If (csRow(ABAtenaHyojunEntity.SHOJOIDOBIFUSHOPTN).ToString = FUSHOPTN_FUSHO) Then
                csRow(ABAtenaHyojunEntity.FUSHOSHOJOIDOBI_DATE) = csJukiDataRow(ABJukiData.FUSHOSHOJOIDOBIDATE)
            Else
                cfDate.p_strDateValue = csJukiDataRow(ABJukiData.SHOJOIDOYMD).ToString
                csRow(ABAtenaHyojunEntity.FUSHOSHOJOIDOBI_DATE) = cfDate.p_strSeirekiYMD
            End If
            '*履歴番号 000069 2024/07/09 修正終了
            csRow(ABAtenaHyojunEntity.JUKISHIKUCHOSONCD) = csJukiDataRow(ABJukiData.SHIKUCHOSONCD)         ' 住基住所_市区町村コード
            csRow(ABAtenaHyojunEntity.JUKIMACHIAZACD) = csJukiDataRow(ABJukiData.MACHIAZACD)               ' 住基住所_町字コード
            csRow(ABAtenaHyojunEntity.JUKITODOFUKEN) = csJukiDataRow(ABJukiData.TODOFUKEN)                 ' 住基住所_都道府県
            csRow(ABAtenaHyojunEntity.JUKISHIKUCHOSON) = csJukiDataRow(ABJukiData.SHIKUGUNCHOSON)          ' 住基住所_市区郡町村名
            csRow(ABAtenaHyojunEntity.JUKIMACHIAZA) = csJukiDataRow(ABJukiData.MACHIAZA)                   ' 住基住所_町字
            csRow(ABAtenaHyojunEntity.JUKIKANAKATAGAKI) = String.Empty                                     ' 住基住所_方書フリガナ
            csRow(ABAtenaHyojunEntity.JUKICHIKUCD4) = String.Empty                                         ' 住基地区コード4
            csRow(ABAtenaHyojunEntity.JUKICHIKUCD5) = String.Empty                                         ' 住基地区コード5
            csRow(ABAtenaHyojunEntity.JUKICHIKUCD6) = String.Empty                                         ' 住基地区コード6
            csRow(ABAtenaHyojunEntity.JUKICHIKUCD7) = String.Empty                                         ' 住基地区コード7
            csRow(ABAtenaHyojunEntity.JUKICHIKUCD8) = String.Empty                                         ' 住基地区コード8
            csRow(ABAtenaHyojunEntity.JUKICHIKUCD9) = String.Empty                                         ' 住基地区コード9
            csRow(ABAtenaHyojunEntity.JUKICHIKUCD10) = String.Empty                                        ' 住基地区コード10
            csRow(ABAtenaHyojunEntity.JUKIBANCHIEDABANSUCHI) = csJukiDataRow(ABJukiData.BANCHIEDABANSUCHI) ' 住基番地枝番数値
            csRow(ABAtenaHyojunEntity.RESERVE1) = String.Empty                              ' リザーブ１
            csRow(ABAtenaHyojunEntity.RESERVE2) = String.Empty                              ' リザーブ２
            csRow(ABAtenaHyojunEntity.RESERVE3) = String.Empty                              ' リザーブ３
            csRow(ABAtenaHyojunEntity.RESERVE4) = String.Empty                              ' リザーブ４
            csRow(ABAtenaHyojunEntity.RESERVE5) = String.Empty                              ' リザーブ５


            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csRow
    End Function
#End Region

#Region "検索文字作成"
    '************************************************************************************************
    '* メソッド名     検索文字作成
    '* 
    '* 構文           Private Function GetSearchMoji(ByVal strData As String) As String
    '* 
    '* 機能           類字化・大文字化を行なう
    '* 
    '* 引数           strData As String     :対象データ
    '*
    '* 戻り値         類字化データ
    '************************************************************************************************
    Private Function GetSearchMoji(ByVal strData As String) As String
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Dim strResult As String
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            'データ編集
            If (strData.Trim = String.Empty) Then
                strResult = String.Empty
            Else
                strResult = m_cuUsRuiji.GetRuijiMojiList(strData.Replace("　", String.Empty)).ToUpper
            End If

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return strResult
    End Function
#End Region

#Region "宛名作成"
    '************************************************************************************************
    '* メソッド名     宛名Row作成
    '* 
    '* 構文           Private Function SetAtena(ByVal csAtenaRow As DataRow, ByVal csJukiDataRow As DataRow) As DataRow
    '* 
    '* 機能           宛名Rowを作成する
    '* 
    '* 引数           csAtenaRow As DataRow     :宛名Rowt
    '*                csJukiDataRow As DataRow  :住基データRow
    '*
    '* 戻り値         宛名Row
    '************************************************************************************************
    Private Function SetAtena(ByVal csAtenaRow As DataRow, ByVal csJukiDataRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Dim strBanchiCD() As String                         ' 番地コード取得用配列
        Dim cHenshuSearchKana As ABHenshuSearchShimeiBClass ' 検索用カナ生成クラス
        Dim strSearchKana(4) As String                      ' 検索用カナ名称用

        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            cHenshuSearchKana = New ABHenshuSearchShimeiBClass(m_cfControlData, m_cfConfigDataClass)
            'データ編集

            ' 住基データの同一項目を宛名マスタの項目にセットする
            ' ・住民コード
            csAtenaRow(ABAtenaEntity.JUMINCD) = csJukiDataRow(ABJukiData.JUMINCD)
            ' ・市町村コード
            csAtenaRow(ABAtenaEntity.SHICHOSONCD) = csJukiDataRow(ABJukiData.SHICHOSONCD)
            ' ・旧市町村コード
            csAtenaRow(ABAtenaEntity.KYUSHICHOSONCD) = csJukiDataRow(ABJukiData.KYUSHICHOSONCD)

            ' 何もセットしない項目
            ' ・住民票コード
            ' ・汎用区分２
            ' ・漢字法人形態
            ' ・漢字法人代表者氏名
            ' ・家屋敷区分
            ' ・備考税目

            ' 編集してセットする項目
            ' ・住民住登外区分   1
            csAtenaRow(ABAtenaEntity.JUMINJUTOGAIKB) = "1"
            ' ・住民優先区分     1
            csAtenaRow(ABAtenaEntity.JUMINYUSENIKB) = "1"
            ' ・住登外優先区分
            ' 　　住民種別の下１桁が”0”（住民）でなく、且つ住登外有りＦＬＧが”1”の時、　0
            '*履歴番号 000040 2009/05/22 修正開始
            'とりあえず無条件に "1" としてセットする
            csAtenaRow(ABAtenaEntity.JUTOGAIYUSENKB) = "1"
            ' ・宛名データ区分=(11)
            csAtenaRow(ABAtenaEntity.ATENADATAKB) = "11"
            ' ・世帯コード～整理番号
            csAtenaRow(ABAtenaEntity.STAICD) = csJukiDataRow(ABJukiData.STAICD)
            'csAtenaRow(ABAtenaEntity.JUMINHYOCD) = String.Empty
            csAtenaRow(ABAtenaEntity.SEIRINO) = csJukiDataRow(ABJukiData.SEIRINO)
            ' ・宛名データ種別=(住民種別)
            csAtenaRow(ABAtenaEntity.ATENADATASHU) = csJukiDataRow(ABJukiData.JUMINSHU)
            ' ・汎用区分１=(写し区分)
            csAtenaRow(ABAtenaEntity.HANYOKB1) = csJukiDataRow(ABJukiData.UTSUSHIKB)
            ' ・個人法人区分=(1)
            csAtenaRow(ABAtenaEntity.KJNHJNKB) = "1"

            ' ・カナ名称１～検索用カナ名
            If ((CStr(csJukiDataRow(ABJukiData.SHIMEIRIYOKB)).Trim = "2") AndAlso
                    (CStr(csJukiDataRow(ABJukiData.KANJIMEISHO2)).Trim <> String.Empty)) Then
                ' 本名優先(本名と通称名を持つ外国人かつ氏名利用区分が"2")
                csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO2)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
                csAtenaRow(ABAtenaEntity.KANAMEISHO2) = String.Empty
                csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = String.Empty
                csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = GetSearchMoji(csJukiDataRow(ABJukiData.KANJIMEISHO2).ToString)

                ' 検索用カナ姓名、検索用カナ姓、検索用カナ名を生成し格納
                strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)),
                                                               String.Empty, m_cFrnHommyoKensakuType)
                ' 通称名を漢字法人代表者氏名に格納
                csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
                ' 汎用区分２に氏名利用区分のパラメータを格納
                csAtenaRow(ABAtenaEntity.HANYOKB2) = csJukiDataRow(ABJukiData.SHIMEIRIYOKB)
                ' 取得した検索用カナ姓名、検索用カナ姓、検索用カナ名を格納
                csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = strSearchKana(0)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = strSearchKana(1)
                csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = strSearchKana(2)

            ElseIf (m_cFrnHommyoKensakuType = FrnHommyoKensakuType.Tsusho_Seishiki) Then
                ' 通称名優先(本名優先の条件以外の場合)
                csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO1)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
                csAtenaRow(ABAtenaEntity.KANAMEISHO2) = csJukiDataRow(ABJukiData.KANAMEISHO2)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
                csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = csJukiDataRow(ABJukiData.SEARCHKANJIMEISHO)
                ' 検索用カナ姓名、検索用カナ姓、検索用カナ名を生成し格納
                strSearchKana = cHenshuSearchKana.GetSearchKana(CStr(csJukiDataRow(ABJukiData.KANAMEISHO1)),
                                                                CStr(csJukiDataRow(ABJukiData.KANAMEISHO2)),
                                                                m_cFrnHommyoKensakuType)
                ' 通称名を漢字法人代表者氏名を空にする
                csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = String.Empty
                ' 汎用区分２に氏名利用区分のパラメータを格納
                csAtenaRow(ABAtenaEntity.HANYOKB2) = csJukiDataRow(ABJukiData.SHIMEIRIYOKB)
                ' 取得した検索用カナ姓名、検索用カナ姓、検索用カナ名を格納
                csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = strSearchKana(0)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = strSearchKana(1)
                csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = strSearchKana(2)
            Else
                '通称名優先（既存ユーザ）
                csAtenaRow(ABAtenaEntity.KANAMEISHO1) = csJukiDataRow(ABJukiData.KANAMEISHO1)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO1) = csJukiDataRow(ABJukiData.KANJIMEISHO1)
                csAtenaRow(ABAtenaEntity.KANAMEISHO2) = csJukiDataRow(ABJukiData.KANAMEISHO2)
                csAtenaRow(ABAtenaEntity.KANJIMEISHO2) = csJukiDataRow(ABJukiData.KANJIMEISHO2)
                ' 通称名を漢字法人代表者氏名を空にする
                csAtenaRow(ABAtenaEntity.KANJIHJNDAIHYOSHSHIMEI) = String.Empty
                ' 汎用区分２に氏名利用区分のパラメータを格納
                csAtenaRow(ABAtenaEntity.HANYOKB2) = csJukiDataRow(ABJukiData.SHIMEIRIYOKB)
                csAtenaRow(ABAtenaEntity.SEARCHKANJIMEISHO) = csJukiDataRow(ABJukiData.SEARCHKANJIMEISHO)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEIMEI) = csJukiDataRow(ABJukiData.SEARCHKANASEIMEI)
                csAtenaRow(ABAtenaEntity.SEARCHKANASEI) = csJukiDataRow(ABJukiData.SEARCHKANASEI)
                csAtenaRow(ABAtenaEntity.SEARCHKANAMEI) = csJukiDataRow(ABJukiData.SEARCHKANAMEI)
            End If
            csAtenaRow(ABAtenaEntity.KYUSEI) = csJukiDataRow(ABJukiData.KYUSEI)

            ' ・住基履歴番号=(履歴番号)
            csAtenaRow(ABAtenaEntity.JUKIRRKNO) = CStr(csJukiDataRow(ABJukiData.RIREKINO)).RSubstring(2, 4)
            ' ・履歴開始年月日～住民票表示順
            csAtenaRow(ABAtenaEntity.RRKST_YMD) = csJukiDataRow(ABJukiData.RRKST_YMD)
            csAtenaRow(ABAtenaEntity.RRKED_YMD) = csJukiDataRow(ABJukiData.RRKED_YMD)
            csAtenaRow(ABAtenaEntity.UMAREYMD) = csJukiDataRow(ABJukiData.UMAREYMD)
            csAtenaRow(ABAtenaEntity.UMAREWMD) = csJukiDataRow(ABJukiData.UMAREWMD)
            csAtenaRow(ABAtenaEntity.SEIBETSUCD) = csJukiDataRow(ABJukiData.SEIBETSUCD)
            csAtenaRow(ABAtenaEntity.SEIBETSU) = csJukiDataRow(ABJukiData.SEIBETSU)
            csAtenaRow(ABAtenaEntity.SEKINO) = csJukiDataRow(ABJukiData.SEIKINO)
            csAtenaRow(ABAtenaEntity.JUMINHYOHYOJIJUN) = csJukiDataRow(ABJukiData.JUMINHYOHYOJIJUN)
            ' ・第２住民票表示順
            csAtenaRow(ABAtenaEntity.DAI2JUMINHYOHYOJIJUN) = csJukiDataRow(ABJukiData.HYOJIJUN2)
            ' ・続柄コード・続柄・第2続柄コード・第2続柄
            ' 　住民種別の下１桁が”8”（転出者）の場合で続柄が”01”（世帯主）の場合、管理情報のコードに変更し、			
            '   名称はクリアする
            If ((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").RSubstring(1, 1) = "8") Then
                If (csJukiDataRow(ABJukiData.ZOKUGARACD).ToString.TrimEnd = "02") Then
                    If (m_strZokugara1Init = "00") Then
                        csAtenaRow(ABAtenaEntity.ZOKUGARACD) = String.Empty
                        csAtenaRow(ABAtenaEntity.ZOKUGARA) = String.Empty
                    Else
                        csAtenaRow(ABAtenaEntity.ZOKUGARACD) = m_strZokugara1Init
                        csAtenaRow(ABAtenaEntity.ZOKUGARA) = CNS_KURAN
                    End If
                Else
                    csAtenaRow(ABAtenaEntity.ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD)
                    csAtenaRow(ABAtenaEntity.ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA)
                End If
                If (csJukiDataRow(ABJukiData.ZOKUGARACD2).ToString.TrimEnd = "02") Then
                    If (m_strZokugara2Init = "00") Then
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = String.Empty
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = String.Empty
                    Else
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = m_strZokugara2Init
                        csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = CNS_KURAN
                    End If
                Else
                    csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD2)
                    csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA2)
                End If
            Else
                ' 住民種別の下１桁が”8”（転出者）でない場合は、そのままセット			
                csAtenaRow(ABAtenaEntity.ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD)
                csAtenaRow(ABAtenaEntity.ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA)
                csAtenaRow(ABAtenaEntity.DAI2ZOKUGARACD) = csJukiDataRow(ABJukiData.ZOKUGARACD2)
                csAtenaRow(ABAtenaEntity.DAI2ZOKUGARA) = csJukiDataRow(ABJukiData.ZOKUGARA2)
            End If
            ' ・世帯主住民コード～カナ第２世帯主名
            csAtenaRow(ABAtenaEntity.STAINUSJUMINCD) = csJukiDataRow(ABJukiData.STAINUSJUMINCD)
            csAtenaRow(ABAtenaEntity.STAINUSMEI) = csJukiDataRow(ABJukiData.KANJISTAINUSMEI)
            csAtenaRow(ABAtenaEntity.KANASTAINUSMEI) = csJukiDataRow(ABJukiData.KANASTAINUSMEI)
            csAtenaRow(ABAtenaEntity.DAI2STAINUSJUMINCD) = csJukiDataRow(ABJukiData.STAINUSJUMINCD2)
            csAtenaRow(ABAtenaEntity.DAI2STAINUSMEI) = csJukiDataRow(ABJukiData.KANJISTAINUSMEI2)
            csAtenaRow(ABAtenaEntity.KANADAI2STAINUSMEI) = csJukiDataRow(ABJukiData.KANASTAINUSMEI2)

            ' ・郵便番号～方書
            ' ・転出確定住所がある場合は、転出確定欄からセット（ない項目はセットなし）
            If (csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO).ToString.TrimEnd <> String.Empty) Then
                csAtenaRow(ABAtenaEntity.YUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIYUBINNO)
                csAtenaRow(ABAtenaEntity.JUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD), String)
                csAtenaRow(ABAtenaEntity.JUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO)
                ' 番地情報から番地コードを取得
                strBanchiCD = m_cBanchiCDHenshuB.CreateBanchiCD(CStr(csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)))
                csAtenaRow(ABAtenaEntity.BANCHICD1) = strBanchiCD(0)
                csAtenaRow(ABAtenaEntity.BANCHICD2) = strBanchiCD(1)
                csAtenaRow(ABAtenaEntity.BANCHICD3) = strBanchiCD(2)
                csAtenaRow(ABAtenaEntity.BANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)
                csAtenaRow(ABAtenaEntity.KATAGAKIFG) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKICD) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI)
                ' 管内管外区分：管外にセット    ※コメント:転出確定住所が存在する場合は管外に設定する。
                csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "2"

            ElseIf (csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO).ToString.TrimEnd <> String.Empty) Then
                ' ・転出確定住所が無く、転出予定住所がある場合は、転出予定欄からセット（ない項目はセットなし）
                csAtenaRow(ABAtenaEntity.YUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIYUBINNO)
                csAtenaRow(ABAtenaEntity.JUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD), String)
                csAtenaRow(ABAtenaEntity.JUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO)
                ' 番地情報から番地コードを取得
                strBanchiCD = m_cBanchiCDHenshuB.CreateBanchiCD(CStr(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)))
                csAtenaRow(ABAtenaEntity.BANCHICD1) = strBanchiCD(0)
                csAtenaRow(ABAtenaEntity.BANCHICD2) = strBanchiCD(1)
                csAtenaRow(ABAtenaEntity.BANCHICD3) = strBanchiCD(2)
                csAtenaRow(ABAtenaEntity.BANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)
                csAtenaRow(ABAtenaEntity.KATAGAKIFG) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKICD) = String.Empty
                csAtenaRow(ABAtenaEntity.KATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI)
                ' 管内管外区分：管外にセット    ※コメント:転出予定住所が存在する場合は管外に設定する。
                csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "2"

            Else
                ' ・両方も無い場合は、住基住所欄からセット
                csAtenaRow(ABAtenaEntity.YUBINNO) = csJukiDataRow(ABJukiData.JUKIYUBINNO)
                csAtenaRow(ABAtenaEntity.JUSHOCD) = CType(csJukiDataRow(ABJukiData.JUKIJUSHOCD), String).RPadLeft(13)
                csAtenaRow(ABAtenaEntity.JUSHO) = csJukiDataRow(ABJukiData.JUKIJUSHO)
                csAtenaRow(ABAtenaEntity.BANCHICD1) = csJukiDataRow(ABJukiData.JUKIBANCHICD1)
                csAtenaRow(ABAtenaEntity.BANCHICD2) = csJukiDataRow(ABJukiData.JUKIBANCHICD2)
                csAtenaRow(ABAtenaEntity.BANCHICD3) = csJukiDataRow(ABJukiData.JUKIBANCHICD3)
                csAtenaRow(ABAtenaEntity.BANCHI) = csJukiDataRow(ABJukiData.JUKIBANCHI)
                csAtenaRow(ABAtenaEntity.KATAGAKIFG) = csJukiDataRow(ABJukiData.JUKIKATAGAKIFG)
                csAtenaRow(ABAtenaEntity.KATAGAKICD) = csJukiDataRow(ABJukiData.JUKIKATAGAKICD).ToString.Trim.RPadLeft(20)
                csAtenaRow(ABAtenaEntity.KATAGAKI) = csJukiDataRow(ABJukiData.JUKIKATAGAKI)
                ' 管内管外区分：管内にセット    ※コメント:転出確定住所、転出予定住所が存在しない場合は管内に設定する。
                csAtenaRow(ABAtenaEntity.KANNAIKANGAIKB) = "1"

            End If
            ' ・連絡先１～改製年月日
            csAtenaRow(ABAtenaEntity.RENRAKUSAKI1) = csJukiDataRow(ABJukiData.RENRAKUSAKI1)
            csAtenaRow(ABAtenaEntity.RENRAKUSAKI2) = csJukiDataRow(ABJukiData.RENRAKUSAKI2)
            csAtenaRow(ABAtenaEntity.HON_ZJUSHOCD) = CType(csJukiDataRow(ABJukiData.HON_ZJUSHOCD), String)
            csAtenaRow(ABAtenaEntity.HON_JUSHO) = csJukiDataRow(ABJukiData.HON_JUSHO)
            csAtenaRow(ABAtenaEntity.HONSEKIBANCHI) = csJukiDataRow(ABJukiData.HON_BANCHI)
            csAtenaRow(ABAtenaEntity.HITTOSH) = csJukiDataRow(ABJukiData.HITTOSHA)
            csAtenaRow(ABAtenaEntity.CKINIDOYMD) = csJukiDataRow(ABJukiData.CKINIDOYMD)
            csAtenaRow(ABAtenaEntity.CKINJIYUCD) = csJukiDataRow(ABJukiData.CKINJIYUCD)
            csAtenaRow(ABAtenaEntity.CKINJIYU) = csJukiDataRow(ABJukiData.CKINJIYU)
            csAtenaRow(ABAtenaEntity.CKINTDKDYMD) = csJukiDataRow(ABJukiData.CKINTDKDYMD)
            csAtenaRow(ABAtenaEntity.CKINTDKDTUCIKB) = csJukiDataRow(ABJukiData.CKINTDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.TOROKUIDOYMD) = csJukiDataRow(ABJukiData.TOROKUIDOYMD)
            csAtenaRow(ABAtenaEntity.TOROKUIDOWMD) = csJukiDataRow(ABJukiData.TOROKUIDOWMD)
            csAtenaRow(ABAtenaEntity.TOROKUJIYUCD) = csJukiDataRow(ABJukiData.TOROKUJIYUCD)
            csAtenaRow(ABAtenaEntity.TOROKUJIYU) = csJukiDataRow(ABJukiData.TOROKUJIYU)
            csAtenaRow(ABAtenaEntity.TOROKUTDKDYMD) = csJukiDataRow(ABJukiData.TOROKUTDKDYMD)
            csAtenaRow(ABAtenaEntity.TOROKUTDKDWMD) = csJukiDataRow(ABJukiData.TOROKUTDKDWMD)
            csAtenaRow(ABAtenaEntity.TOROKUTDKDTUCIKB) = csJukiDataRow(ABJukiData.TOROKUTDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.JUTEIIDOYMD) = csJukiDataRow(ABJukiData.JUTEIIDOYMD)
            csAtenaRow(ABAtenaEntity.JUTEIIDOWMD) = csJukiDataRow(ABJukiData.JUTEIIDOWMD)
            csAtenaRow(ABAtenaEntity.JUTEIJIYUCD) = csJukiDataRow(ABJukiData.JUTEIJIYUCD)
            csAtenaRow(ABAtenaEntity.JUTEIJIYU) = csJukiDataRow(ABJukiData.JUTEIJIYU)
            csAtenaRow(ABAtenaEntity.JUTEITDKDYMD) = csJukiDataRow(ABJukiData.JUTEITDKDYMD)
            csAtenaRow(ABAtenaEntity.JUTEITDKDWMD) = csJukiDataRow(ABJukiData.JUTEITDKDWMD)
            csAtenaRow(ABAtenaEntity.JUTEITDKDTUCIKB) = csJukiDataRow(ABJukiData.JUTEITDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.SHOJOIDOYMD) = csJukiDataRow(ABJukiData.SHOJOIDOYMD)
            csAtenaRow(ABAtenaEntity.SHOJOJIYUCD) = csJukiDataRow(ABJukiData.SHOJOJIYUCD)
            csAtenaRow(ABAtenaEntity.SHOJOJIYU) = csJukiDataRow(ABJukiData.SHOJOJIYU)
            csAtenaRow(ABAtenaEntity.SHOJOTDKDYMD) = csJukiDataRow(ABJukiData.SHOJOTDKDYMD)
            csAtenaRow(ABAtenaEntity.SHOJOTDKDTUCIKB) = csJukiDataRow(ABJukiData.SHOJOTDKDTUCIKB)
            csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIIDOYMD) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIIDOYMD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIIDOYMD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIIDOYMD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTITSUCHIYMD) = csJukiDataRow(ABJukiData.TENSHUTSUKKTITUCIYMD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUNYURIYUCD) = csJukiDataRow(ABJukiData.TENSHUTSUNYURIYUCD)
            csAtenaRow(ABAtenaEntity.TENSHUTSUNYURIYU) = csJukiDataRow(ABJukiData.TENSHUTSUNYURIYU)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_YUBINNO) = csJukiDataRow(ABJukiData.TENUMAEJ_YUBINNO)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_ZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENUMAEJ_ZJUSHOCD), String)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_JUSHO) = csJukiDataRow(ABJukiData.TENUMAEJ_JUSHO)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_BANCHI) = csJukiDataRow(ABJukiData.TENUMAEJ_BANCHI)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_KATAGAKI) = csJukiDataRow(ABJukiData.TENUMAEJ_KATAGAKI)
            csAtenaRow(ABAtenaEntity.TENUMAEJ_STAINUSMEI) = csJukiDataRow(ABJukiData.TENUMAEJ_STAINUSMEI)
            '* 履歴番号 000063 2024/02/06 修正開始
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIYUBINNO)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD), String).RPadLeft(13)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)
            'csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI)

            '住基データ.処理事由コード＝45（転入通知受理）の場合
            If (csJukiDataRow(ABJukiData.SHORIJIYUCD).ToString() = ABEnumDefine.ABJukiShoriJiyuType.TennyuTsuchiJuri.GetHashCode.ToString("00")) Then
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIYUBINNO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD), String)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI)
            Else
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIYUBINNO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUYOTEIZJUSHOCD), String)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIJUSHO)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIBANCHI)
                csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEIKATAGAKI)
            End If
            '* 履歴番号 000063 2024/02/06 修正終了

            csAtenaRow(ABAtenaEntity.TENSHUTSUYOTEISTAINUSMEI) = csJukiDataRow(ABJukiData.TENSHUTSUYOTEISTAINUSMEI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIYUBINNO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIYUBINNO)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIZJUSHOCD) = CType(csJukiDataRow(ABJukiData.TENSHUTSUKKTIZJUSHOCD), String)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIJUSHO) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIJUSHO)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIBANCHI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIBANCHI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIKATAGAKI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIKATAGAKI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTISTAINUSMEI) = csJukiDataRow(ABJukiData.TENSHUTSUKKTISTAINUSMEI)
            csAtenaRow(ABAtenaEntity.TENSHUTSUKKTIMITDKFG) = csJukiDataRow(ABJukiData.TENSHUTSUKKTIMITDKFG)
            csAtenaRow(ABAtenaEntity.BIKOYMD) = csJukiDataRow(ABJukiData.BIKOYMD)
            csAtenaRow(ABAtenaEntity.BIKO) = csJukiDataRow(ABJukiData.BIKO)
            csAtenaRow(ABAtenaEntity.BIKOTENSHUTSUKKTIJUSHOFG) = csJukiDataRow(ABJukiData.BIKOTENSHUTSUKKTIJUSHOFG)
            csAtenaRow(ABAtenaEntity.HANNO) = csJukiDataRow(ABJukiData.HANNO)
            csAtenaRow(ABAtenaEntity.KAISEIATOFG) = csJukiDataRow(ABJukiData.KAISEIATOFG)
            csAtenaRow(ABAtenaEntity.KAISEIMAEFG) = csJukiDataRow(ABJukiData.KAISEIMAEFG)
            csAtenaRow(ABAtenaEntity.KAISEIYMD) = csJukiDataRow(ABJukiData.KAISEIYMD)

            ' ・行政区コード～地区名３
            ' 　住民種別の下１桁が”8”（転出者）でない場合、住基行政区～住基地区名３をセット			
            If ((csJukiDataRow(ABJukiData.JUMINSHU).ToString + "  ").RSubstring(1, 1) <> "8") Then
                csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
                csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
                csAtenaRow(ABAtenaEntity.CHIKUCD1) = csJukiDataRow(ABJukiData.JUKICHIKUCD1)
                csAtenaRow(ABAtenaEntity.CHIKUMEI1) = csJukiDataRow(ABJukiData.JUKICHIKUMEI1)
                csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD2)
                csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI2)
                csAtenaRow(ABAtenaEntity.CHIKUCD3) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                csAtenaRow(ABAtenaEntity.CHIKUMEI3) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
            Else
                ' 住民種別の下１桁が”8”（転出者）の場合、管理情報（行政区初期化～地区３）を見て、
                ' クリアになっている場合は、セットしない
                If (m_strGyosekuInit.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = String.Empty
                    csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = String.Empty
                Else
                    If m_strTenshutsuGyoseikuCD.Trim = String.Empty Then
                        ' クリアしない場合で転出者用の行政区ＣＤが設定されていない場合は
                        ' そのまま住基側のデータを設定する。
                        csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
                        csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
                    Else
                        ' クリアしない場合で転出者用の行政区ＣＤが設定されている場合は
                        ' 行政区ＣＤマスタより行政区名称を取得し、設定する。
                        csAtenaRow(ABAtenaEntity.GYOSEIKUCD) = m_strTenshutsuGyoseikuCD.RPadLeft(9, " "c)
                        csAtenaRow(ABAtenaEntity.GYOSEIKUMEI) = String.Empty
                    End If
                End If
                If (m_strChiku1Init.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.CHIKUCD1) = String.Empty
                    csAtenaRow(ABAtenaEntity.CHIKUMEI1) = String.Empty
                Else
                    csAtenaRow(ABAtenaEntity.CHIKUCD1) = csJukiDataRow(ABJukiData.JUKICHIKUCD1)
                    csAtenaRow(ABAtenaEntity.CHIKUMEI1) = csJukiDataRow(ABJukiData.JUKICHIKUMEI1)
                End If
                If (m_strChiku2Init.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.CHIKUCD2) = String.Empty
                    csAtenaRow(ABAtenaEntity.CHIKUMEI2) = String.Empty
                Else
                    csAtenaRow(ABAtenaEntity.CHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD2)
                    csAtenaRow(ABAtenaEntity.CHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI2)
                End If
                If (m_strChiku3Init.TrimEnd = "1") Then
                    csAtenaRow(ABAtenaEntity.CHIKUCD3) = String.Empty
                    csAtenaRow(ABAtenaEntity.CHIKUMEI3) = String.Empty
                Else
                    csAtenaRow(ABAtenaEntity.CHIKUCD3) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
                    csAtenaRow(ABAtenaEntity.CHIKUMEI3) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
                End If
            End If

            ' ・投票区コード～在留終了年月日
            csAtenaRow(ABAtenaEntity.TOHYOKUCD) = csJukiDataRow(ABJukiData.TOHYOKUCD).ToString.RPadLeft(5)
            csAtenaRow(ABAtenaEntity.SHOGAKKOKUCD) = csJukiDataRow(ABJukiData.SHOGAKKOKUCD)
            csAtenaRow(ABAtenaEntity.CHUGAKKOKUCD) = csJukiDataRow(ABJukiData.CHUGAKKOKUCD)
            csAtenaRow(ABAtenaEntity.HOGOSHAJUMINCD) = csJukiDataRow(ABJukiData.HOGOSHAJUMINCD)
            csAtenaRow(ABAtenaEntity.KANJIHOGOSHAMEI) = csJukiDataRow(ABJukiData.KANJIHOGOSHAMEI)
            csAtenaRow(ABAtenaEntity.KANAHOGOSHAMEI) = csJukiDataRow(ABJukiData.KANAHOGOSHAMEI)
            csAtenaRow(ABAtenaEntity.KIKAYMD) = csJukiDataRow(ABJukiData.KIKAYMD)
            csAtenaRow(ABAtenaEntity.KARIIDOKB) = csJukiDataRow(ABJukiData.KARIIDOKB)
            csAtenaRow(ABAtenaEntity.SHORITEISHIKB) = csJukiDataRow(ABJukiData.SHORITEISHIKB)
            csAtenaRow(ABAtenaEntity.SHORIYOKUSHIKB) = csJukiDataRow(ABJukiData.SHORIYOKUSHIKB)
            csAtenaRow(ABAtenaEntity.JUKIYUBINNO) = csJukiDataRow(ABJukiData.JUKIYUBINNO)
            csAtenaRow(ABAtenaEntity.JUKIJUSHOCD) = csJukiDataRow(ABJukiData.JUKIJUSHOCD)
            csAtenaRow(ABAtenaEntity.JUKIJUSHO) = csJukiDataRow(ABJukiData.JUKIJUSHO)
            csAtenaRow(ABAtenaEntity.JUKIBANCHICD1) = csJukiDataRow(ABJukiData.JUKIBANCHICD1)
            csAtenaRow(ABAtenaEntity.JUKIBANCHICD2) = csJukiDataRow(ABJukiData.JUKIBANCHICD2)
            csAtenaRow(ABAtenaEntity.JUKIBANCHICD3) = csJukiDataRow(ABJukiData.JUKIBANCHICD3)
            csAtenaRow(ABAtenaEntity.JUKIBANCHI) = csJukiDataRow(ABJukiData.JUKIBANCHI)
            csAtenaRow(ABAtenaEntity.JUKIKATAGAKIFG) = csJukiDataRow(ABJukiData.JUKIKATAGAKIFG)
            csAtenaRow(ABAtenaEntity.JUKIKATAGAKICD) = csJukiDataRow(ABJukiData.JUKIKATAGAKICD).ToString.Trim.RPadLeft(20)
            csAtenaRow(ABAtenaEntity.JUKIKATAGAKI) = csJukiDataRow(ABJukiData.JUKIKATAGAKI)
            csAtenaRow(ABAtenaEntity.JUKIGYOSEIKUCD) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUCD)
            csAtenaRow(ABAtenaEntity.JUKIGYOSEIKUMEI) = csJukiDataRow(ABJukiData.JUKIGYOSEIKUMEI)
            csAtenaRow(ABAtenaEntity.JUKICHIKUCD1) = csJukiDataRow(ABJukiData.JUKICHIKUCD1)
            csAtenaRow(ABAtenaEntity.JUKICHIKUMEI1) = csJukiDataRow(ABJukiData.JUKICHIKUMEI1)
            csAtenaRow(ABAtenaEntity.JUKICHIKUCD2) = csJukiDataRow(ABJukiData.JUKICHIKUCD2)
            csAtenaRow(ABAtenaEntity.JUKICHIKUMEI2) = csJukiDataRow(ABJukiData.JUKICHIKUMEI2)
            csAtenaRow(ABAtenaEntity.JUKICHIKUCD3) = csJukiDataRow(ABJukiData.JUKICHIKUCD3)
            csAtenaRow(ABAtenaEntity.JUKICHIKUMEI3) = csJukiDataRow(ABJukiData.JUKICHIKUMEI3)
            csAtenaRow(ABAtenaEntity.KOKUSEKICD) = csJukiDataRow(ABJukiData.KOKUSEKICD)
            csAtenaRow(ABAtenaEntity.KOKUSEKI) = csJukiDataRow(ABJukiData.KOKUSEKI)
            csAtenaRow(ABAtenaEntity.ZAIRYUSKAKCD) = csJukiDataRow(ABJukiData.ZAIRYUSKAKCD)
            csAtenaRow(ABAtenaEntity.ZAIRYUSKAK) = csJukiDataRow(ABJukiData.ZAIRYUSKAK)
            csAtenaRow(ABAtenaEntity.ZAIRYUKIKAN) = csJukiDataRow(ABJukiData.ZAIRYUKIKAN)
            csAtenaRow(ABAtenaEntity.ZAIRYU_ST_YMD) = csJukiDataRow(ABJukiData.ZAIRYU_ST_YMD)
            csAtenaRow(ABAtenaEntity.ZAIRYU_ED_YMD) = csJukiDataRow(ABJukiData.ZAIRYU_ED_YMD)


            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csAtenaRow
    End Function
#End Region

#Region "宛名履歴作成"
    '************************************************************************************************
    '* メソッド名     宛名履歴作成
    '* 
    '* 構文           Private Function SetAtenaRireki(ByVal csAtenaRirekiRow As DataRow, ByVal csAtenaRow As DataRow) As DataRow
    '* 
    '* 機能           宛名Rowから宛名履歴Rowを作成する
    '* 
    '* 引数           csAtenaRirekiRow As DataRow     :宛名履歴Row
    '*                csAtenaRow As DataRow           :宛名Row
    '*
    '* 戻り値         宛名履歴Row
    '************************************************************************************************
    Private Function SetAtenaRireki(ByVal csAtenaRirekiRow As DataRow, ByVal csAtenaRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Dim strRirekiSTYMD As String
        Dim strRirekiEDYMD As String
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            strRirekiSTYMD = csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD).ToString
            strRirekiEDYMD = csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD).ToString

            'データ編集
            For Each csColumn As DataColumn In csAtenaRow.Table.Columns
                If (csAtenaRirekiRow.Table.Columns.Contains(csColumn.ColumnName)) Then
                    '列があった時だけセット
                    csAtenaRirekiRow(csColumn.ColumnName) = csAtenaRow(csColumn.ColumnName)
                Else
                    '何もしない
                End If
            Next
            csAtenaRirekiRow(ABAtenaRirekiEntity.RRKST_YMD) = strRirekiSTYMD
            csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD) = strRirekiEDYMD

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csAtenaRirekiRow
    End Function
#End Region

#Region "宛名履歴標準作成"
    '************************************************************************************************
    '* メソッド名     宛名履歴標準作成
    '* 
    '* 構文           Private Function SetAtenaRirekiHyojun(ByVal csAtenaRirekiHyojunRow As DataRow, ByVal csAtenaHyojunRow As DataRow,
    '*                                      ByVal csAtenaRirekiRow As DataRow) As DataRow
    '* 
    '* 機能           宛名標準Rowから宛名履歴標準Rowを作成する
    '* 
    '* 引数           csAtenaRirekiHyojunRow As DataRow     :宛名履歴標準Row
    '*                csAtenaHyojunRow As DataRow           :宛名標準Row
    '*                csAtenaRirekiRow As DataRow           :宛名履歴Row
    '*
    '* 戻り値         宛名履歴標準Row
    '************************************************************************************************
    Private Function SetAtenaRirekiHyojun(ByVal csAtenaRirekiHyojunRow As DataRow, ByVal csAtenaHyojunRow As DataRow,
                                          ByVal csAtenaRirekiRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name

        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            'データ編集
            For Each csColumn As DataColumn In csAtenaHyojunRow.Table.Columns
                If (csAtenaRirekiHyojunRow.Table.Columns.Contains(csColumn.ColumnName)) Then
                    '列があった時だけセット
                    csAtenaRirekiHyojunRow(csColumn.ColumnName) = csAtenaHyojunRow(csColumn.ColumnName)
                Else
                    '何もしない
                End If
            Next
            csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.RIREKINO) = csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csAtenaRirekiHyojunRow
    End Function
#End Region

#Region "宛名累積標準作成"
    '************************************************************************************************
    '* メソッド名     宛名累積標準作成
    '* 
    '* 構文           Private Function SetAtenaRuisekiHyojun(ByVal csAtenaRuisekiHyojunRow As DataRow,
    '*                                 ByVal csAtenaRirekiHyojunRow As DataRow, ByVal csAtenaRuisekiRow As DataRow) As DataRow
    '* 
    '* 機能           宛名履歴標準Rowから宛名累積標準Rowを作成する
    '* 
    '* 引数           csAtenaRuisekiHyojunRow As DataRow :宛名累積標準Row
    '*                csAtenaRirekiHyojunRowAs DataRow   :宛名履歴標準Row
    '*                csAtenaRuisekiRow As DataRow       :宛名累積Row
    '*
    '* 戻り値         宛名累積標準Row
    '************************************************************************************************
    Private Function SetAtenaRuisekiHyojun(ByVal csAtenaRuisekiHyojunRow As DataRow,
                                           ByVal csAtenaRirekiHyojunRow As DataRow, ByVal csAtenaRuisekiRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name

        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)


            'データ編集
            For Each csColumn As DataColumn In csAtenaRirekiHyojunRow.Table.Columns
                If (csAtenaRuisekiHyojunRow.Table.Columns.Contains(csColumn.ColumnName)) Then
                    '列があった時だけセット
                    csAtenaRuisekiHyojunRow(csColumn.ColumnName) = csAtenaRirekiHyojunRow(csColumn.ColumnName)
                Else
                    '何もしない
                End If
            Next
            csAtenaRuisekiHyojunRow(ABAtenaRuisekiHyojunEntity.SHORINICHIJI) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHORINICHIJI)
            csAtenaRuisekiHyojunRow(ABAtenaRuisekiHyojunEntity.ZENGOKB) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.ZENGOKB)

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csAtenaRuisekiHyojunRow
    End Function
#End Region

#Region "宛名履歴標準直近データ取得"
    '************************************************************************************************
    '* メソッド名     宛名履歴標準直近データ取得
    '* 
    '* 構文           Private Function GetChokkin_RirekiHyojun(ByVal csAtenaRirekiHyojun As DataSet, ByVal strJuminCD As String, ByVal strRirekiNo As String) As DataRow
    '* 
    '* 機能           宛名履歴標準の直近データを取得する
    '* 
    '* 引数           csAtenaRirekiHyojun As DataSet   : 宛名履歴標準データ
    '*                strJuminCD As String             : 住民コード
    '*                strRirekiNo As String            : 履歴番号
    '*
    '* 戻り値         宛名履歴標準を引数の条件で検索し、結果の０番目を返す。無い時はNothingを返す
    '************************************************************************************************
    Private Function GetChokkin_RirekiHyojun(ByVal csAtenaRirekiHyojun As DataSet, ByVal strJuminCD As String, ByVal strRirekiNo As String) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Dim csSelectedRows As DataRow() '検索結果配列
        Dim csCkinRow As DataRow        '直近行
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            If (csAtenaRirekiHyojun IsNot Nothing) Then
                '引数宛名履歴標準がNothingでない時
                csSelectedRows = csAtenaRirekiHyojun.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).Select(
                    String.Format("{0}='{1}' AND {2}='{3}'",
                          ABAtenaRirekiHyojunEntity.JUMINCD, strJuminCD,
                          ABAtenaRirekiHyojunEntity.RIREKINO, strRirekiNo))
                If (csSelectedRows.Count > 0) Then
                    '直近データが存在した時、０行目を取っておく
                    csCkinRow = csSelectedRows(0)
                Else
                    'それ以外の時、Nothingで返す
                    csCkinRow = Nothing
                End If
            Else
                'Nothingの時はNothingで返す
                csCkinRow = Nothing
            End If

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csCkinRow
    End Function
#End Region

#Region "宛名付随標準初期化"
    '************************************************************************************************
    '* メソッド名     宛名付随標準系DataRwo初期化処理
    '* 
    '* 構文           Private Sub ClearAtenaFZYHyojun(ByVal csRow As DataRow)
    '* 
    '* 機能           宛名付随標準系DataRowの初期化を行う
    '* 
    '* 引数           csRow As DataRow     : 宛名付随標準Row
    '************************************************************************************************
    Private Sub ClearAtenaFZYHyojun(ByVal csRow As DataRow)
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            ' 項目の初期化
            For Each csDataColumn As DataColumn In csRow.Table.Columns
                Select Case csDataColumn.ColumnName
                    Case ABAtenaFZYHyojunEntity.KOSHINCOUNTER
                        csRow(csDataColumn) = Decimal.Zero
                    Case Else
                        csRow(csDataColumn) = String.Empty
                End Select
            Next csDataColumn

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
    End Sub
#End Region

#Region "宛名付随標準データ設定"
    '************************************************************************************************
    '* メソッド名     宛名付随標準データ設定処理
    '* 
    '* 構文           Private Function SetAtenaHyojun(ByVal csRow As DataRow, ByVal csAtenaRow As DataRow, ByVal csJukiDataRow As DataRow) As DataRow
    '* 
    '* 機能           宛名付随標準の編集を行う
    '* 
    '* 引数           csRow As DataRow             : 宛名付随標準データ
    '*                csAtenaRow As DataRow        ：宛名データ
    '*                csJukiDataRow As DataRow     ：住基データ
    '*
    '* 戻り値         宛名付随標準データ
    '************************************************************************************************
    Private Function SetAtenaFZYHyojun(ByVal csRow As DataRow, ByVal csAtenaRow As DataRow, ByVal csJukiDataRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            'データ編集
            csRow(ABAtenaFZYHyojunEntity.JUMINCD) = csAtenaRow(ABAtenaEntity.JUMINCD)                         ' 住民コード
            csRow(ABAtenaFZYHyojunEntity.JUMINJUTOGAIKB) = csAtenaRow(ABAtenaEntity.JUMINJUTOGAIKB)           ' 住民住登外区分
            csRow(ABAtenaFZYHyojunEntity.SEARCHFRNMEI) = csJukiDataRow(ABJukiData.SEARCHFRNMEI)               ' 検索用外国人名
            csRow(ABAtenaFZYHyojunEntity.SEARCHKANAFRNMEI) = csJukiDataRow(ABJukiData.SEARCHKANAFRNMEI)       ' 検索用カナ外国人名
            csRow(ABAtenaFZYHyojunEntity.SEARCHTSUSHOMEI) = csJukiDataRow(ABJukiData.SEARCHTSUSHOMEI)         ' 検索用通称名
            csRow(ABAtenaFZYHyojunEntity.SEARCHKANATSUSHOMEI) = csJukiDataRow(ABJukiData.SEARCHKANATSUSHOMEI) ' 検索用カナ通称名
            csRow(ABAtenaFZYHyojunEntity.TSUSHOKANAKAKUNINFG) = csJukiDataRow(ABJukiData.TSUSHOKANAKAKUNINFG) ' 通称フリガナ確認フラグ
            '*履歴番号 000068 2024/07/05 修正開始
            'csRow(ABAtenaFZYHyojunEntity.SHIMEIYUSENKB) = csJukiDataRow(ABJukiData.SHIMEIYUSENKB)             ' 氏名優先区分
            ' 氏名優先区分
            If (CStr(csJukiDataRow(ABJukiData.SHIMEIYUSENKB)).Trim = "2") AndAlso
               (CStr(csJukiDataRow(ABJukiData.KANJIHEIKIMEI)).Trim <> String.Empty) Then
                ' 氏名優先区分＝2（本名優先） かつ 併記名≠空白 の場合
                ' 氏名優先区分に3（併記名優先）を設定
                csRow(ABAtenaFZYHyojunEntity.SHIMEIYUSENKB) = "3"
            Else
                csRow(ABAtenaFZYHyojunEntity.SHIMEIYUSENKB) = csJukiDataRow(ABJukiData.SHIMEIYUSENKB)
            End If
            '*履歴番号 000068 2024/07/05 修正終了
            csRow(ABAtenaFZYHyojunEntity.SEARCHKANJIHEIKIMEI) = csJukiDataRow(ABJukiData.SEARCHKANJIHEIKIMEI) ' 検索用漢字併記名
            csRow(ABAtenaFZYHyojunEntity.SEARCHKANAHEIKIMEI) = csJukiDataRow(ABJukiData.SEARCHKANAHEIKIMEI)   ' 検索用カナ併記名
            csRow(ABAtenaFZYHyojunEntity.ZAIRYUCARDNOKBN) = csJukiDataRow(ABJukiData.ZAIRYUCARDNOKBN)         ' 在留カード等番号区分
            csRow(ABAtenaFZYHyojunEntity.JUKYOCHIHOSEICD) = csJukiDataRow(ABJukiData.JUKYOCHIHOSEICD)         ' 住居地補正コード
            csRow(ABAtenaFZYHyojunEntity.HODAI30JO46MATAHA47KB) = csJukiDataRow(ABJukiData.HODAI30JO46MATAHA47KB) ' 法第30条46又は47区分
            csRow(ABAtenaFZYHyojunEntity.STAINUSSHIMEIYUSENKB) = String.Empty                                   ' 世帯主氏名優先区分
            csRow(ABAtenaFZYHyojunEntity.TOKUSHOMEI_YUKOKIGEN) = String.Empty                                   ' 特別永住者証明書有効期限
            csRow(ABAtenaFZYHyojunEntity.RESERVE1) = String.Empty                                               ' リザーブ１
            csRow(ABAtenaFZYHyojunEntity.RESERVE2) = String.Empty                                               ' リザーブ２
            csRow(ABAtenaFZYHyojunEntity.RESERVE3) = String.Empty                                               ' リザーブ３
            csRow(ABAtenaFZYHyojunEntity.RESERVE4) = String.Empty                                               ' リザーブ４
            csRow(ABAtenaFZYHyojunEntity.RESERVE5) = String.Empty                                               ' リザーブ５

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csRow
    End Function
#End Region

#Region "宛名履歴付随標準作成"
    '************************************************************************************************
    '* メソッド名     宛名履歴付随標準作成
    '* 
    '* 構文           Private Function SetAtenaRirekiFZYHyojun(ByVal csAtenaRirekiFZYHyojunRow As DataRow,
    '*                                                         ByVal csAtenaFZYHyojunRow As DataRow) As DataRow
    '* 
    '* 機能           宛名付随標準Rowから宛名履歴付随標準Rowを作成する
    '* 
    '* 引数           csAtenaRirekiFZYRow As DataRow     :宛名履歴付随標準Row
    '*                csAtenaFZYHyojunRow As DataRow     :宛名付随標準Row
    '*
    '* 戻り値         宛名履歴付随標準Row
    '************************************************************************************************
    Private Function SetAtenaRirekiFZYHyojun(ByVal csAtenaRirekiFZYHyojunRow As DataRow,
                                             ByVal csAtenaFZYHyojunRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name

        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            'データ編集
            For Each csColumn As DataColumn In csAtenaFZYHyojunRow.Table.Columns
                If (csAtenaRirekiFZYHyojunRow.Table.Columns.Contains(csColumn.ColumnName)) Then
                    '列があった時だけセット
                    csAtenaRirekiFZYHyojunRow(csColumn.ColumnName) = csAtenaFZYHyojunRow(csColumn.ColumnName)
                Else
                    '何もしない
                End If
            Next

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csAtenaRirekiFZYHyojunRow
    End Function
#End Region

#Region "宛名累積付随標準作成"
    '************************************************************************************************
    '* メソッド名     宛名累積付随標準作成
    '* 
    '* 構文           Private Function SetAtenaRuisekiHyojun(ByVal csAtenaRuisekiFZYHyojunRow As DataRow,
    '*                                 ByVal csAtenaRirekiFZYHyojunRow As DataRow, ByVal csAtenaRuisekiRow As DataRow) As DataRow
    '* 
    '* 機能           宛名履歴付随標準Rowから宛名累積付随標準Rowを作成する
    '* 
    '* 引数           csAtenaRuisekiFZYHyojunRow As DataRow :宛名累積付随標準Row
    '*                csAtenaRirekiFZYHyojunRowAs DataRow   :宛名履歴付随標準Row
    '*                csAtenaRuisekiRow As DataRow       :宛名累積Row
    '*
    '* 戻り値         宛名累積付随標準Row
    '************************************************************************************************
    Private Function SetAtenaRuisekiFZYHyojun(ByVal csAtenaRuisekiFZYHyojunRow As DataRow,
                                           ByVal csAtenaRirekiFZYHyojunRow As DataRow, ByVal csAtenaRuisekiRow As DataRow) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name

        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)


            'データ編集
            For Each csColumn As DataColumn In csAtenaRirekiFZYHyojunRow.Table.Columns
                If (csAtenaRuisekiFZYHyojunRow.Table.Columns.Contains(csColumn.ColumnName)) Then
                    '列があった時だけセット
                    csAtenaRuisekiFZYHyojunRow(csColumn.ColumnName) = csAtenaRirekiFZYHyojunRow(csColumn.ColumnName)
                Else
                    '何もしない
                End If
            Next
            csAtenaRuisekiFZYHyojunRow(ABAtenaRuisekiHyojunEntity.SHORINICHIJI) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.SHORINICHIJI)
            csAtenaRuisekiFZYHyojunRow(ABAtenaRuisekiHyojunEntity.ZENGOKB) = csAtenaRuisekiRow(ABAtenaRuisekiEntity.ZENGOKB)

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csAtenaRuisekiFZYHyojunRow
    End Function
#End Region

#Region "宛名履歴付随標準直近データ取得"
    '************************************************************************************************
    '* メソッド名     宛名履歴付随標準直近データ取得
    '* 
    '* 構文           Private Function GetChokkin_RirekiFZYHyojun(ByVal csAtenaRirekiFZYHyojun As DataSet, ByVal strJuminCD As String, ByVal strRirekiNo As String) As DataRow
    '* 
    '* 機能           宛名履歴付随標準の直近データを取得する
    '* 
    '* 引数           csAtenaRirekiFZYHyojun As DataSet: 宛名履歴付随標準データ
    '*                strJuminCD As String             : 住民コード
    '*                strRirekiNo As String            : 履歴番号
    '*
    '* 戻り値         宛名履歴付随標準を引数の条件で検索し、結果の０番目を返す。無い時はNothingを返す
    '************************************************************************************************
    Private Function GetChokkin_RirekiFZYHyojun(ByVal csAtenaRirekiFZYHyojun As DataSet,
                                                ByVal strJuminCD As String, ByVal strRirekiNo As String) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Dim csSelectedRows As DataRow() '検索結果配列
        Dim csCkinRow As DataRow        '直近行
        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            If (csAtenaRirekiFZYHyojun IsNot Nothing) Then
                '引数宛名履歴付随標準がNothingでない時
                csSelectedRows = csAtenaRirekiFZYHyojun.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).Select(
                    String.Format("{0}='{1}' AND {2}='{3}'",
                          ABAtenaRirekiFZYHyojunEntity.JUMINCD, strJuminCD,
                          ABAtenaRirekiFZYHyojunEntity.RIREKINO, strRirekiNo))
                If (csSelectedRows.Count > 0) Then
                    '直近データが存在した時、０行目を取っておく
                    csCkinRow = csSelectedRows(0)
                Else
                    'それ以外の時、Nothingで返す
                    csCkinRow = Nothing
                End If
            Else
                'Nothingの時はNothingで返す
                csCkinRow = Nothing
            End If

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csCkinRow
    End Function
#End Region

#Region "共通番号累積標準作成"
    '************************************************************************************************
    '* メソッド名     共通番号累積標準作成
    '* 
    '* 構文            Private Function CreateMyNumberRuisekiHyojun(ByVal csMyNumberRuisekiHyojunEntity As DataSet,
    '*                                                              ByVal csMyNumberHyojunRow As DataRow, ByVal csMyNumberPrm As ABMyNumberPrmXClass,
    '*                                                              ByVal strShoriNichiji As String, ByVal strZengoKbn As String) As DataRow
    '* 
    '* 機能           共通番号標準Rowから共通番号累積標準Rowを作成する
    '* 
    '* 引数           csMyNumberRuisekiHyojunEntity As DataSet:共通番号累積標準DataSet
    '*                csMyNumberHyojunRow As DataRow          :共通番号標準Row
    '*                csMyNumberPrm                           :共通番号パラメータ
    '*                strShoriNichiji As String               :処理日時
    '*                ByVal strZengoKbn As String             :前後区分
    '*
    '* 戻り値         共通番号累積標準Row
    '************************************************************************************************
    Private Function CreateMyNumberRuisekiHyojun(ByVal csMyNumberRuisekiHyojunEntity As DataSet,
                                                 ByVal csMyNumberHyojunRow As DataRow, ByVal csMyNumberPrm As ABMyNumberPrmXClass,
                                                 ByVal strShoriNichiji As String, ByVal strZengoKbn As String) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Dim csNewRow As DataRow

        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            csNewRow = csMyNumberRuisekiHyojunEntity.Tables(ABMyNumberRuisekiHyojunEntity.TABLE_NAME).NewRow
            'データ編集
            csNewRow(ABMyNumberRuisekiHyojunEntity.JUMINCD) = csMyNumberHyojunRow(ABMyNumberHyojunEntity.JUMINCD)                 ' 住民コード
            csNewRow(ABMyNumberRuisekiHyojunEntity.SHICHOSONCD) = csMyNumberPrm.p_strShichosonCD                                  ' 市町村コード
            csNewRow(ABMyNumberRuisekiHyojunEntity.KYUSHICHOSONCD) = csMyNumberPrm.p_strKyuShichosonCD                            ' 旧市町村コード
            csNewRow(ABMyNumberRuisekiHyojunEntity.MYNUMBER) = csMyNumberHyojunRow(ABMyNumberHyojunEntity.MYNUMBER)               ' 個人法人番号
            csNewRow(ABMyNumberRuisekiHyojunEntity.SHORINICHIJI) = strShoriNichiji                                                ' 処理日時
            csNewRow(ABMyNumberRuisekiHyojunEntity.ZENGOKB) = strZengoKbn                                                         ' 前後区分
            csNewRow(ABMyNumberRuisekiHyojunEntity.BANGOHOKOSHINKB) = csMyNumberHyojunRow(ABMyNumberHyojunEntity.BANGOHOKOSHINKB) ' 番号法更新区分
            csNewRow(ABMyNumberRuisekiHyojunEntity.RESERVE1) = csMyNumberHyojunRow(ABMyNumberHyojunEntity.RESERVE1)               ' リザーブ１
            csNewRow(ABMyNumberRuisekiHyojunEntity.RESERVE2) = csMyNumberHyojunRow(ABMyNumberHyojunEntity.RESERVE2)               ' リザーブ２
            csNewRow(ABMyNumberRuisekiHyojunEntity.RESERVE3) = csMyNumberHyojunRow(ABMyNumberHyojunEntity.RESERVE3)               ' リザーブ３
            csNewRow(ABMyNumberRuisekiHyojunEntity.RESERVE4) = csMyNumberHyojunRow(ABMyNumberHyojunEntity.RESERVE4)               ' リザーブ４
            csNewRow(ABMyNumberRuisekiHyojunEntity.RESERVE5) = csMyNumberHyojunRow(ABMyNumberHyojunEntity.RESERVE5)               ' リザーブ５

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csNewRow
    End Function
#End Region

#Region "共通番号標準作成"
    '************************************************************************************************
    '* メソッド名     共通番号標準作成
    '* 
    '* 構文           Private Function CreateMyNumberHyojun(ByVal csMyNumberHyojunEntity As DataSet,
    '*                                                      ByVal csMyNumberPrm As ABMyNumberPrmXClass) As DataRow
    '* 
    '* 機能           共通番号標準Rowを作成する
    '* 
    '* 引数           csMyNumberHyojunEntity As DataSet:共通番号累積標準DataSet
    '*                csMyNumberPrm                           :共通番号パラメータ
    '*
    '* 戻り値         共通番号標準Row
    '************************************************************************************************
    Private Function CreateMyNumberHyojun(ByVal csMyNumberHyojunEntity As DataSet,
                                         ByVal csMyNumberPrm As ABMyNumberPrmXClass) As DataRow
        Dim THIS_METHOD_NAME As String = Reflection.MethodBase.GetCurrentMethod.Name
        Dim csNewRow As DataRow

        Try
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            csNewRow = csMyNumberHyojunEntity.Tables(ABMyNumberHyojunEntity.TABLE_NAME).NewRow
            'データ編集
            csNewRow(ABMyNumberHyojunEntity.JUMINCD) = csMyNumberPrm.p_strJuminCD    ' 住民コード
            csNewRow(ABMyNumberHyojunEntity.MYNUMBER) = csMyNumberPrm.p_strMyNumber  ' 個人法人番号
            csNewRow(ABMyNumberHyojunEntity.BANGOHOKOSHINKB) = String.Empty          ' 番号法更新区分
            csNewRow(ABMyNumberHyojunEntity.RESERVE1) = String.Empty                 ' リザーブ１
            csNewRow(ABMyNumberHyojunEntity.RESERVE2) = String.Empty                 ' リザーブ２
            csNewRow(ABMyNumberHyojunEntity.RESERVE3) = String.Empty                 ' リザーブ３
            csNewRow(ABMyNumberHyojunEntity.RESERVE4) = String.Empty                 ' リザーブ４
            csNewRow(ABMyNumberHyojunEntity.RESERVE5) = String.Empty                 ' リザーブ５

            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)
        Catch objAppExp As UFAppException
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            Throw
        Catch objExp As Exception
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw
        End Try
        Return csNewRow
    End Function
#End Region

#Region "住基データ更新（履歴）"
    '************************************************************************************************
    '* メソッド名     住基データ更新（履歴）
    '* 
    '* 構文           Public Sub JukiDataKoshin08N() 
    '* 
    '* 機能 　    　　住基履歴データを更新する
    '* 
    '* 引数           なし
    '* 
    '* 戻り値         なし
    '************************************************************************************************
    Private Sub JukiDataKoshin08N(ByVal csJukiDataRow As DataRow)
        Const THIS_METHOD_NAME As String = "JukiDataKoshin08N"
        Dim objErrorStruct As UFErrorStruct                 ' エラー定義構造体
        Dim strJuminCD As String                            ' 住民コード
        Dim strLinkNo As String                             ' リンク用連番
        Dim strRirekiNO As String                           ' 履歴番号
        Dim csAtenaEntity As DataSet                        ' 宛名マスタEntity
        Dim csAtenaRow As DataRow                           ' 宛名マスタRow
        Dim csAtenaRirekiRow As DataRow                     ' 宛名履歴Row
        Dim intCount As Integer                             ' 更新件数
        Dim csAtenaRirekiEntity As DataSet                  ' 宛名履歴
        Dim csBkAtenaRirekiRow As DataRow
        Dim csAtenaFzyEntity As DataSet                     ' 宛名付随データ
        Dim csAtenaFzyRow As DataRow                        ' 宛名付随行
        Dim csAtenaRirekiFzyEntity As DataSet               ' 宛名履歴付随
        Dim csAtenaRirekiFzyRow As DataRow                  ' 宛名履歴付随行
        Dim csBkAtenaRirekiFzyRow As DataRow                ' 宛名履歴付随行
        Dim csAtenaHyojunEntity As DataSet                  ' 宛名標準
        Dim csAtenaHyojunRow As DataRow                     ' 宛名標準Row
        Dim csAtenaRirekiHyojunEntity As DataSet            ' 宛名履歴標準
        Dim csAtenaRirekiHyojunRow As DataRow               ' 宛名履歴標準Row
        Dim csBkAtenaRirekiHyojunRow As DataRow
        Dim csAtenaFZYHyojunEntity As DataSet               ' 宛名付随標準
        Dim csAtenaFZYHyojunRow As DataRow                  ' 宛名付随標準Row
        Dim csAtenaRirekiFZyHyojunEntity As DataSet         ' 宛名履歴付随標準
        Dim csAtenaRirekiFZYHyojunRow As DataRow            ' 宛名履歴付随標準Row
        Dim csBkAtenaRirekiFZYHyojunRow As DataRow
        Dim blnRirekiHyojunUpdate As Boolean
        Dim blnRirekiFZYHyojunUpdate As Boolean
        Dim csDataColumn As DataColumn

        Try
            ' デバッグ開始ログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            '---------------------------------------------------------------------------------------
            ' 1. 変数の初期化
            '
            '---------------------------------------------------------------------------------------
            strJuminCD = csJukiDataRow(ABJukiData.JUMINCD).ToString    '対象データの住民コードを取得
            strLinkNo = csJukiDataRow(ABJukiData.LINKNO).ToString.Trim

            '---------------------------------------------------------------------------------------
            ' 2. データ編集
            '---------------------------------------------------------------------------------------
            '宛名
            csAtenaEntity = m_cfRdbClass.GetTableSchema(ABAtenaEntity.TABLE_NAME)
            csAtenaRow = csAtenaEntity.Tables(ABAtenaEntity.TABLE_NAME).NewRow
            Me.ClearAtena(csAtenaRow)
            csAtenaRow = SetAtena(csAtenaRow, csJukiDataRow)

            '宛名付随
            csAtenaFzyEntity = m_cfRdbClass.GetTableSchema(ABAtenaFZYEntity.TABLE_NAME)
            csAtenaFzyRow = csAtenaFzyEntity.Tables(ABAtenaFZYEntity.TABLE_NAME).NewRow
            Me.ClearAtenaFZY(csAtenaFzyRow)
            csAtenaFzyRow = Me.SetAtenaFzy(csAtenaFzyRow, csAtenaRow, csJukiDataRow)

            '宛名標準
            csAtenaHyojunEntity = m_cfRdbClass.GetTableSchema(ABAtenaHyojunEntity.TABLE_NAME)
            csAtenaHyojunRow = csAtenaHyojunEntity.Tables(ABAtenaHyojunEntity.TABLE_NAME).NewRow
            Me.ClearAtenaHyojun(csAtenaHyojunRow)
            csAtenaHyojunRow = Me.SetAtenaHyojun(csAtenaHyojunRow, csAtenaRow, csJukiDataRow)

            '宛名付随標準
            csAtenaFZYHyojunEntity = m_cfRdbClass.GetTableSchema(ABAtenaFZYHyojunEntity.TABLE_NAME)
            csAtenaFZYHyojunRow = csAtenaFZYHyojunEntity.Tables(ABAtenaFZYHyojunEntity.TABLE_NAME).NewRow
            Me.ClearAtenaFZYHyojun(csAtenaFZYHyojunRow)
            csAtenaFZYHyojunRow = Me.SetAtenaFZYHyojun(csAtenaFZYHyojunRow, csAtenaRow, csJukiDataRow)

            '---------------------------------------------------------------------------------------
            ' 3. 履歴データ取得
            '---------------------------------------------------------------------------------------
            '宛名履歴付随
            csAtenaRirekiFzyEntity = m_cAtenaRirekiFzyB.GetAtenaRirekiFZYByLinkNo(strJuminCD, strLinkNo)
            If (csAtenaRirekiFzyEntity Is Nothing) OrElse
                   (csAtenaRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).Rows.Count <> 1) Then
                ' エラー定義を取得（宛名履歴の更新でエラーしました。）
                m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                objErrorStruct = m_cfErrorClass.GetErrorStruct(ABErrorClass.ABE003459)
                Throw New UFAppException(objErrorStruct.m_strErrorMessage + strJuminCD + "-" + strLinkNo, objErrorStruct.m_strErrorCode)
            Else
                csAtenaRirekiFzyRow = csAtenaRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).Rows(0)
                strRirekiNO = csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.RIREKINO).ToString
            End If

            '宛名履歴
            csAtenaRirekiEntity = m_cAtenaRirekiB.GetAtenaRirekiByRirekiNO(strJuminCD, strRirekiNO)
            If (csAtenaRirekiEntity Is Nothing) OrElse
                   (csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows.Count <> 1) Then
                ' エラー定義を取得（宛名履歴の更新でエラーしました。）
                m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                objErrorStruct = m_cfErrorClass.GetErrorStruct(ABErrorClass.ABE003459)
                Throw New UFAppException(objErrorStruct.m_strErrorMessage + strJuminCD + "-" + strRirekiNO, objErrorStruct.m_strErrorCode)
            Else
                csAtenaRirekiRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).Rows(0)
            End If

            '宛名履歴標準
            csAtenaRirekiHyojunEntity = m_cABAtenaRirekiHyojunB.GetAtenaRirekiHyojunBHoshu(strJuminCD, strRirekiNO, True)
            If (csAtenaRirekiHyojunEntity IsNot Nothing) AndAlso
               (csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                csAtenaRirekiHyojunRow = csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).Rows(0)
                blnRirekiHyojunUpdate = True
            Else
                csAtenaRirekiHyojunRow = csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).NewRow
                ClearAtenaHyojun(csAtenaRirekiHyojunRow)
                blnRirekiHyojunUpdate = False
            End If

            '宛名履歴付随標準
            csAtenaRirekifzyHyojunEntity = m_cABAtenaRirekiFZYHyojunB.GetAtenaRirekiFZYHyojunBHoshu(strJuminCD, strRirekiNO, True)
            If (csAtenaRirekiFZyHyojunEntity IsNot Nothing) AndAlso
               (csAtenaRirekiFZyHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).Rows.Count > 0) Then
                csAtenaRirekiFZYHyojunRow = csAtenaRirekiFZyHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).Rows(0)
                blnRirekiFZYHyojunUpdate = True
            Else
                csAtenaRirekiFZYHyojunRow = csAtenaRirekiFZyHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).NewRow
                ClearAtenaFZYHyojun(csAtenaRirekiFZYHyojunRow)
                blnRirekiFZYHyojunUpdate = False
            End If

            '---------------------------------------------------------------------------------------
            ' 4. 履歴データ編集
            '---------------------------------------------------------------------------------------
            '宛名履歴
            csBkAtenaRirekiRow = csAtenaRirekiEntity.Tables(ABAtenaRirekiEntity.TABLE_NAME).NewRow
            For Each csDataColumn In csAtenaRirekiRow.Table.Columns
                csBkAtenaRirekiRow(csDataColumn.ColumnName) = csAtenaRirekiRow(csDataColumn.ColumnName)
            Next csDataColumn
            csAtenaRirekiRow = SetAtenaRireki(csAtenaRirekiRow, csAtenaRow)
            csAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
            csAtenaRirekiRow(ABAtenaRirekiEntity.JUMINJUTOGAIKB) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.JUMINJUTOGAIKB)
            csAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.RRKED_YMD)
            csAtenaRirekiRow(ABAtenaRirekiEntity.TANMATSUID) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.TANMATSUID)
            csAtenaRirekiRow(ABAtenaRirekiEntity.SAKUJOFG) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.SAKUJOFG)
            csAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINCOUNTER) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINCOUNTER)
            csAtenaRirekiRow(ABAtenaRirekiEntity.SAKUSEINICHIJI) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.SAKUSEINICHIJI)
            csAtenaRirekiRow(ABAtenaRirekiEntity.SAKUSEIUSER) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.SAKUSEIUSER)
            csAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINNICHIJI) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINNICHIJI)
            csAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINUSER) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINUSER)

            '宛名履歴標準
            csBkAtenaRirekiHyojunRow = csAtenaRirekiHyojunEntity.Tables(ABAtenaRirekiHyojunEntity.TABLE_NAME).NewRow
            For Each csDataColumn In csAtenaRirekiHyojunRow.Table.Columns
                csBkAtenaRirekiHyojunRow(csDataColumn.ColumnName) = csAtenaRirekiHyojunRow(csDataColumn.ColumnName)
            Next csDataColumn
            csAtenaRirekiHyojunRow = SetAtenaRirekiHyojun(csAtenaRirekiHyojunRow, csAtenaHyojunRow, csAtenaRirekiRow)
            csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.RIREKINO) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
            csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.JUMINJUTOGAIKB) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.JUMINJUTOGAIKB)
            If (blnRirekiHyojunUpdate) Then
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.TANMATSUID) = csBkAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.TANMATSUID)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.SAKUJOFG) = csBkAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.SAKUJOFG)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.KOSHINCOUNTER) = csBkAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.KOSHINCOUNTER)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.SAKUSEINICHIJI) = csBkAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.SAKUSEINICHIJI)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.SAKUSEIUSER) = csBkAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.SAKUSEIUSER)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.KOSHINNICHIJI) = csBkAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.KOSHINNICHIJI)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.KOSHINUSER) = csBkAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.KOSHINUSER)
            Else
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.TANMATSUID) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.TANMATSUID)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.SAKUJOFG) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.SAKUJOFG)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.KOSHINCOUNTER) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINCOUNTER)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.SAKUSEINICHIJI) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.SAKUSEINICHIJI)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.SAKUSEIUSER) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.SAKUSEIUSER)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.KOSHINNICHIJI) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINNICHIJI)
                csAtenaRirekiHyojunRow(ABAtenaRirekiHyojunEntity.KOSHINUSER) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINUSER)
            End If

            '宛名履歴付随
            csBkAtenaRirekiFzyRow = csAtenaRirekiFzyEntity.Tables(ABAtenaRirekiFZYEntity.TABLE_NAME).NewRow
            For Each csDataColumn In csAtenaRirekiFzyRow.Table.Columns
                csBkAtenaRirekiFzyRow(csDataColumn.ColumnName) = csAtenaRirekiFzyRow(csDataColumn.ColumnName)
            Next csDataColumn
            csAtenaRirekiFzyRow = SetAtenaRirekiFzy(csAtenaRirekiFzyRow, csAtenaFzyRow)
            csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.RIREKINO) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
            csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.JUMINJUTOGAIKB) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.JUMINJUTOGAIKB)
            csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.TANMATSUID) = csBkAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.TANMATSUID)
            csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.SAKUJOFG) = csBkAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.SAKUJOFG)
            csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.KOSHINCOUNTER) = csBkAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.KOSHINCOUNTER)
            csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.SAKUSEINICHIJI) = csBkAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.SAKUSEINICHIJI)
            csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.SAKUSEIUSER) = csBkAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.SAKUSEIUSER)
            csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.KOSHINNICHIJI) = csBkAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.KOSHINNICHIJI)
            csAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.KOSHINUSER) = csBkAtenaRirekiFzyRow(ABAtenaRirekiFZYEntity.KOSHINUSER)

            '宛名履歴付随標準
            csBkAtenaRirekiFZYHyojunRow = csAtenaRirekiFZyHyojunEntity.Tables(ABAtenaRirekiFZYHyojunEntity.TABLE_NAME).NewRow
            For Each csDataColumn In csAtenaRirekiFZYHyojunRow.Table.Columns
                csBkAtenaRirekiFZYHyojunRow(csDataColumn.ColumnName) = csAtenaRirekiFZYHyojunRow(csDataColumn.ColumnName)
            Next csDataColumn
            csAtenaRirekiFZYHyojunRow = SetAtenaRirekiFZYHyojun(csAtenaRirekiFZYHyojunRow, csAtenaFZYHyojunRow)
            csAtenaRirekiFZYHyojunRow(ABAtenaRirekiHyojunEntity.RIREKINO) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.RIREKINO)
            csAtenaRirekiFZYHyojunRow(ABAtenaRirekiHyojunEntity.JUMINJUTOGAIKB) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.JUMINJUTOGAIKB)
            If (blnRirekiFZYHyojunUpdate) Then
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.TANMATSUID) = csBkAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.TANMATSUID)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.SAKUJOFG) = csBkAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.SAKUJOFG)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.KOSHINCOUNTER) = csBkAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.KOSHINCOUNTER)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.SAKUSEINICHIJI) = csBkAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.SAKUSEINICHIJI)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.SAKUSEIUSER) = csBkAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.SAKUSEIUSER)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.KOSHINNICHIJI) = csBkAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.KOSHINNICHIJI)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.KOSHINUSER) = csBkAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.KOSHINUSER)
            Else
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.TANMATSUID) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.TANMATSUID)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.SAKUJOFG) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.SAKUJOFG)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.KOSHINCOUNTER) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINCOUNTER)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.SAKUSEINICHIJI) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.SAKUSEINICHIJI)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.SAKUSEIUSER) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.SAKUSEIUSER)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.KOSHINNICHIJI) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINNICHIJI)
                csAtenaRirekiFZYHyojunRow(ABAtenaRirekiFZYHyojunEntity.KOSHINUSER) = csBkAtenaRirekiRow(ABAtenaRirekiEntity.KOSHINUSER)
            End If

            '---------------------------------------------------------------------------------------
            ' 5. 履歴データ更新
            '---------------------------------------------------------------------------------------
            If (blnRirekiHyojunUpdate) AndAlso (blnRirekiFZYHyojunUpdate) Then
                intCount = m_cAtenaRirekiB.UpdateAtenaRB(csAtenaRirekiRow, csAtenaRirekiHyojunRow, csAtenaRirekiFzyRow, csAtenaRirekiFZYHyojunRow)
                If (intCount <> 1) Then
                    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                Else
                End If
            Else
                '宛名履歴・宛名履歴付随
                intCount = m_cAtenaRirekiB.UpdateAtenaRB(csAtenaRirekiRow, csAtenaRirekiFzyRow)
                If (intCount <> 1) Then
                    m_cfErrorClass = New UFErrorClass(THIS_BUSINESSID)
                    objErrorStruct = m_cfErrorClass.GetErrorStruct(URErrorClass.URE001047)
                    Throw New UFAppException(objErrorStruct.m_strErrorMessage + "宛名履歴", objErrorStruct.m_strErrorCode)
                Else
                End If
                '宛名履歴標準
                If (blnRirekiHyojunUpdate) Then
                    intCount = m_cABAtenaRirekiHyojunB.UpdateAtenaRirekiHyojunB(csAtenaRirekiHyojunRow)
                Else
                    intCount = m_cABAtenaRirekiHyojunB.InsertAtenaRirekiHyojunB(csAtenaRirekiHyojunRow)
                End If
                '宛名履歴付随標準
                If (blnRirekiFZYHyojunUpdate) Then
                    intCount = m_cABAtenaRirekiFZYHyojunB.UpdateAtenaRirekiFZYHyojunB(csAtenaRirekiFZYHyojunRow)
                Else
                    intCount = m_cABAtenaRirekiFZYHyojunB.InsertAtenaRirekiFZYHyojunB(csAtenaRirekiFZYHyojunRow)
                End If
            End If

            ' デバッグ終了ログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objAppExp As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【ワーニングコード:" + objAppExp.p_strErrorCode + "】" +
                                        "【ワーニング内容:" + objAppExp.Message + "】")
            ' エラーをそのままスローする
            Throw objAppExp

        Catch objExp As Exception
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData,
                                        "【クラス名:" + THIS_CLASS_NAME + "】" +
                                        "【メソッド名:" + THIS_METHOD_NAME + "】" +
                                        "【エラー内容:" + objExp.Message + "】")
            Throw objExp
        End Try

    End Sub
#End Region

    '*履歴番号 000065 2024/04/02 追加開始
#Region "個人制御マスタの更新"
    '************************************************************************************************
    '* メソッド名     個人制御マスタの更新
    '* 
    '* 構文           Public Function UpdateKojinSeigyo(ByVal cABKariTorokuPrm As ABKariTorokuParamXClass) As Integer
    '* 
    '* 機能　　    　 個人制御マスタの更新を行う
    '* 
    '* 引数           cdrJukiData：住基データ
    '* 
    '* 戻り値         更新件数：Integer
    '************************************************************************************************
    Public Function UpdateKojinSeigyo(ByVal cdrJukiData As DataRow) As Integer
        Const THIS_METHOD_NAME As String = "UpdateKojinSeigyo"          ' メソッド名
        Dim cfErrorClass As UFErrorClass                    'エラー処理クラス
        Dim objErrorStruct As UFErrorStruct                 'エラー定義構造体
        Dim strSeinenHikokenninGaitoUmu As String           '成年被後見人_該当有無
        Dim strSeinenHikokenninShinpanKakuteiYMD As String  '成年被後見人_審判確定日
        Dim strSeinenHikokenninTokiYMD As String            '成年被後見人の登記日
        Dim strSeinenHikokenninShittaYMD As String          '成年被後見人である旨を知った日
        Dim strJukiReserve4 As String()                     '住基データ_リザーブ4をセパレータで分割して保持
        Dim cdsKojinseigyo As DataSet                       '個人制御マスタDataSet
        Dim cdsKojinseigyoRrk As DataSet                    '個人制御履歴DataSet
        Dim cdrKojinseigyoRow As DataRow                    '個人制御マスタDataRow
        Dim cdrKojinseigyoRrkRow As DataRow                 '個人制御履歴DataRow
        Dim csColumn As DataColumn                          'カラム情報
        Dim csSortDataRow As DataRow()                      '履歴番号取得用DataRow
        Dim intKoshinCnt As Integer = 0                     '個人制御マスタ更新件数
        Dim intRrkKoshinCnt As Integer = 0                  '個人制御履歴更新件数

        Try
            ' デバッグログ出力
            m_cfLogClass.DebugStartWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

            With cdrJukiData

                ' 引数.住基データから必要項目を取得
                strJukiReserve4 = .Item(ABJukiData.JUKIRESERVE4).ToString.Split("^"c)
                If (strJukiReserve4.Count = 4) Then
                    strSeinenHikokenninGaitoUmu = strJukiReserve4(0)
                    strSeinenHikokenninShinpanKakuteiYMD = strJukiReserve4(1)
                    strSeinenHikokenninTokiYMD = strJukiReserve4(2)
                    strSeinenHikokenninShittaYMD = strJukiReserve4(3)
                Else
                    strSeinenHikokenninGaitoUmu = "0"
                    strSeinenHikokenninShinpanKakuteiYMD = String.Empty
                    strSeinenHikokenninTokiYMD = String.Empty
                    strSeinenHikokenninShittaYMD = String.Empty
                End If


                ' 個人制御データを取得
                cdsKojinseigyo = m_cABKojinSeigyoB.GetABKojinSeigyo(.Item(ABJukiData.JUMINCD).ToString)

                ' 個人制御履歴データを取得
                cdsKojinseigyoRrk = m_cABKojinseigyoRirekiB.GetKojinseigyoRireki(.Item(ABJukiData.JUMINCD).ToString)

                ' 個人制御情報の更新
                If (cdsKojinseigyo.Tables(ABKojinseigyomstEntity.TABLE_NAME).Rows.Count = 0) Then
                    ' 取得した個人制御マスタのデータが0件の場合

                    If (strSeinenHikokenninGaitoUmu = "1") Then
                        ' 成年被後見人_該当有無の値が"1"（有）の場合

                        cdrKojinseigyoRow = cdsKojinseigyo.Tables(ABKojinseigyomstEntity.TABLE_NAME).NewRow

                        cdrKojinseigyoRow.BeginEdit()

                        For Each csColumn In cdrKojinseigyoRow.Table.Columns
                            If (csColumn.DataType.Name = GetType(Decimal).Name) Then

                                cdrKojinseigyoRow(csColumn) = 0

                            Else

                                cdrKojinseigyoRow(csColumn) = String.Empty

                            End If

                        Next csColumn

                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.JUMINCD) = .Item(ABJukiData.JUMINCD).ToString                         ' 住民コード
                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHICHOSONCD) = .Item(ABJukiData.SHICHOSONCD).ToString                 ' 市町村コード
                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.KYUSHICHOSONCD) = .Item(ABJukiData.KYUSHICHOSONCD).ToString           ' 旧市町村コード
                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKB) = "1"                                                  ' 成年後見区分
                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENMSG) = m_strSeinenKoKenShokiMsg                            ' 成年後見メッセージ
                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKAISHIYMD) = .Item(ABJukiData.CKINIDOYMD).ToString         ' 成年後見開始日
                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENSHURYOYMD) = "99999999"                                    ' 成年後見終了日
                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENSHIMPANKAKUTEIYMD) = strSeinenHikokenninShinpanKakuteiYMD  ' 成年被後見人の審判確定日
                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINTOKIYMD) = strSeinenHikokenninTokiYMD                 ' 成年被後見人の登記日
                        cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINSHITTAYMD) = strSeinenHikokenninShittaYMD             ' 成年被後見人である旨を知った日

                        cdrKojinseigyoRow.EndEdit()

                        intKoshinCnt = m_cABKojinSeigyoB.InsertKojinSeigyo(cdrKojinseigyoRow)

                        If (intKoshinCnt = 0) Then
                            '更新件数が0件の場合   
                            'エラー定義を取得
                            cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                            objErrorStruct = cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                            Throw New UFAppException(objErrorStruct.m_strErrorMessage + ERR_MSG_KOJINSEIGYO, objErrorStruct.m_strErrorCode)
                        End If
                    Else
                        Return intKoshinCnt
                    End If
                Else
                    cdrKojinseigyoRow = cdsKojinseigyo.Tables(ABKojinseigyomstEntity.TABLE_NAME).Rows(0)
                    If (((cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKB).ToString = "1") AndAlso (strSeinenHikokenninGaitoUmu = "0")) OrElse
                        ((cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKB).ToString.Trim = String.Empty) AndAlso (strSeinenHikokenninGaitoUmu = "1")) OrElse
                         (cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENSHIMPANKAKUTEIYMD).ToString <> strSeinenHikokenninShinpanKakuteiYMD) OrElse
                         (cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINTOKIYMD).ToString <> strSeinenHikokenninTokiYMD) OrElse
                         (cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINSHITTAYMD).ToString <> strSeinenHikokenninShittaYMD)) Then

                        If (strSeinenHikokenninGaitoUmu = "1") Then
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKB) = "1"                                                  ' 成年被後見区分
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENMSG) = m_strSeinenKoKenShokiMsg                            ' 成年後見メッセージ
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKAISHIYMD) = .Item(ABJukiData.CKINIDOYMD).ToString         ' 成年後見開始日
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENSHURYOYMD) = "99999999"                                    ' 成年後見終了日
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENSHIMPANKAKUTEIYMD) = strSeinenHikokenninShinpanKakuteiYMD  ' 成年被後見人の審判確定日
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINTOKIYMD) = strSeinenHikokenninTokiYMD                 ' 成年被後見人の登記日
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINSHITTAYMD) = strSeinenHikokenninShittaYMD             ' 成年被後見人である旨を知った日

                        Else
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKB) = String.Empty                                         ' 成年被後見区分
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENMSG) = String.Empty                                        ' 成年後見メッセージ
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKAISHIYMD) = String.Empty                                  ' 成年後見開始日
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENSHURYOYMD) = String.Empty                                  ' 成年後見終了日
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENSHIMPANKAKUTEIYMD) = String.Empty                          ' 成年被後見人の審判確定日
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINTOKIYMD) = String.Empty                               ' 成年被後見人の登記日
                            cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINSHITTAYMD) = String.Empty                             ' 成年被後見人である旨を知った日
                        End If

                        intKoshinCnt = m_cABKojinSeigyoB.UpdateKojinSeigyo(cdrKojinseigyoRow)

                        If (intKoshinCnt = 0) Then
                            '更新件数が0件の場合   
                            'エラー定義を取得
                            cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                            objErrorStruct = cfErrorClass.GetErrorStruct(URErrorClass.URE001048)
                            Throw New UFAppException(objErrorStruct.m_strErrorMessage + ERR_MSG_KOJINSEIGYO, objErrorStruct.m_strErrorCode)
                        End If
                    Else
                        Return intKoshinCnt
                    End If
                End If
            End With

            ' 個人制御履歴の更新
            cdrKojinseigyoRrkRow = cdsKojinseigyoRrk.Tables(ABKojinseigyoRirekiEntity.TABLE_NAME).NewRow

            cdrKojinseigyoRrkRow.BeginEdit()

            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.JUMINCD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.JUMINCD).ToString                                              '住民コード
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHICHOSONCD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHICHOSONCD).ToString                                      '市町村コード
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.KYUSHICHOSONCD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.KYUSHICHOSONCD).ToString                                '旧市町村コード
            If (cdsKojinseigyoRrk.Tables(ABKojinseigyoRirekiEntity.TABLE_NAME).Rows.Count = 0) Then                                                                                     '履歴番号
                cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.RIREKINO) = 1
            Else
                csSortDataRow = cdsKojinseigyoRrk.Tables(ABKojinseigyoRirekiEntity.TABLE_NAME).Select(String.Empty,
                                                             ABKojinseigyoRirekiEntity.RIREKINO + " DESC, " _
                                                             + ABKojinseigyoRirekiEntity.RIREKIEDABAN + " DESC ")
                cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.RIREKINO) = CInt(csSortDataRow(0).Item(ABKojinseigyoRirekiEntity.RIREKINO).ToString()) + 1
            End If
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.RIREKIEDABAN) = 0                                                                                                       '履歴枝番
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.DVTAISHOKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.DVTAISHOKB).ToString                                        'ＤＶ対象区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.DVTAISHOMSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.DVTAISHOMSG).ToString                                      'ＤＶ対象メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.DVTAISHOSHINSEIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.DVTAISHOSHINSEIYMD).ToString                        'ＤＶ対象申請日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.DVTAISHOKAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.DVTAISHOKAISHIYMD).ToString                          'ＤＶ対象開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.DVTAISHOSHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.DVTAISHOSHURYOYMD).ToString                          'ＤＶ対象終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.HAKKOTEISHIKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.HAKKOTEISHIKB).ToString                                  '発行停止区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.HAKKOTEISHIMSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.HAKKOTEISHIMSG).ToString                                '発行停止メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.HAKKOTEISHIKAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.HAKKOTEISHIKAISHIYMD).ToString                    '発行停止開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.HAKKOTEISHISHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.HAKKOTEISHISHURYOYMD).ToString                    '発行停止終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.JITTAICHOSAKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.JITTAICHOSAKB).ToString                                  '実態調査区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.JITTAICHOSAMSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.JITTAICHOSAMSG).ToString                                '実態調査メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.JITTAICHOSAKAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.JITTAICHOSAKAISHIYMD).ToString                    '実態調査開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.JITTAICHOSASHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.JITTAICHOSASHURYOYMD).ToString                    '実態調査終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SEINENKOKENKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKB).ToString                                  '成年後見区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SEINENKOKENMSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENMSG).ToString                                '成年後見メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SEINENKOKENKAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENKAISHIYMD).ToString                    '成年後見開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SEINENKOKENSHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENSHURYOYMD).ToString                    '成年後見終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SEINENKOKENSHIMPANKAKUTEIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENKOKENSHIMPANKAKUTEIYMD).ToString    '成年被後見人の審判確定日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SEINENHIKOKENNINTOKIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINTOKIYMD).ToString              '成年被後見人の登記日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SEINENHIKOKENNINSHITTAYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SEINENHIKOKENNINSHITTAYMD).ToString          '成年被後見人である旨を知った日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.KARITOROKUKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.KARITOROKUKB).ToString                                    '仮登録中区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.KARITOROKUMSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.KARITOROKUMSG).ToString                                  '仮登録中メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.KARITOROKUKAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.KARITOROKUKAISHIYMD).ToString                      '仮登録中開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.KARITOROKUSHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.KARITOROKUSHURYOYMD).ToString                      '仮登録中終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.TOKUBETSUYOSHIKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.TOKUBETSUYOSHIKB).ToString                            '特別養子区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.TOKUBETSUYOSHIMSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.TOKUBETSUYOSHIMSG).ToString                          '特別養子メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.TOKUBETSUYOSHIKAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.TOKUBETSUYOSHIKAISHIYMD).ToString              '特別養子開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.TOKUBETSUYOSHISHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.TOKUBETSUYOSHISHURYOYMD).ToString              '特別養子終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.TOKUBETSUJIJOKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.TOKUBETSUJIJOKB).ToString                              '特別事情区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.TOKUBETSUJIJOMSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.TOKUBETSUJIJOMSG).ToString                            '特別事情メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.TOKUBETSUJIJOKAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.TOKUBETSUJIJOKAISHIYMD).ToString                '特別事情開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.TOKUBETSUJIJOSHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.TOKUBETSUJIJOSHURYOYMD).ToString                '特別事情終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI1KB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI1KB).ToString                                    '処理注意1区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI1MSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI1MSG).ToString                                  '処理注意1メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI1KAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI1KAISHIYMD).ToString                      '処理注意1開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI1SHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI1SHURYOYMD).ToString                      '処理注意1終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI2KB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI2KB).ToString                                    '処理注意2区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI2MSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI2MSG).ToString                                  '処理注意2メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI2KAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI2KAISHIYMD).ToString                      '処理注意2開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI2SHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI2SHURYOYMD).ToString                      '処理注意2終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.GYOMUCD_CHUI) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.GYOMUCD_CHUI).ToString                                    '業務コード注意
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.GYOMUSHOSAICD_CHUI) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.GYOMUSHOSAICD_CHUI).ToString                        '業務詳細（税目）コード注意
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI3KB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI3KB).ToString                                    '処理注意3区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI3MSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI3MSG).ToString                                  '処理注意3メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI3KAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI3KAISHIYMD).ToString                      '処理注意3開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORICHUI3SHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORICHUI3SHURYOYMD).ToString                      '処理注意3終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORIHORYUKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORIHORYUKB).ToString                                    '処理保留区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORIHORYUMSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORIHORYUMSG).ToString                                  '処理保留メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORIHORYUKAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORIHORYUKAISHIYMD).ToString                      '処理保留開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SHORIHORYUSHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SHORIHORYUSHURYOYMD).ToString                      '処理保留終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.GYOMUCD_HORYU) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.GYOMUCD_HORYU).ToString                                  '業務コード保留
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.GYOMUSHOSAICD_HORYU) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.GYOMUSHOSAICD_HORYU).ToString                      '業務詳細（税目）コード保留
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SANSHOFUKAKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SANSHOFUKAKB).ToString                                    '他業務不可区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SANSHOFUKAMSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SANSHOFUKAMSG).ToString                                  '他業務不可メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SANSHOFUKAKAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SANSHOFUKAKAISHIYMD).ToString                      '他業務不可開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SANSHOFUKASHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SANSHOFUKASHURYOYMD).ToString                      '他業務不可終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SANSHOFUKATOROKUGYOMUCD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SANSHOFUKATOROKUGYOMUCD).ToString              '登録業務コード
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA1KB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA1KB).ToString                                          'その他１区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA1MSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA1MSG).ToString                                        'その他１メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA1KAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA1KAISHIYMD).ToString                            'その他１開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA1SHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA1SHURYOYMD).ToString                            'その他１終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA2KB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA2KB).ToString                                          'その他２区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA2MSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA2MSG).ToString                                        'その他２メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA2KAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA2KAISHIYMD).ToString                            'その他２開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA2SHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA2SHURYOYMD).ToString                            'その他２終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA3KB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA3KB).ToString                                          'その他３区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA3MSG) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA3MSG).ToString                                        'その他３メッセージ
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA3KAISHIYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA3KAISHIYMD).ToString                            'その他３開始日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SONOTA3SHURYOYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SONOTA3SHURYOYMD).ToString                            'その他３終了日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.KINSHIKAIJOKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.KINSHIKAIJOKB).ToString                                  '禁止解除区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.SETAIYOKUSHIKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.SETAIYOKUSHIKB).ToString                                '世帯抑止区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.ICHIJIKAIJOSTYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.ICHIJIKAIJOSTYMD).ToString                            '一時解除開始年月日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.ICHIJIKAIJOSTTIME) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.ICHIJIKAIJOSTTIME).ToString                          '一時解除開始時刻
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.ICHIJIKAIJOEDYMD) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.ICHIJIKAIJOEDYMD).ToString                            '一時解除終了年月日
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.ICHIJIKAIJOEDTIME) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.ICHIJIKAIJOEDTIME).ToString                          '一時解除終了時刻
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.ICHIJIKAIJOUSER) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.ICHIJIKAIJOUSER).ToString                              '一時解除設定操作者ID
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.KANRIKB) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.KANRIKB).ToString                                              '管理区分
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.BIKO) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.BIKO).ToString                                                    '備考
            cdrKojinseigyoRrkRow.Item(ABKojinseigyoRirekiEntity.RESERVE) = cdrKojinseigyoRow.Item(ABKojinseigyomstEntity.RESERVE).ToString                                              'リザーブ

            cdrKojinseigyoRrkRow.EndEdit()

            intRrkKoshinCnt = m_cABKojinseigyoRirekiB.InsertKojinseigyoRireki(cdrKojinseigyoRrkRow)

            If (intRrkKoshinCnt = 0) Then
                '更新件数が0件の場合   
                'エラー定義を取得
                cfErrorClass = New UFErrorClass(ABConstClass.THIS_BUSINESSID)
                objErrorStruct = cfErrorClass.GetErrorStruct(URErrorClass.URE001044)
                Throw New UFAppException(objErrorStruct.m_strErrorMessage + ERR_MSG_KOJINSEIGYORIREKI, objErrorStruct.m_strErrorCode)
            End If

            ' デバッグログ出力
            m_cfLogClass.DebugEndWrite(m_cfControlData, THIS_CLASS_NAME, THIS_METHOD_NAME)

        Catch objRdbTimeOutExp As UFRdbTimeOutException    ' UFRdbTimeOutExceptionをキャッチ
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData, objRdbTimeOutExp.Message)
            ' UFAppExceptionをスローする
            Throw New UFAppException(objRdbTimeOutExp.Message, objRdbTimeOutExp.p_intErrorCode, objRdbTimeOutExp)

        Catch exAppException As UFAppException
            ' ワーニングログ出力
            m_cfLogClass.WarningWrite(m_cfControlData, exAppException.Message)
            ' ワーニングをスローする
            Throw exAppException

        Catch exException As Exception 'システムエラーをキャッチ
            ' エラーログ出力
            m_cfLogClass.ErrorWrite(m_cfControlData, exException.Message)
            ' システムエラーをスローする
            Throw exException

        End Try

        Return intKoshinCnt

    End Function
#End Region
    '*履歴番号 000065 2024/04/02 追加終了

End Class
